{"version":3,"file":"ThemeProvider.cjs.js","sources":["../../src/providers/ThemeProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nexport type Theme = 'tagaddod' | 'greenpan';\nexport type Direction = 'ltr' | 'rtl';\nexport type Locale = 'en' | 'ar';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  direction: Direction;\n  setDirection: (direction: Direction) => void;\n  locale: Locale;\n  setLocale: (locale: Locale) => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport interface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  defaultDirection?: Direction;\n  defaultLocale?: Locale;\n  storageKey?: string;\n}\n\n// Helper function to determine locale from direction\nconst getLocaleFromDirection = (direction: Direction): Locale => {\n  return direction === 'rtl' ? 'ar' : 'en';\n};\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  defaultTheme = 'tagaddod',\n  defaultDirection = 'ltr',\n  defaultLocale,\n  storageKey = 'tagaddod-theme'\n}) => {\n  // Initialize locale based on direction if not provided\n  const initialLocale = defaultLocale || getLocaleFromDirection(defaultDirection);\n\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem(storageKey);\n      if (stored) {\n        try {\n          const { theme } = JSON.parse(stored);\n          return theme || defaultTheme;\n        } catch {\n          return defaultTheme;\n        }\n      }\n    }\n    return defaultTheme;\n  });\n\n  const [direction, setDirection] = useState<Direction>(() => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem(storageKey);\n      if (stored) {\n        try {\n          const { direction } = JSON.parse(stored);\n          return direction || defaultDirection;\n        } catch {\n          return defaultDirection;\n        }\n      }\n    }\n    return defaultDirection;\n  });\n\n  const [locale, setLocale] = useState<Locale>(() => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem(storageKey);\n      if (stored) {\n        try {\n          const { locale } = JSON.parse(stored);\n          return locale || initialLocale;\n        } catch {\n          return initialLocale;\n        }\n      }\n    }\n    return initialLocale;\n  });\n\n  // Apply theme, locale and direction to root element\n  useEffect(() => {\n    if (typeof document !== 'undefined') {\n      const root = document.documentElement;\n      root.setAttribute('data-theme', theme);\n      root.setAttribute('data-locale', locale);\n      root.setAttribute('dir', direction);\n      \n      // Update document direction\n      document.dir = direction;\n      \n      // Store preferences\n      localStorage.setItem(storageKey, JSON.stringify({ theme, direction, locale }));\n    }\n  }, [theme, direction, locale, storageKey]);\n\n  // Automatically sync locale with direction changes\n  useEffect(() => {\n    const expectedLocale = getLocaleFromDirection(direction);\n    if (locale !== expectedLocale) {\n      setLocale(expectedLocale);\n    }\n  }, [direction, locale]);\n\n  const value = {\n    theme,\n    setTheme,\n    direction,\n    setDirection,\n    locale,\n    setLocale\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Utility hook for theme-aware classes\nexport const useThemeClasses = () => {\n  const { theme, direction, locale } = useTheme();\n  \n  return {\n    theme,\n    direction,\n    locale,\n    isRTL: direction === 'rtl',\n    themeClass: `theme-${theme}`,\n    dirClass: `dir-${direction}`,\n    localeClass: `locale-${locale}`\n  };\n};\n"],"names":["createContext","useState","theme","direction","locale","useEffect","jsx","useContext"],"mappings":";;;;AAea,MAAA,eAAeA,oBAA4C,MAAS;AAWjF,MAAM,yBAAyB,CAAC,cAAiC;AACxD,SAAA,cAAc,QAAQ,OAAO;AACtC;AAEO,MAAM,gBAA8C,CAAC;AAAA,EAC1D;AAAA,EACA,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB;AAAA,EACA,aAAa;AACf,MAAM;AAEE,QAAA,gBAAgB,iBAAiB,uBAAuB,gBAAgB;AAE9E,QAAM,CAAC,OAAO,QAAQ,IAAIC,eAAgB,MAAM;AAC1C,QAAA,OAAO,WAAW,aAAa;AAC3B,YAAA,SAAS,aAAa,QAAQ,UAAU;AAC9C,UAAI,QAAQ;AACN,YAAA;AACF,gBAAM,EAAE,OAAAC,OAAAA,IAAU,KAAK,MAAM,MAAM;AACnC,iBAAOA,UAAS;AAAA,QAAA,QACV;AACC,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAEK,WAAA;AAAA,EAAA,CACR;AAED,QAAM,CAAC,WAAW,YAAY,IAAID,eAAoB,MAAM;AACtD,QAAA,OAAO,WAAW,aAAa;AAC3B,YAAA,SAAS,aAAa,QAAQ,UAAU;AAC9C,UAAI,QAAQ;AACN,YAAA;AACF,gBAAM,EAAE,WAAAE,WAAAA,IAAc,KAAK,MAAM,MAAM;AACvC,iBAAOA,cAAa;AAAA,QAAA,QACd;AACC,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAEK,WAAA;AAAA,EAAA,CACR;AAED,QAAM,CAAC,QAAQ,SAAS,IAAIF,eAAiB,MAAM;AAC7C,QAAA,OAAO,WAAW,aAAa;AAC3B,YAAA,SAAS,aAAa,QAAQ,UAAU;AAC9C,UAAI,QAAQ;AACN,YAAA;AACF,gBAAM,EAAE,QAAAG,QAAAA,IAAW,KAAK,MAAM,MAAM;AACpC,iBAAOA,WAAU;AAAA,QAAA,QACX;AACC,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAEK,WAAA;AAAA,EAAA,CACR;AAGDC,QAAAA,UAAU,MAAM;AACV,QAAA,OAAO,aAAa,aAAa;AACnC,YAAM,OAAO,SAAS;AACjB,WAAA,aAAa,cAAc,KAAK;AAChC,WAAA,aAAa,eAAe,MAAM;AAClC,WAAA,aAAa,OAAO,SAAS;AAGlC,eAAS,MAAM;AAGF,mBAAA,QAAQ,YAAY,KAAK,UAAU,EAAE,OAAO,WAAW,OAAO,CAAC,CAAC;AAAA,IAAA;AAAA,KAE9E,CAAC,OAAO,WAAW,QAAQ,UAAU,CAAC;AAGzCA,QAAAA,UAAU,MAAM;AACR,UAAA,iBAAiB,uBAAuB,SAAS;AACvD,QAAI,WAAW,gBAAgB;AAC7B,gBAAU,cAAc;AAAA,IAAA;AAAA,EAC1B,GACC,CAAC,WAAW,MAAM,CAAC;AAEtB,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SACGC,2BAAAA,kBAAAA,IAAA,aAAa,UAAb,EAAsB,OACpB,SACH,CAAA;AAEJ;AAEO,MAAM,WAAW,MAAM;AACtB,QAAA,UAAUC,iBAAW,YAAY;AACvC,MAAI,YAAY,QAAW;AACnB,UAAA,IAAI,MAAM,8CAA8C;AAAA,EAAA;AAEzD,SAAA;AACT;AAGO,MAAM,kBAAkB,MAAM;AACnC,QAAM,EAAE,OAAO,WAAW,OAAA,IAAW,SAAS;AAEvC,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,cAAc;AAAA,IACrB,YAAY,SAAS,KAAK;AAAA,IAC1B,UAAU,OAAO,SAAS;AAAA,IAC1B,aAAa,UAAU,MAAM;AAAA,EAC/B;AACF;;;;;"}