{"version":3,"file":"Tabs.es.js","sources":["../../../src/components/Tabs/Tabs.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport clsx from 'clsx';\nimport styles from './Tabs.module.css';\n\nexport type TabsVariant = 'primary' | 'secondary';\nexport type TabsCount = 2 | 3 | 4 | 5 | 6;\nexport type TabsOrientation = 'horizontal' | 'vertical';\n\nexport interface TabsProps extends Omit<RadixTabs.TabsProps, 'orientation'> {\n  /**\n   * Visual appearance style of the tabs\n   * @default 'primary'\n   */\n  variant?: TabsVariant;\n\n  /**\n   * Whether the tabs should take the full width of the container\n   * @default false\n   */\n  fitted?: boolean;\n\n  /**\n   * Number of tabs (used for styling classes)\n   * @default 2\n   */\n  count?: TabsCount;\n\n  /**\n   * Direction of the tabs (handled automatically via context)\n   * @default 'ltr'\n   */\n  dir?: 'ltr' | 'rtl';\n\n  /**\n   * The orientation of the tabs component\n   * @default 'horizontal'\n   */\n  orientation?: TabsOrientation;\n\n  /**\n   * Class name for the Tabs root element\n   */\n  className?: string;\n\n  /**\n   * Class name for the TabsList element\n   */\n  listClassName?: string;\n\n  /**\n   * Accessible label for the tabs\n   * When provided, it will be passed as aria-label to the tabs list\n   */\n  ariaLabel?: string;\n\n  /**\n   * ID of the element that labels the tabs\n   * Alternative to ariaLabel, this will be passed as aria-labelledby to the tabs list\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * Children components\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Tabs allow users to navigate between related sections of content.\n */\nexport const Tabs = forwardRef<HTMLDivElement, TabsProps>(({\n  variant = 'primary',\n  fitted = false,\n  count = 2,\n  dir,\n  orientation = 'horizontal',\n  children,\n  className,\n  listClassName,\n  ariaLabel,\n  ariaLabelledby,\n  ...props\n}, ref) => {\n  // Detect if we need to apply RTL text fixes\n  const isRTL = dir === 'rtl' || document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Apply line height style based on text direction\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n\n  // Extract TabsList and TabsContent children\n  const childrenArray = React.Children.toArray(children);\n  const tabsList = childrenArray.find(\n    (child) => React.isValidElement(child) && child.type === TabsList\n  );\n  const tabsContent = childrenArray.filter(\n    (child) => React.isValidElement(child) && child.type === TabsContent\n  );\n\n  // Set aria attributes for the list\n  const listProps: React.HTMLAttributes<HTMLDivElement> = {};\n  if (ariaLabel) {\n    listProps['aria-label'] = ariaLabel;\n  }\n  if (ariaLabelledby) {\n    listProps['aria-labelledby'] = ariaLabelledby;\n  }\n\n  return (\n    <RadixTabs.Root\n      ref={ref}\n      className={clsx(\n        styles.tabsRoot,\n        styles[`variant${variant.charAt(0).toUpperCase() + variant.slice(1)}`],\n        fitted && styles.fitted,\n        styles[`count${count}`],\n        className\n      )}\n      dir={dir}\n      orientation={orientation}\n      {...props}\n    >\n      {tabsList && (\n        <RadixTabs.List \n          className={clsx(\n            styles.tabsList,\n            listClassName\n          )}\n          style={lineHeightStyle}\n          {...listProps}\n        >\n          {tabsList}\n        </RadixTabs.List>\n      )}\n      {tabsContent}\n    </RadixTabs.Root>\n  );\n});\n\nTabs.displayName = 'Tabs';\n\nexport interface TabsListProps {\n  /**\n   * Class name for the TabsList element\n   */\n  className?: string;\n  \n  /**\n   * Children components\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Container for the tab triggers (tabs).\n */\nexport const TabsList: React.FC<TabsListProps> = ({ children }) => {\n  return <>{children}</>;\n};\n\nTabsList.displayName = 'TabsList';\n\nexport interface TabsTriggerProps extends RadixTabs.TabsTriggerProps {\n  /**\n   * Class name for the TabsTrigger element\n   */\n  className?: string;\n  \n  /**\n   * Badge to display alongside the label\n   */\n  badge?: React.ReactNode;\n  \n  /**\n   * Icon to display before the label\n   */\n  icon?: React.ReactNode;\n  \n  /**\n   * Accessible description for the tab\n   * This will be passed to aria-description\n   */\n  description?: string;\n  \n  /**\n   * Children components\n   */\n  children: React.ReactNode;\n}\n\n/**\n * The button that activates its associated content.\n */\nexport const TabsTrigger = forwardRef<HTMLButtonElement, TabsTriggerProps>(({\n  className,\n  badge,\n  icon,\n  children,\n  description,\n  ...props\n}, ref) => {\n  // Detect if we need to apply RTL text fixes\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Apply line height style based on text direction\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n\n  // Generate a unique ID for the description if provided\n  const descriptionId = description ? `tabs-desc-${React.useId()}` : undefined;\n\n  return (\n    <RadixTabs.Trigger\n      ref={ref}\n      className={clsx(\n        styles.tabsTrigger,\n        className\n      )}\n      aria-describedby={descriptionId}\n      {...props}\n    >\n      {icon && <span className={styles.tabsIcon} aria-hidden=\"true\">{icon}</span>}\n      <span className={styles.tabsLabel} style={lineHeightStyle}>{children}</span>\n      {badge && <span className={styles.tabsBadge} aria-label={`${badge} items`}>{badge}</span>}\n      {description && <span id={descriptionId} style={{ display: 'none' }}>{description}</span>}\n    </RadixTabs.Trigger>\n  );\n});\n\nTabsTrigger.displayName = 'TabsTrigger';\n\nexport interface TabsContentProps extends RadixTabs.TabsContentProps {\n  /**\n   * Class name for the TabsContent element\n   */\n  className?: string;\n\n  /**\n   * Children components\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Contains the content associated with each trigger.\n */\nexport const TabsContent = forwardRef<HTMLDivElement, TabsContentProps>(({\n  className,\n  children,\n  ...props\n}, ref) => {\n  return (\n    <RadixTabs.Content\n      ref={ref}\n      className={clsx(\n        styles.tabsContent,\n        className\n      )}\n      tabIndex={0} // Ensure focus can be set to the content\n      {...props}\n    >\n      {children}\n    </RadixTabs.Content>\n  );\n});\n\nTabsContent.displayName = 'TabsContent';\n\nexport interface TabsRootProps extends RadixTabs.TabsProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\n/**\n * The root container for the tabs component.\n */\nexport const TabsRoot = forwardRef<HTMLDivElement, TabsRootProps>(({\n  className,\n  children,\n  ...props\n}, ref) => {\n  return <RadixTabs.Root ref={ref} className={className} {...props}>{children}</RadixTabs.Root>;\n});\n\nTabsRoot.displayName = 'TabsRoot';\n\n// Export all components\nexport { \n  TabsRoot as Root,\n  TabsList as List,\n  TabsTrigger as Trigger,\n  TabsContent as Content\n};\n\n// Export variants/sizes for storybook\nexport const tabsVariants = ['primary', 'secondary'] as const;\nexport const tabsCounts = [2, 3, 4, 5, 6] as const;\nexport const tabsOrientations = ['horizontal', 'vertical'] as const;\n\n// Export shared functions (for testing/stories)\nexport const getTabStateClass = (isHovered: boolean, isActive: boolean, isDisabled: boolean) => {\n  if (isDisabled) return 'disabled';\n  if (isActive) return 'active';\n  if (isHovered) return 'hover';\n  return 'rest';\n};\n"],"names":["React","jsxs","RadixTabs.Root","jsx","RadixTabs.List","RadixTabs.Trigger","RadixTabs.Content"],"mappings":"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"}