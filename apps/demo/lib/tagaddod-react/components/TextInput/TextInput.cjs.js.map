{"version":3,"file":"TextInput.cjs.js","sources":["../../../src/components/TextInput/TextInput.tsx"],"sourcesContent":["import React, { forwardRef, useState, useEffect } from 'react';\nimport * as Form from '@radix-ui/react-form';\nimport clsx from 'clsx';\nimport { IconX, IconExclamationCircle, IconEye, IconEyeOff } from '@tabler/icons-react';\nimport styles from './TextInput.module.css';\n\nexport type TextInputSize = 'micro' | 'medium' | 'large';\n\nexport interface TextInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'prefix'> {\n  /** Text label displayed above the input */\n  label?: string;\n  \n  /** Help text displayed below the input */\n  helpText?: string;\n  \n  /** Error message displayed below the input */\n  errorMessage?: string;\n  \n  /** Size of the input field */\n  size?: TextInputSize;\n  \n  /** Whether the input should take full width of its container */\n  fullWidth?: boolean;\n  \n  /** Whether to hide the label visually (still accessible to screen readers) */\n  hideLabel?: boolean;\n  \n  /** Mark the field as optional, displaying \"(Optional)\" text next to label */\n  optional?: boolean;\n  \n  /** Content to display before the input text (icon or text) */\n  prefix?: React.ReactNode;\n  \n  /** Content to display after the input text (icon or text) */\n  suffix?: React.ReactNode;\n  \n  /** Whether to show a clear button when the input has a value */\n  clearable?: boolean;\n  \n  /** Callback when the clear button is clicked */\n  onClear?: () => void;\n  \n  /** Whether the field is read-only */\n  readOnly?: boolean;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  ({ \n    label, \n    name,\n    id,\n    value,\n    defaultValue,\n    placeholder,\n    helpText,\n    errorMessage,\n    required,\n    disabled,\n    readOnly,\n    className,\n    size = 'medium',\n    fullWidth = false,\n    hideLabel = false,\n    optional = false,\n    prefix,\n    suffix,\n    clearable = false,\n    onClear,\n    type = 'text',\n    onChange,\n    ...props \n  }, ref) => {\n    const [inputValue, setInputValue] = useState<string>('');\n    const [passwordVisible, setPasswordVisible] = useState(false);\n    const uniqueId = id || `text-input-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Detect RTL for line height adjustments\n    const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n    \n    // Create lineHeightStyle object for proper text rendering\n    const lineHeightStyle = {\n      lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n    };\n    \n    // Initialize input value from props\n    useEffect(() => {\n      if (value !== undefined) {\n        setInputValue(String(value));\n      }\n    }, [value]);\n    \n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setInputValue(e.target.value);\n      onChange?.(e);\n    };\n    \n    const handleClear = () => {\n      setInputValue('');\n      \n      // Create synthetic change event\n      const syntheticEvent = {\n        target: { value: '', name },\n        currentTarget: { value: '', name },\n      } as React.ChangeEvent<HTMLInputElement>;\n      \n      onChange?.(syntheticEvent);\n      onClear?.();\n    };\n    \n    const togglePasswordVisibility = () => {\n      setPasswordVisible(!passwordVisible);\n    };\n    \n    // Determine the actual input type for password fields\n    const actualType = type === 'password' && passwordVisible ? 'text' : type;\n    \n    // For password fields, provide visibility toggle\n    const passwordSuffix = type === 'password' ? (\n      <button \n        type=\"button\" \n        className={styles.iconButton}\n        onClick={togglePasswordVisibility}\n        aria-label={passwordVisible ? \"Hide password\" : \"Show password\"}\n        tabIndex={-1}\n      >\n        {passwordVisible ? <IconEyeOff size={18} /> : <IconEye size={18} />}\n      </button>\n    ) : null;\n    \n    // Prepare clear button if enabled and has value\n    const clearButton = clearable && inputValue ? (\n      <button \n        type=\"button\" \n        className={styles.iconButton}\n        onClick={handleClear}\n        aria-label=\"Clear input\"\n        tabIndex={-1}\n      >\n        <IconX size={18} />\n      </button>\n    ) : null;\n    \n    // Combine suffix with clear button and password toggle\n    const combinedSuffix = (\n      <>\n        {suffix}\n        {passwordSuffix}\n        {clearButton}\n      </>\n    );\n    \n    const hasError = !!errorMessage;\n    const sizeClass = `size${size.charAt(0).toUpperCase() + size.slice(1)}`;\n    \n    return (\n      <Form.Root \n        className={clsx(\n          styles.container,\n          hasError && styles.error,\n          styles[sizeClass],\n          fullWidth && styles.fullWidth,\n          className\n        )}\n      >\n        <Form.Field name={name || 'text-field'}>\n          {label && !hideLabel && (\n            <div className={styles.labelContainer}>\n              <Form.Label className={styles.label} style={lineHeightStyle}>\n                {label}\n                {required && <span className={styles.required}>*</span>}\n                {optional && <span className={styles.optional}>(Optional)</span>}\n              </Form.Label>\n            </div>\n          )}\n          \n          <div \n            className={clsx(\n              styles.inputWrapper,\n              disabled && styles.disabled,\n              readOnly && styles.readOnly\n            )}\n          >\n            {prefix && <div className={styles.prefix}>{prefix}</div>}\n            \n            <Form.Control asChild>\n              <input\n                ref={ref}\n                id={uniqueId}\n                className={clsx(\n                  styles.input,\n                  prefix && styles.withPrefix,\n                  (suffix || clearButton || passwordSuffix) && styles.withSuffix\n                )}\n                name={name}\n                value={value === undefined ? inputValue : value}\n                placeholder={placeholder}\n                required={required}\n                disabled={disabled}\n                readOnly={readOnly}\n                type={actualType}\n                onChange={handleChange}\n                aria-invalid={hasError}\n                aria-describedby={`${uniqueId}-helptext ${uniqueId}-error`}\n                {...props}\n              />\n            </Form.Control>\n            \n            {(suffix || clearButton || passwordSuffix) && (\n              <div className={styles.suffix}>{combinedSuffix}</div>\n            )}\n          </div>\n          \n          {hasError ? (\n            <div id={`${uniqueId}-error`} className={styles.errorMessage} style={lineHeightStyle}>\n              <IconExclamationCircle size={16} className={styles.errorIcon} />\n              {errorMessage}\n            </div>\n          ) : helpText ? (\n            <div id={`${uniqueId}-helptext`} className={styles.helpText} style={lineHeightStyle}>\n              {helpText}\n            </div>\n          ) : null}\n        </Form.Field>\n      </Form.Root>\n    );\n  }\n);\n\nTextInput.displayName = 'TextInput';\n\n// Export size arrays for documentation\nexport const textInputSizes = ['micro', 'medium', 'large'] as const;\n"],"names":["forwardRef","useState","useEffect","jsx","styles","jsxs","Fragment","Form.Root","clsx","Form.Field","Form.Label","Form.Control"],"mappings":"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"}