{"version":3,"file":"Switch.cjs.js","sources":["../../../src/components/Switch/Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as SwitchPrimitive from '@radix-ui/react-switch';\nimport styles from './Switch.module.css';\nimport clsx from 'clsx';\n\nexport interface SwitchProps extends Omit<\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitive.Root>,\n  'checked' | 'defaultChecked' | 'onCheckedChange'\n> {\n  /**\n   * Whether the switch is pressed (checked) or not\n   * @default false\n   */\n  pressed?: boolean;\n  \n  /**\n   * The default pressed state when initially rendered\n   * @default false\n   */\n  defaultPressed?: boolean;\n  \n  /**\n   * Size of the switch (sm = 20px, md = 24px)\n   * @default \"md\"\n   */\n  size?: 'sm' | 'md';\n  \n  /**\n   * Callback when the pressed state changes\n   */\n  onPressedChange?: (pressed: boolean) => void;\n}\n\n/**\n * Switch component for toggling between checked and unchecked states\n */\nexport const Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitive.Root>,\n  SwitchProps\n>(({\n  pressed,\n  defaultPressed,\n  size = 'md',\n  onPressedChange,\n  className,\n  ...props\n}, ref) => {\n  // State for uncontrolled mode\n  const [internalPressed, setInternalPressed] = React.useState(defaultPressed || false);\n  \n  // Use internal state only if pressed prop is not provided (uncontrolled mode)\n  const isPressed = pressed !== undefined ? pressed : internalPressed;\n  \n  // Handle toggle\n  const handleCheckedChange = (checked: boolean) => {\n    // Update internal state for uncontrolled mode\n    if (pressed === undefined) {\n      setInternalPressed(checked);\n    }\n    \n    // Call the callback if provided\n    if (onPressedChange) {\n      onPressedChange(checked);\n    }\n  };\n\n  // Detect if we need to apply RTL text fixes\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Apply line height style based on text direction\n  const rtlLineHeight = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n\n  return (\n    <SwitchPrimitive.Root\n      ref={ref}\n      checked={isPressed}\n      onCheckedChange={handleCheckedChange}\n      className={clsx(\n        styles.root,\n        size === 'sm' ? styles.sizeSm : styles.sizeMd,\n        isPressed && styles.pressed,\n        props.disabled && styles.disabled,\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb \n        className={clsx(\n          styles.thumb,\n          size === 'sm' ? styles.thumbSm : styles.thumbMd,\n          isPressed && styles.thumbPressed\n        )}\n      />\n    </SwitchPrimitive.Root>\n  );\n});\n\nSwitch.displayName = 'Switch';\n"],"names":["React","jsx","SwitchPrimitive.Root","clsx","styles","SwitchPrimitive.Thumb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAoCa,MAAA,SAASA,iBAAM,WAG1B,CAAC;AAAA,EACD;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AAET,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,iBAAM,SAAS,kBAAkB,KAAK;AAG9E,QAAA,YAAY,YAAY,SAAY,UAAU;AAG9C,QAAA,sBAAsB,CAAC,YAAqB;AAEhD,QAAI,YAAY,QAAW;AACzB,yBAAmB,OAAO;AAAA,IAAA;AAI5B,QAAI,iBAAiB;AACnB,sBAAgB,OAAO;AAAA,IAAA;AAAA,EAE3B;AAGc,WAAS,QAAQ,SAAS,SAAS,gBAAgB,QAAQ;AAQvE,SAAAC,2BAAA,kBAAA;AAAA,IAACC,MAAgB;AAAA,IAAhB;AAAA,MACC;AAAA,MACA,SAAS;AAAA,MACT,iBAAiB;AAAA,MACjB,WAAWC,KAAA;AAAA,QACTC,cAAAA,QAAO;AAAA,QACP,SAAS,OAAOA,cAAAA,QAAO,SAASA,cAAO,QAAA;AAAA,QACvC,aAAaA,cAAO,QAAA;AAAA,QACpB,MAAM,YAAYA,cAAAA,QAAO;AAAA,QACzB;AAAA,MACF;AAAA,MACC,GAAG;AAAA,MAEJ,UAAAH,2BAAA,kBAAA;AAAA,QAACI,MAAgB;AAAA,QAAhB;AAAA,UACC,WAAWF,KAAA;AAAA,YACTC,cAAAA,QAAO;AAAA,YACP,SAAS,OAAOA,cAAAA,QAAO,UAAUA,cAAO,QAAA;AAAA,YACxC,aAAaA,cAAAA,QAAO;AAAA,UAAA;AAAA,QACtB;AAAA,MAAA;AAAA,IACF;AAAA,EACF;AAEJ,CAAC;AAED,OAAO,cAAc;;"}