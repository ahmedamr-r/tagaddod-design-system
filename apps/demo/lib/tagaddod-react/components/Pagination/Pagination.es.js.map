{"version":3,"file":"Pagination.es.js","sources":["../../../src/components/Pagination/Pagination.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport clsx from 'clsx';\nimport { IconChevronLeft, IconChevronRight } from '@tabler/icons-react';\nimport styles from './Pagination.module.css';\nimport { Button } from '../Button/Button';\nimport { PaginationProps } from './types';\n\n// Define a constant for the ellipsis\nexport const DOTS = '...';\n\n/**\n * Pagination hook to calculate the range of pages to display\n */\nexport const usePagination = ({\n  total,\n  current,\n  pageSize = 10,\n  siblingCount = 1,\n}: {\n  total: number;\n  current: number;\n  pageSize?: number;\n  siblingCount?: number;\n}) => {\n  // Calculate total pages\n  const totalPages = Math.ceil(total / pageSize);\n  \n  // Create a range function helper\n  const range = (start: number, end: number): number[] => {\n    const length = end - start + 1;\n    return Array.from({ length }, (_, i) => start + i);\n  };\n  \n  // Calculate the range of pages to display\n  const paginationRange = useMemo(() => {\n    // Ensure current page is within valid range\n    const currentPage = Math.max(1, Math.min(current, totalPages));\n    \n    // Number of items to always display\n    const totalPageItems = siblingCount * 2 + 5; // siblings + first + last + current + 2 ellipsis\n    \n    // If we have fewer pages than the number we want to show\n    if (totalPages <= totalPageItems) {\n      return range(1, totalPages);\n    }\n    \n    // Determine if we need left or right ellipsis\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\n    \n    // Don't show ellipsis if there's just one page missing\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\n    \n    const firstPageIndex = 1;\n    const lastPageIndex = totalPages;\n    \n    // No left ellipsis, but right ellipsis\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount;\n      const leftRange = range(1, leftItemCount);\n      \n      return [...leftRange, DOTS, totalPages] as Array<number | typeof DOTS>;\n    }\n    \n    // No right ellipsis, but left ellipsis\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount;\n      const rightRange = range(totalPages - rightItemCount + 1, totalPages);\n      \n      return [firstPageIndex, DOTS, ...rightRange] as Array<number | typeof DOTS>;\n    }\n    \n    // Both ellipsis\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      \n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex] as Array<number | typeof DOTS>;\n    }\n    \n    // Shouldn't get here, but just in case\n    return range(1, totalPages);\n  }, [total, current, pageSize, siblingCount]);\n  \n  return {\n    paginationRange,\n    totalPages,\n    currentPage: current,\n  };\n};\n\n/**\n * Pagination component\n */\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  current = 1,\n  pageSize = 10,\n  onChange,\n  onPageSizeChange,\n  \n  showCount = true,\n  showRowsInPage = true,\n  \n  countType = 'long',\n  \n  className,\n  pageSizeOptions = [10, 20, 50, 100],\n}) => {\n  // State to track current page internally if not controlled\n  const [currentPage, setCurrentPage] = useState<number>(current);\n  // State to track page size internally\n  const [currentPageSize, setCurrentPageSize] = useState<number>(pageSize);\n  \n  // Update internal state when props change\n  useEffect(() => {\n    setCurrentPage(current);\n  }, [current]);\n  \n  useEffect(() => {\n    setCurrentPageSize(pageSize);\n  }, [pageSize]);\n  \n  // Get pagination data from hook\n  const { paginationRange, totalPages } = usePagination({\n    total,\n    current: currentPage,\n    pageSize: currentPageSize,\n    siblingCount: countType === 'long' ? 1 : 0, // No siblings in short mode\n  });\n  \n  // Handler for page change\n  const handlePageChange = (page: number) => {\n    if (page === currentPage) return;\n    setCurrentPage(page);\n    onChange?.(page, currentPageSize);\n  };\n  \n  // Handler for previous page\n  const handlePrev = () => {\n    if (currentPage > 1) {\n      handlePageChange(currentPage - 1);\n    }\n  };\n  \n  // Handler for next page\n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      handlePageChange(currentPage + 1);\n    }\n  };\n  \n  // Handler for page size change\n  const handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newPageSize = Number(e.target.value);\n    setCurrentPageSize(newPageSize);\n    // Reset to page 1 when changing page size\n    setCurrentPage(1);\n    onChange?.(1, newPageSize);\n    onPageSizeChange?.(newPageSize);\n  };\n  \n  // Calculate \"Showing X to Y of Z entries\" text\n  const countText = useMemo(() => {\n    const start = total === 0 ? 0 : (currentPage - 1) * currentPageSize + 1;\n    const end = Math.min(currentPage * currentPageSize, total);\n    return `Showing ${start} to ${end} of ${total} entries`;\n  }, [currentPage, currentPageSize, total]);\n  \n  // RTL detection for line height\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n  \n  // Render ellipsis\n  const renderEllipsis = (key: string) => (\n    <div className={styles.ellipsis} key={key} aria-hidden=\"true\">•••</div>\n  );\n  \n  // Don't render if no items or only one page\n  if (total === 0 || totalPages <= 0) {\n    return null;\n  }\n  \n  return (\n    <div className={clsx(styles.pagination, className)}>\n      {showCount && (\n        <div className={styles.count} style={lineHeightStyle}>\n          {isRTL ? (\n            // Arabic format\n            `عرض ${(currentPage - 1) * currentPageSize + 1} إلى ${Math.min(currentPage * currentPageSize, total)} من أصل ${total}`\n          ) : (\n            // English format\n            countText\n          )}\n        </div>\n      )}\n      \n      <div className={styles.controlsGroup}>\n        <div className={styles.paginationItems}>\n          {/* Previous button */}\n          <Button\n            size=\"micro\"\n            variant=\"secondary\"\n            tone=\"neutral\"\n            onClick={handlePrev}\n            disabled={currentPage === 1}\n            aria-label=\"Previous page\"\n            prefixIcon={<IconChevronLeft size={16} />}\n          />\n          \n          {/* Page buttons */}\n          {paginationRange.map((pageNumber, index) => {\n            if (pageNumber === DOTS) {\n              return renderEllipsis(`ellipsis-${index}`);\n            }\n            \n            const page = pageNumber as number;\n            const isCurrentPage = page === currentPage;\n            \n            return (\n              <Button\n                key={`page-${page}`}\n                size=\"micro\"\n                variant={isCurrentPage ? \"primary\" : \"secondary\"}\n                tone={isCurrentPage ? \"default\" : \"neutral\"}\n                onClick={() => handlePageChange(page)}\n                aria-current={isCurrentPage ? 'page' : undefined}\n              >\n                {page}\n              </Button>\n            );\n          })}\n          \n          {/* Next button */}\n          <Button\n            size=\"micro\"\n            variant=\"secondary\"\n            tone=\"neutral\"\n            onClick={handleNext}\n            disabled={currentPage === totalPages}\n            aria-label=\"Next page\"\n            suffixIcon={<IconChevronRight size={16} />}\n          />\n        </div>\n        \n        {showRowsInPage && (\n          <div className={styles.rowsPerPage}>\n            <span className={styles.rowsLabel} style={lineHeightStyle}>\n              {isRTL ? 'عدد الصفوف' : 'Rows in Page'}\n            </span>\n            <div className={styles.selectWrapper}>\n              <select \n                className={styles.select}\n                value={currentPageSize}\n                onChange={handlePageSizeChange}\n                aria-label={isRTL ? 'عدد الصفوف' : 'Rows in Page'}\n              >\n                {pageSizeOptions.map(size => (\n                  <option key={size} value={size} className={styles.selectValue} style={lineHeightStyle}>\n                    {size}\n                  </option>\n                ))}\n              </select>\n              <span className={styles.selectArrow}>\n                <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M6 9L12 15L18 9\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                </svg>\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"names":["jsx","jsxs"],"mappings":"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"}