{"version":3,"file":"usePagination.cjs.js","sources":["../../../src/components/Pagination/usePagination.ts"],"sourcesContent":["import { useMemo } from 'react';\n\n// Define a constant for the ellipsis\nexport const DOTS = '...';\n\nexport interface UsePaginationProps {\n  /**\n   * Total number of items\n   */\n  total: number;\n  \n  /**\n   * Current page number (1-based)\n   */\n  current: number;\n  \n  /**\n   * Number of items per page\n   * @default 10\n   */\n  pageSize?: number;\n  \n  /**\n   * Number of sibling pages to display on each side of current page\n   * @default 1\n   */\n  siblingCount?: number;\n}\n\nexport interface UsePaginationResult {\n  /**\n   * Array of page numbers and ellipsis to render\n   */\n  paginationRange: Array<number | typeof DOTS>;\n  \n  /**\n   * Total number of pages\n   */\n  totalPages: number;\n  \n  /**\n   * Current page\n   */\n  currentPage: number;\n}\n\n/**\n * Hook to generate a range of pagination items\n */\nexport const usePagination = ({\n  total,\n  current,\n  pageSize = 10,\n  siblingCount = 1,\n}: UsePaginationProps): UsePaginationResult => {\n  // Calculate total pages\n  const totalPages = Math.ceil(total / pageSize);\n  \n  // Create a range function helper\n  const range = (start: number, end: number): number[] => {\n    const length = end - start + 1;\n    return Array.from({ length }, (_, i) => start + i);\n  };\n  \n  // Calculate the range of pages to display\n  const paginationRange = useMemo(() => {\n    // Ensure current page is within valid range\n    const currentPage = Math.max(1, Math.min(current, totalPages));\n    \n    // Number of items to always display\n    const totalPageItems = siblingCount * 2 + 5; // siblings + first + last + current + 2 ellipsis\n    \n    // If we have fewer pages than the number we want to show\n    if (totalPages <= totalPageItems) {\n      return range(1, totalPages);\n    }\n    \n    // Determine if we need left or right ellipsis\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\n    \n    // Don't show ellipsis if there's just one page missing\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\n    \n    const firstPageIndex = 1;\n    const lastPageIndex = totalPages;\n    \n    // No left ellipsis, but right ellipsis\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount;\n      const leftRange = range(1, leftItemCount);\n      \n      return [...leftRange, DOTS, totalPages] as Array<number | typeof DOTS>;\n    }\n    \n    // No right ellipsis, but left ellipsis\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount;\n      const rightRange = range(totalPages - rightItemCount + 1, totalPages);\n      \n      return [firstPageIndex, DOTS, ...rightRange] as Array<number | typeof DOTS>;\n    }\n    \n    // Both ellipsis\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      \n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex] as Array<number | typeof DOTS>;\n    }\n    \n    // Shouldn't get here, but just in case\n    return range(1, totalPages);\n  }, [total, current, pageSize, siblingCount]);\n  \n  return {\n    paginationRange,\n    totalPages,\n    currentPage: current,\n  };\n};\n"],"names":["useMemo"],"mappings":";;;AAGO,MAAM,OAAO;AA8Cb,MAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX,eAAe;AACjB,MAA+C;AAE7C,QAAM,aAAa,KAAK,KAAK,QAAQ,QAAQ;AAGvC,QAAA,QAAQ,CAAC,OAAe,QAA0B;AAChD,UAAA,SAAS,MAAM,QAAQ;AACtB,WAAA,MAAM,KAAK,EAAE,OAAA,GAAU,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,EACnD;AAGM,QAAA,kBAAkBA,MAAAA,QAAQ,MAAM;AAE9B,UAAA,cAAc,KAAK,IAAI,GAAG,KAAK,IAAI,SAAS,UAAU,CAAC;AAGvD,UAAA,iBAAiB,eAAe,IAAI;AAG1C,QAAI,cAAc,gBAAgB;AACzB,aAAA,MAAM,GAAG,UAAU;AAAA,IAAA;AAI5B,UAAM,mBAAmB,KAAK,IAAI,cAAc,cAAc,CAAC;AAC/D,UAAM,oBAAoB,KAAK,IAAI,cAAc,cAAc,UAAU;AAGzE,UAAM,qBAAqB,mBAAmB;AACxC,UAAA,sBAAsB,oBAAoB,aAAa;AAE7D,UAAM,iBAAiB;AACvB,UAAM,gBAAgB;AAGlB,QAAA,CAAC,sBAAsB,qBAAqB;AACxC,YAAA,gBAAgB,IAAI,IAAI;AACxB,YAAA,YAAY,MAAM,GAAG,aAAa;AAExC,aAAO,CAAC,GAAG,WAAW,MAAM,UAAU;AAAA,IAAA;AAIpC,QAAA,sBAAsB,CAAC,qBAAqB;AACxC,YAAA,iBAAiB,IAAI,IAAI;AAC/B,YAAM,aAAa,MAAM,aAAa,iBAAiB,GAAG,UAAU;AAEpE,aAAO,CAAC,gBAAgB,MAAM,GAAG,UAAU;AAAA,IAAA;AAI7C,QAAI,sBAAsB,qBAAqB;AACvC,YAAA,cAAc,MAAM,kBAAkB,iBAAiB;AAE7D,aAAO,CAAC,gBAAgB,MAAM,GAAG,aAAa,MAAM,aAAa;AAAA,IAAA;AAI5D,WAAA,MAAM,GAAG,UAAU;AAAA,KACzB,CAAC,OAAO,SAAS,UAAU,YAAY,CAAC;AAEpC,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,aAAa;AAAA,EACf;AACF;;;"}