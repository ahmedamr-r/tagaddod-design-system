{"version":3,"file":"Table.cjs.js","sources":["../../../src/components/Table/Table.tsx"],"sourcesContent":["import { useMemo, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getSortedRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  ColumnDef,\n  SortingState,\n  ColumnMeta,\n  VisibilityState,\n  flexRender,\n} from '@tanstack/react-table';\nimport { Tabs, TabsList, TabsTrigger } from '../Tabs';\n\n// Extend ColumnMeta to include custom properties\ndeclare module '@tanstack/react-table' {\n  interface ColumnMeta<TData extends object, TValue> {\n    headerClassName?: string;\n    cellClassName?: string;\n    width?: string;\n  }\n}\nimport { FilterItem } from './FilterItem';\nimport { TableHeader } from './TableHeader';\nimport { TableHeaderCell } from './TableHeaderCell';\nimport { TableCell } from './TableCell';\nimport { TableContentCase } from './TableContentCase';\nimport { Pagination } from '../Pagination';\nimport styles from './Table.module.css';\nimport { TableProps, TableTab } from './types';\n\nexport const Table = <T extends object>({\n  data,\n  columns,\n  title,\n  badge,\n  pagination,\n  striped = true,\n  gridCells = false,\n  showHeader = true,\n  showTabs = false,\n  showPagination = true,\n  showSearch = true,\n  showFilters = true,\n  showFilterBar: defaultShowFilterBar = false,\n  showExport = false,\n  showTotalBadge = true,\n  defaultSorting = [],\n  defaultColumnVisibility = {},\n  onRowClick,\n  onCellClick,\n  tabItems = [],\n  tableTabs = [],\n  onTabChange,\n  state = 'normal',\n  errorMessage,\n  emptyMessage,\n  notFoundMessage,\n  searchQuery = '',\n  onSearchChange,\n  onExport,\n  activeFilters = {},\n  onFilterChange,\n  filterOptions = {},\n  className = '',\n  footerContent,\n  emptyStateNode,\n}: TableProps<T>) => {\n  // Table state\n  const [sorting, setSorting] = useState<SortingState>(defaultSorting);\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(defaultColumnVisibility);\n  const [globalFilter, setGlobalFilter] = useState<string>(searchQuery);\n  const [isFilterBarVisible, setIsFilterBarVisible] = useState<boolean>(defaultShowFilterBar);\n  \n  // Default pagination state for internal use when not provided\n  const [internalPagination, setInternalPagination] = useState({\n    pageIndex: 0,\n    pageSize: 10,\n  });\n\n  // Determine if we're using tableTabs (enhanced) or simple tabItems\n  const usingEnhancedTabs = tableTabs.length > 0;\n\n  // Initialize active tab from tableTabs or tabItems\n  const initialActiveTab = useMemo(() => {\n    // Check if tableTabs has active tab\n    if (usingEnhancedTabs) {\n      const activeTabItem = tableTabs.find(tab => tab.active);\n      if (activeTabItem) return activeTabItem.id;\n      return tableTabs[0]?.id || '';\n    }\n    \n    // Otherwise check tabItems\n    if (tabItems.length > 0) {\n      const activeTabItem = tabItems.find(tab => tab.active);\n      if (activeTabItem) return activeTabItem.id;\n      return tabItems[0]?.id || '';\n    }\n    \n    return '';\n  }, [tableTabs, tabItems, usingEnhancedTabs]);\n\n  const [activeTab, setActiveTab] = useState<string>(initialActiveTab);\n\n  // Get the current active tab configuration if using enhanced tabs\n  const activeTabConfig = useMemo<TableTab<T> | null>(() => {\n    if (!usingEnhancedTabs) return null;\n    return tableTabs.find(tab => tab.id === activeTab) || null;\n  }, [activeTab, tableTabs, usingEnhancedTabs]);\n\n  // Get the current data for the active tab (or default data)\n  const activeData = useMemo<T[]>(() => {\n    if (usingEnhancedTabs && activeTabConfig?.data) {\n      return activeTabConfig.data;\n    }\n    return data;\n  }, [data, activeTabConfig, usingEnhancedTabs]);\n\n  // Get the current columns for the active tab (or default columns)\n  const activeColumns = useMemo<ColumnDef<T, any>[]>(() => {\n    if (usingEnhancedTabs && activeTabConfig?.columns) {\n      return activeTabConfig.columns;\n    }\n    return columns;\n  }, [columns, activeTabConfig, usingEnhancedTabs]);\n\n  // Get the current title for the active tab (or default title)\n  const activeTitle = useMemo<string | undefined>(() => {\n    if (usingEnhancedTabs && activeTabConfig?.title) {\n      return activeTabConfig.title;\n    }\n    return title;\n  }, [title, activeTabConfig, usingEnhancedTabs]);\n\n  // Get the current pagination for the active tab (or default pagination)\n  const activePagination = useMemo(() => {\n    if (usingEnhancedTabs && activeTabConfig?.pagination) {\n      return activeTabConfig.pagination;\n    }\n    return pagination;\n  }, [pagination, activeTabConfig, usingEnhancedTabs]);\n\n  // Sync search query with global filter\n  useEffect(() => {\n    setGlobalFilter(searchQuery);\n  }, [searchQuery]);\n\n  // Transform tabItems or tableTabs to tab props needed by Tabs component\n  const tabsForDisplay = useMemo(() => {\n    if (usingEnhancedTabs) {\n      return tableTabs.map(tab => ({\n        id: tab.id,\n        label: tab.label,\n        active: tab.id === activeTab,\n        badge: tab.badge,\n      }));\n    } else {\n      return tabItems.map(tab => ({\n        id: tab.id,\n        label: tab.label,\n        active: tab.id === activeTab,\n        badge: tab.badge,\n      }));\n    }\n  }, [tableTabs, tabItems, activeTab, usingEnhancedTabs]);\n\n  // Create the table instance\n  const table = useReactTable({\n    data: activeData,\n    columns: activeColumns,\n    state: {\n      sorting,\n      columnVisibility,\n      globalFilter,\n      // Use either provided pagination or internal pagination state\n      pagination: activePagination ? {\n        pageIndex: activePagination.pageIndex,\n        pageSize: activePagination.pageSize,\n      } : internalPagination,\n    },\n    onSortingChange: setSorting,\n    onColumnVisibilityChange: setColumnVisibility,\n    onGlobalFilterChange: (value) => {\n      setGlobalFilter(String(value));\n      onSearchChange?.(String(value));\n    },\n    // Unified approach to handle pagination changes\n    onPaginationChange: (updater) => {\n      // Handle both function updater and direct value\n      const newPagination = typeof updater === 'function' \n        ? updater(activePagination ? { \n            pageIndex: activePagination.pageIndex, \n            pageSize: activePagination.pageSize \n          } : internalPagination) \n        : updater;\n      \n      if (activePagination) {\n        activePagination.onPageChange(newPagination.pageIndex);\n        if (activePagination.onPageSizeChange && newPagination.pageSize !== activePagination.pageSize) {\n          activePagination.onPageSizeChange(newPagination.pageSize);\n        }\n      } else {\n        setInternalPagination(newPagination);\n      }\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    // Always use pagination model for consistent behavior\n    getPaginationRowModel: getPaginationRowModel(),\n    // Indicate if using manual pagination (e.g., server-side)\n    manualPagination: !!activePagination,\n    // Pagination page count\n    pageCount: activePagination?.pageCount ?? Math.ceil(activeData.length / (activePagination?.pageSize || internalPagination.pageSize)),\n  });\n\n  // Handle tab changes\n  const handleTabChange = (tabId: string) => {\n    setActiveTab(tabId);\n    \n    // Reset pagination when switching tabs\n    setInternalPagination({\n      pageIndex: 0,\n      pageSize: internalPagination.pageSize,\n    });\n    \n    // Callback\n    onTabChange?.(tabId);\n  };\n\n  // Handle filter bar toggle\n  const handleFilterClick = () => {\n    setIsFilterBarVisible(!isFilterBarVisible);\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (name: string, value: any) => {\n    const newFilters = { ...activeFilters, [name]: value };\n    onFilterChange?.(newFilters);\n  };\n\n  // Handle filter removal\n  const handleFilterRemove = (name: string) => {\n    const newFilters = { ...activeFilters };\n    delete newFilters[name];\n    onFilterChange?.(newFilters);\n  };\n\n  // Detect RTL for line height adjustments\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Create lineHeightStyle object for proper text rendering\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n\n  // Calculate effective badge value (may depend on filtered data)\n  const effectiveBadge = useMemo(() => {\n    if (!showTotalBadge) return undefined;\n    if (badge !== undefined) return badge;\n    return table.getPrePaginationRowModel().rows.length;\n  }, [badge, table, showTotalBadge]);\n\n  // Helper to determine if there are active filters\n  const hasActiveFilters = Object.keys(activeFilters).length > 0;\n\n  // Get current pagination state (either from props or internal state)\n  const currentPagination = activePagination || internalPagination;\n\n  // Helper to render content based on state\n  const renderContent = () => {\n    if (state === 'error') {\n      return <TableContentCase type=\"error\" message={errorMessage} />;\n    }\n    \n    if (state === 'loading') {\n      return <TableContentCase type=\"loading\" />;\n    }\n    \n    if (state === 'notFound') {\n      return <TableContentCase type=\"notFound\" message={notFoundMessage} />;\n    }\n    \n    if (state === 'empty' || activeData.length === 0) {\n      if (emptyStateNode) {\n        return emptyStateNode;\n      }\n      return <TableContentCase type=\"empty\" message={emptyMessage} />;\n    }\n    \n    return (\n      <table className={styles.table}>\n        <thead className={styles.tableHead}>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableHeaderCell\n                  key={header.id}\n                  isSortable={header.column.getCanSort()}\n                  sortDirection={header.column.getIsSorted() as any}\n                  onSort={header.column.getToggleSortingHandler()}\n                  className={header.column.columnDef.meta?.headerClassName}\n                >\n                  {header.isPlaceholder ? null : (\n                    flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )\n                  )}\n                </TableHeaderCell>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row, rowIndex) => {\n            const isEvenRow = rowIndex % 2 === 0;\n            \n            return (\n              <tr\n                key={row.id}\n                className={clsx(\n                  styles.tableRow,\n                  onRowClick && styles.clickableRow\n                )}\n                onClick={() => onRowClick?.(row)}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell\n                    key={cell.id}\n                    isStriped={striped && !isEvenRow}\n                    isGridCell={gridCells}\n                    className={cell.column.columnDef.meta?.cellClassName}\n                    onClick={() => onCellClick?.(cell)}\n                  >\n                    {flexRender(\n                      cell.column.columnDef.cell,\n                      cell.getContext()\n                    )}\n                  </TableCell>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div \n      className={clsx(\n        styles.tableContainer,\n        striped && styles.striped,\n        gridCells && styles.gridCells,\n        className\n      )}\n    >\n      {showTabs && tabsForDisplay.length > 0 && (\n        <div className={styles.tabsContainer}>\n          <Tabs\n            defaultValue={activeTab}\n            onValueChange={handleTabChange}\n            value={activeTab}\n          >\n            <TabsList className={styles.tabsList}>\n              {tabsForDisplay.map(tab => (\n                <TabsTrigger \n                  key={tab.id} \n                  value={tab.id}\n                  badge={tab.badge}\n                  className={styles.tabTrigger}\n                >\n                  {tab.label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </Tabs>\n        </div>\n      )}\n      \n      {showHeader && (\n        <TableHeader\n          title={hasActiveFilters && activeTitle ? `Filtered ${activeTitle}` : activeTitle}\n          badge={effectiveBadge}\n          showSearch={showSearch}\n          showFilters={showFilters}\n          showExport={showExport}\n          searchQuery={searchQuery}\n          onSearchChange={onSearchChange}\n          onFilterClick={handleFilterClick}\n          onExport={onExport}\n          isFilterBarVisible={isFilterBarVisible}\n        />\n      )}\n      \n      {isFilterBarVisible && showFilters && Object.keys(filterOptions).length > 0 && (\n        <div className={styles.filterBar}>\n          <div className={styles.filterBarLabel} style={lineHeightStyle}>\n            {isRTL ? \"تصفية:\" : \"Filters:\"}\n          </div>\n          \n          <div className={styles.filterItems}>\n            {Object.keys(filterOptions).map((filterKey) => (\n              <FilterItem\n                key={filterKey}\n                name={filterKey}\n                label={filterOptions[filterKey].label}\n                value={activeFilters[filterKey]}\n                options={filterOptions[filterKey].options}\n                onChange={handleFilterChange}\n                removable={true}\n                onRemove={handleFilterRemove}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <div className={styles.tableContent}>\n        {renderContent()}\n      </div>\n      \n      {showPagination && state === 'normal' && activeData.length > 0 && (\n        <div className={styles.paginationContainer}>\n          <Pagination \n            total={table.getPrePaginationRowModel().rows.length}\n            current={currentPagination.pageIndex + 1}\n            pageSize={currentPagination.pageSize}\n            onChange={(page) => {\n              if (activePagination) {\n                activePagination.onPageChange(page - 1);\n              } else {\n                table.setPageIndex(page - 1);\n              }\n            }}\n            onPageSizeChange={(newPageSize) => {\n              if (activePagination && activePagination.onPageSizeChange) {\n                activePagination.onPageSizeChange(newPageSize);\n              } else {\n                table.setPageSize(newPageSize);\n              }\n            }}\n            pageSizeOptions={activePagination?.pageSizeOptions || [10, 20, 50, 100]}\n            showRowsInPage={true}\n            showCount={true}\n          />\n        </div>\n      )}\n      \n      {footerContent && (\n        <div className={styles.footerContent}>\n          {footerContent}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":["useState","useMemo","useEffect","useReactTable","getCoreRowModel","getSortedRowModel","getFilteredRowModel","getPaginationRowModel","jsx","TableContentCase","jsxs","styles","TableHeaderCell","flexRender","clsx","TableCell","Tabs","TabsList","TabsTrigger","TableHeader","FilterItem","Pagination"],"mappings":"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"}