{"version":3,"file":"Button.cjs.js","sources":["../../../src/components/Button/Button.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { IconLoader2 } from '@tabler/icons-react';\nimport styles from './Button.module.css';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'plain';\nexport type ButtonTone = 'default' | 'critical' | 'success' | 'neutral' | 'magic';\nexport type ButtonSize = 'large' | 'medium' | 'micro';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * Button variant that changes the visual appearance\n   * @default 'primary'\n   */\n  variant?: ButtonVariant;\n  \n  /**\n   * Button tone that applies different color treatments\n   * @default 'default'\n   */\n  tone?: ButtonTone;\n  \n  /**\n   * Button size\n   * @default 'medium'\n   */\n  size?: ButtonSize;\n  \n  /**\n   * Loading state, shows a spinner and disables the button\n   * @default false\n   */\n  loading?: boolean;\n  \n  /**\n   * Full width button (100% of container)\n   * @default false\n   */\n  fullWidth?: boolean;\n  \n  /**\n   * Icon to display before the button text\n   */\n  prefixIcon?: React.ReactNode;\n  \n  /**\n   * Icon to display after the button text\n   */\n  suffixIcon?: React.ReactNode;\n}\n\nexport const buttonVariants = ['primary', 'secondary', 'tertiary', 'plain'] as const;\nexport const buttonTones = ['default', 'critical', 'success', 'neutral', 'magic'] as const;\nexport const buttonSizes = ['large', 'medium', 'micro'] as const;\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(({\n  children,\n  variant = 'primary',\n  tone = 'default',\n  size = 'medium',\n  loading = false,\n  disabled = false,\n  fullWidth = false,\n  prefixIcon,\n  suffixIcon,\n  className = '',\n  ...props\n}, ref) => {\n  // Determine if this is an icon-only button (no text content)\n  const isIconOnly = !children && (prefixIcon || suffixIcon);\n  \n  // Apply specific icon positioning for icon-only buttons\n  const iconOnly = isIconOnly ? styles.iconOnly : '';\n  \n  // Detect RTL for line height adjustments\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Create lineHeightStyle object for proper text rendering\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n  \n  // Combine all classes for the button\n  const buttonClasses = clsx(\n    styles.button,\n    styles[`variant${variant.charAt(0).toUpperCase() + variant.slice(1)}`],\n    styles[`tone${tone.charAt(0).toUpperCase() + tone.slice(1)}`],\n    styles[`size${size.charAt(0).toUpperCase() + size.slice(1)}`],\n    fullWidth && styles.fullWidth,\n    loading && styles.loading,\n    iconOnly,\n    className\n  );\n  \n  // Handle content based on loading state\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <span className={styles.loadingWrapper}>\n          <IconLoader2 className={styles.spinner} />\n          {!isIconOnly && (\n            <span className={styles.loadingText} style={lineHeightStyle}>\n              {isRTL ? 'جارٍ التحميل...' : 'Loading...'}\n            </span>\n          )}\n        </span>\n      );\n    }\n    \n    return (\n      <>\n        {prefixIcon && <span className={styles.prefixIcon}>{prefixIcon}</span>}\n        {children && <span className={styles.label} style={lineHeightStyle}>{children}</span>}\n        {suffixIcon && <span className={styles.suffixIcon}>{suffixIcon}</span>}\n      </>\n    );\n  };\n  \n  return (\n    <button\n      ref={ref}\n      className={buttonClasses}\n      disabled={disabled || loading}\n      type={props.type || 'button'}\n      {...props}\n    >\n      {renderContent()}\n    </button>\n  );\n});\n\nButton.displayName = 'Button';\n"],"names":["forwardRef","styles","clsx","jsxs","jsx","Fragment"],"mappings":";;;;;;;AAmDO,MAAM,iBAAiB,CAAC,WAAW,aAAa,YAAY,OAAO;AACnE,MAAM,cAAc,CAAC,WAAW,YAAY,WAAW,WAAW,OAAO;AACzE,MAAM,cAAc,CAAC,SAAS,UAAU,OAAO;AAEzC,MAAA,SAASA,iBAA2C,CAAC;AAAA,EAChE;AAAA,EACA,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ,GAAG;AACL,GAAG,QAAQ;AAEH,QAAA,aAAa,CAAC,aAAa,cAAc;AAGzC,QAAA,WAAW,aAAaC,cAAA,QAAO,WAAW;AAGhD,QAAM,QAAQ,SAAS,QAAQ,SAAS,SAAS,gBAAgB,QAAQ;AAGzE,QAAM,kBAAkB;AAAA,IACtB,YAAY,QAAQ,qCAAqC;AAAA,EAC3D;AAGA,QAAM,gBAAgBC,KAAA;AAAA,IACpBD,cAAAA,QAAO;AAAA,IACPA,cAAAA,QAAO,UAAU,QAAQ,OAAO,CAAC,EAAE,YAAY,IAAI,QAAQ,MAAM,CAAC,CAAC,EAAE;AAAA,IACrEA,cAAAA,QAAO,OAAO,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EAAE;AAAA,IAC5DA,cAAAA,QAAO,OAAO,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EAAE;AAAA,IAC5D,aAAaA,cAAO,QAAA;AAAA,IACpB,WAAWA,cAAO,QAAA;AAAA,IAClB;AAAA,IACA;AAAA,EACF;AAGA,QAAM,gBAAgB,MAAM;AAC1B,QAAI,SAAS;AACX,aACGE,2BAAAA,kBAAAA,KAAA,QAAA,EAAK,WAAWF,cAAA,QAAO,gBACtB,UAAA;AAAA,QAACG,2BAAAA,kBAAAA,IAAA,aAAA,EAAY,WAAWH,cAAA,QAAO,QAAS,CAAA;AAAA,QACvC,CAAC,cACAG,2BAAA,kBAAA,IAAC,QAAK,EAAA,WAAWH,cAAO,QAAA,aAAa,OAAO,iBACzC,UAAQ,QAAA,oBAAoB,aAC/B,CAAA;AAAA,MAAA,GAEJ;AAAA,IAAA;AAIJ,WAEKE,2BAAA,kBAAA,KAAAE,uCAAA,EAAA,UAAA;AAAA,MAAA,cAAeD,2BAAAA,kBAAAA,IAAA,QAAA,EAAK,WAAWH,cAAAA,QAAO,YAAa,UAAW,YAAA;AAAA,MAC9D,6DAAa,QAAK,EAAA,WAAWA,sBAAO,OAAO,OAAO,iBAAkB,UAAS;AAAA,MAC7E,cAAeG,2BAAAA,kBAAAA,IAAA,QAAA,EAAK,WAAWH,cAAAA,QAAO,YAAa,UAAW,WAAA,CAAA;AAAA,IAAA,GACjE;AAAA,EAEJ;AAGE,SAAAG,2BAAA,kBAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA,WAAW;AAAA,MACX,UAAU,YAAY;AAAA,MACtB,MAAM,MAAM,QAAQ;AAAA,MACnB,GAAG;AAAA,MAEH,UAAc,cAAA;AAAA,IAAA;AAAA,EACjB;AAEJ,CAAC;AAED,OAAO,cAAc;;;;;"}