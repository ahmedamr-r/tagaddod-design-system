{"version":3,"file":"Avatar.es.js","sources":["../../../src/components/Avatar/Avatar.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport * as RadixAvatar from '@radix-ui/react-avatar';\nimport { IconUser } from '@tabler/icons-react';\nimport clsx from 'clsx';\nimport styles from './Avatar.module.css';\n\nexport type AvatarType = 'image' | 'initial' | 'icon';\nexport type AvatarSize = 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface AvatarProps {\n  /**\n   * Avatar type: image (for photos), initial (for text), or icon (default user icon)\n   * @default 'icon'\n   */\n  type?: AvatarType;\n\n  /**\n   * Avatar size\n   * @default 'md'\n   */\n  size?: AvatarSize;\n\n  /**\n   * Source URL for the image (required when type is 'image')\n   */\n  src?: string;\n\n  /**\n   * Alt text for the image (used when type is 'image')\n   */\n  alt?: string;\n\n  /**\n   * Initial to display (required when type is 'initial')\n   * Will use the first letter if a full name is provided\n   */\n  initial?: string;\n\n  /**\n   * Optional className for additional styling\n   */\n  className?: string;\n\n  /**\n   * Delay in milliseconds before showing the fallback\n   * @default 600\n   */\n  delayMs?: number;\n}\n\nexport const avatarTypes = ['image', 'initial', 'icon'] as const;\nexport const avatarSizes = ['sm', 'md', 'lg', 'xl'] as const;\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>(({\n  type = 'icon',\n  size = 'md',\n  src,\n  alt,\n  initial,\n  className,\n  delayMs = 600,\n}, ref) => {\n  // Detect RTL for line height adjustments\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  // Create lineHeightStyle object for proper text rendering\n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n\n  // Process initial to get first letter if a full name is given\n  const displayInitial = initial ? initial.trim().charAt(0).toUpperCase() : '';\n\n  // Combined class names\n  const avatarClasses = clsx(\n    styles.avatar,\n    styles[`size${size.charAt(0).toUpperCase() + size.slice(1)}`],\n    className\n  );\n\n  return (\n    <RadixAvatar.Root className={avatarClasses} ref={ref}>\n      {type === 'image' && src && (\n        <RadixAvatar.Image \n          className={styles.image} \n          src={src} \n          alt={alt || 'User avatar'} \n          onLoadingStatusChange={() => {\n            // Optional handling of loading status\n          }}\n        />\n      )}\n      <RadixAvatar.Fallback \n        className={styles.fallback} \n        delayMs={type === 'image' ? delayMs : 0}\n      >\n        {type === 'initial' && displayInitial ? (\n          <span className={styles.initial} style={lineHeightStyle}>\n            {displayInitial}\n          </span>\n        ) : (\n          <IconUser className={styles.icon} />\n        )}\n      </RadixAvatar.Fallback>\n    </RadixAvatar.Root>\n  );\n});\n\nAvatar.displayName = 'Avatar';\n"],"names":["RadixAvatar.Root","jsx","RadixAvatar.Image","RadixAvatar.Fallback"],"mappings":";;;;;;AAkDO,MAAM,cAAc,CAAC,SAAS,WAAW,MAAM;AAC/C,MAAM,cAAc,CAAC,MAAM,MAAM,MAAM,IAAI;AAErC,MAAA,SAAS,WAAwC,CAAC;AAAA,EAC7D,OAAO;AAAA,EACP,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AACZ,GAAG,QAAQ;AAET,QAAM,QAAQ,SAAS,QAAQ,SAAS,SAAS,gBAAgB,QAAQ;AAGzE,QAAM,kBAAkB;AAAA,IACtB,YAAY,QAAQ,qCAAqC;AAAA,EAC3D;AAGM,QAAA,iBAAiB,UAAU,QAAQ,KAAA,EAAO,OAAO,CAAC,EAAE,YAAA,IAAgB;AAG1E,QAAM,gBAAgB;AAAA,IACpB,OAAO;AAAA,IACP,OAAO,OAAO,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EAAE;AAAA,IAC5D;AAAA,EACF;AAEA,gDACGA,MAAA,EAAiB,WAAW,eAAe,KACzC,UAAA;AAAA,IAAA,SAAS,WAAW,OACnBC,kCAAA;AAAA,MAACC;AAAAA,MAAA;AAAA,QACC,WAAW,OAAO;AAAA,QAClB;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,uBAAuB,MAAM;AAAA,QAAA;AAAA,MAE7B;AAAA,IACF;AAAA,IAEFD,kCAAA;AAAA,MAACE;AAAAA,MAAA;AAAA,QACC,WAAW,OAAO;AAAA,QAClB,SAAS,SAAS,UAAU,UAAU;AAAA,QAErC,mBAAS,aAAa,iBACpBF,kCAAA,IAAA,QAAA,EAAK,WAAW,OAAO,SAAS,OAAO,iBACrC,0BACH,IAEAA,kCAAAA,IAAC,UAAS,EAAA,WAAW,OAAO,KAAM,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEtC,GACF;AAEJ,CAAC;AAED,OAAO,cAAc;"}