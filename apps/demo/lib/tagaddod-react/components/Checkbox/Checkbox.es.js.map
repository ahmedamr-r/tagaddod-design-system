{"version":3,"file":"Checkbox.es.js","sources":["../../../src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport * as RadixCheckbox from '@radix-ui/react-checkbox';\nimport { IconCheck, IconMinus, IconAlertCircle } from '@tabler/icons-react';\nimport clsx from 'clsx';\nimport styles from './Checkbox.module.css';\n\nexport interface CheckboxProps {\n  /**\n   * The label displayed next to the checkbox\n   */\n  label?: string;\n  \n  /**\n   * The state of the checkbox\n   * @default false\n   */\n  checked?: boolean | 'indeterminate';\n  \n  /**\n   * Default state of the checkbox\n   * @default false\n   */\n  defaultChecked?: boolean | 'indeterminate';\n  \n  /**\n   * Help text displayed below the checkbox\n   */\n  helpText?: string;\n  \n  /**\n   * Error message to display\n   */\n  error?: string;\n  \n  /**\n   * Whether the checkbox is disabled\n   * @default false\n   */\n  disabled?: boolean;\n  \n  /**\n   * Hide the label but keep it accessible for screen readers\n   * @default false\n   */\n  hideLabel?: boolean;\n  \n  /**\n   * Callback when the state changes\n   */\n  onCheckedChange?: (checked: boolean | 'indeterminate') => void;\n  \n  /**\n   * ID for the checkbox\n   */\n  id?: string;\n  \n  /**\n   * Name for the checkbox\n   */\n  name?: string;\n  \n  /**\n   * Required state\n   * @default false\n   */\n  required?: boolean;\n  \n  /**\n   * Additional class names\n   */\n  className?: string;\n}\n\nexport const Checkbox = forwardRef<HTMLButtonElement, CheckboxProps>(\n  ({\n    label,\n    checked,\n    defaultChecked,\n    helpText,\n    error,\n    disabled = false,\n    hideLabel = false,\n    onCheckedChange,\n    id,\n    name,\n    required = false,\n    className,\n  }, ref) => {\n    // Generate a unique ID if none provided\n    const checkboxId = id || `checkbox-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Detect RTL for line height adjustments\n    const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n    \n    // Create lineHeightStyle object for proper text rendering\n    const lineHeightStyle = {\n      lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n    };\n    \n    return (\n      <div \n        className={clsx(\n          styles.container, \n          error && styles.error,\n          disabled && styles.disabled,\n          className\n        )}\n      >\n        <div className={styles.checkboxWrapper}>\n          <RadixCheckbox.Root\n            id={checkboxId}\n            ref={ref}\n            name={name}\n            checked={checked}\n            defaultChecked={defaultChecked}\n            onCheckedChange={onCheckedChange}\n            disabled={disabled}\n            required={required}\n            className={clsx(\n              styles.checkbox,\n              error && styles.error\n            )}\n          >\n            <RadixCheckbox.Indicator className={styles.indicator}>\n              {checked === 'indeterminate' ? (\n                <IconMinus size={14} className={styles.icon} />\n              ) : (\n                <IconCheck size={14} className={styles.icon} />\n              )}\n            </RadixCheckbox.Indicator>\n          </RadixCheckbox.Root>\n          \n          {label && (\n            <label\n              htmlFor={checkboxId}\n              className={clsx(\n                styles.label,\n                hideLabel && styles.srOnly\n              )}\n              style={lineHeightStyle}\n            >\n              {label}\n              {required && <span className={styles.required}>*</span>}\n            </label>\n          )}\n        </div>\n        \n        {error ? (\n          <div className={styles.errorMessage} style={lineHeightStyle}>\n            <IconAlertCircle size={20} className={styles.errorIcon} />\n            {error}\n          </div>\n        ) : helpText ? (\n          <div className={styles.helpText} style={lineHeightStyle}>\n            {helpText}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n);\n\nCheckbox.displayName = 'Checkbox';\n"],"names":["jsxs","jsx","RadixCheckbox.Root","RadixCheckbox.Indicator"],"mappings":";;;;;;;;AAyEO,MAAM,WAAW;AAAA,EACtB,CAAC;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,KACC,QAAQ;AAET,UAAM,aAAa,MAAM,YAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAG5E,UAAM,QAAQ,SAAS,QAAQ,SAAS,SAAS,gBAAgB,QAAQ;AAGzE,UAAM,kBAAkB;AAAA,MACtB,YAAY,QAAQ,qCAAqC;AAAA,IAC3D;AAGE,WAAAA,kCAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,UACT,OAAO;AAAA,UACP,SAAS,OAAO;AAAA,UAChB,YAAY,OAAO;AAAA,UACnB;AAAA,QACF;AAAA,QAEA,UAAA;AAAA,UAACA,kCAAA,KAAA,OAAA,EAAI,WAAW,OAAO,iBACrB,UAAA;AAAA,YAAAC,kCAAA;AAAA,cAACC;AAAAA,cAAA;AAAA,gBACC,IAAI;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,WAAW;AAAA,kBACT,OAAO;AAAA,kBACP,SAAS,OAAO;AAAA,gBAClB;AAAA,gBAEA,UAAAD,kCAAAA,IAACE,mBAAA,EAAwB,WAAW,OAAO,WACxC,UAAA,YAAY,kBACXF,sCAAC,WAAU,EAAA,MAAM,IAAI,WAAW,OAAO,MAAM,IAE5CA,kCAAA,IAAA,WAAA,EAAU,MAAM,IAAI,WAAW,OAAO,KAAM,CAAA,EAEjD,CAAA;AAAA,cAAA;AAAA,YACF;AAAA,YAEC,SACCD,kCAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,SAAS;AAAA,gBACT,WAAW;AAAA,kBACT,OAAO;AAAA,kBACP,aAAa,OAAO;AAAA,gBACtB;AAAA,gBACA,OAAO;AAAA,gBAEN,UAAA;AAAA,kBAAA;AAAA,kBACA,YAAaC,kCAAAA,IAAA,QAAA,EAAK,WAAW,OAAO,UAAU,UAAC,IAAA,CAAA;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAClD,GAEJ;AAAA,UAEC,QACED,kCAAAA,KAAA,OAAA,EAAI,WAAW,OAAO,cAAc,OAAO,iBAC1C,UAAA;AAAA,YAAAC,kCAAA,IAAC,iBAAgB,EAAA,MAAM,IAAI,WAAW,OAAO,WAAW;AAAA,YACvD;AAAA,UACH,EAAA,CAAA,IACE,WACFA,sCAAC,OAAI,EAAA,WAAW,OAAO,UAAU,OAAO,iBACrC,UAAA,SACH,CAAA,IACE;AAAA,QAAA;AAAA,MAAA;AAAA,IACN;AAAA,EAAA;AAGN;AAEA,SAAS,cAAc;"}