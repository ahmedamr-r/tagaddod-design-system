import { GitHubClient } from './client';
import { TokenSet } from '../../types/token';

const TOKENS_SYNC_BRANCH_PREFIX = 'design-tokens-sync/';
const PRIMITIVES_PATH = 'packages/tokens/src/primitives';
const SEMANTICS_PATH = 'packages/tokens/src/semantics';
const THEMES_PATH = 'packages/themes/src';

export class TokenSync {
  private client: GitHubClient;

  constructor(client: GitHubClient) {
    this.client = client;
  }

  async listTokenBranches() {
    return this.client.listBranches(TOKENS_SYNC_BRANCH_PREFIX);
  }

  async importFromBranch(branchName: string): Promise<TokenSet> {
    const tokenSet: TokenSet = {
      primitives: {},
      semantics: {},
      themes: {},
    };

    try {
      // Import primitives
      const primitivesFiles = await this.client.getFileContent(PRIMITIVES_PATH, branchName);
      if (Array.isArray(primitivesFiles)) {
        for (const file of primitivesFiles) {
          if (file.name.endsWith('.json')) {
            const content = await this.client.getFileContent(file.path, branchName);
            const decoded = Buffer.from(content.content, 'base64').toString('utf-8');
            const tokens = JSON.parse(decoded);
            Object.assign(tokenSet.primitives, tokens);
          }
        }
      }

      // Import semantics
      const semanticsFiles = await this.client.getFileContent(SEMANTICS_PATH, branchName);
      if (Array.isArray(semanticsFiles)) {
        for (const file of semanticsFiles) {
          if (file.name.endsWith('.json')) {
            const content = await this.client.getFileContent(file.path, branchName);
            const decoded = Buffer.from(content.content, 'base64').toString('utf-8');
            const tokens = JSON.parse(decoded);
            Object.assign(tokenSet.semantics, tokens);
          }
        }
      }

      // Import themes
      const themesFiles = await this.client.getFileContent(THEMES_PATH, branchName);
      if (Array.isArray(themesFiles)) {
        for (const file of themesFiles) {
          if (file.name.endsWith('.json')) {
            const themeName = file.name.replace('.json', '');
            const content = await this.client.getFileContent(file.path, branchName);
            const decoded = Buffer.from(content.content, 'base64').toString('utf-8');
            const tokens = JSON.parse(decoded);
            if (!tokenSet.themes) tokenSet.themes = {};
            tokenSet.themes[themeName] = tokens;
          }
        }
      }
    } catch (error) {
      console.error('Error importing tokens from branch:', error);
      throw error;
    }

    return tokenSet;
  }

  async createPullRequest(tokenSet: TokenSet, description: string = '') {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const branchName = `token-update-${timestamp}`;

    try {
      // Create a new branch
      await this.client.createBranch(branchName);

      // Prepare files to commit
      const files = [];

      // Add primitives files
      Object.entries(tokenSet.primitives).forEach(([category, tokens]) => {
        files.push({
          path: `${PRIMITIVES_PATH}/${category}.json`,
          content: JSON.stringify(tokens, null, 2),
        });
      });

      // Add semantics files
      Object.entries(tokenSet.semantics).forEach(([category, tokens]) => {
        files.push({
          path: `${SEMANTICS_PATH}/${category}.json`,
          content: JSON.stringify(tokens, null, 2),
        });
      });

      // Add theme files
      if (tokenSet.themes) {
        Object.entries(tokenSet.themes).forEach(([themeName, tokens]) => {
          files.push({
            path: `${THEMES_PATH}/${themeName}.json`,
            content: JSON.stringify(tokens, null, 2),
          });
        });
      }

      // Create a changeset file
      const changesetContent = `---
"@tagaddod/tokens": patch
"@tagaddod/themes": patch
---

Updated design tokens via Token Admin

${description}
`;

      files.push({
        path: `.changeset/${timestamp}.md`,
        content: changesetContent,
      });

      // Commit the files
      await this.client.createCommit(
        branchName,
        files,
        `chore: update design tokens - ${timestamp}`
      );

      // Create a pull request
      const pr = await this.client.createPullRequest({
        title: `chore: update design tokens - ${timestamp}`,
        body: `## Token Updates

This PR was automatically generated by the Token Admin UI.

**Changes:**
${description || 'Design token updates'}

**Validation:**
- [ ] All tokens pass W3C schema validation
- [ ] Color contrast meets WCAG AA requirements
- [ ] No breaking changes to existing tokens
- [ ] Visual regression tests pass

Generated on: ${new Date().toISOString()}
`,
        head: branchName,
        base: 'main',
      });

      return pr;
    } catch (error) {
      console.error('Error creating pull request:', error);
      throw error;
    }
  }
}
