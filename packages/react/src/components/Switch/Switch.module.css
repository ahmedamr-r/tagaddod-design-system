/* Switch.module.css */
.root {
  position: relative;
  display: inline-flex;
  align-items: center;
  border-radius: var(--t-border-radius-full);
  cursor: pointer;
  border: none;
  padding: 2px;
  -webkit-tap-highlight-color: transparent;
  
  /* Background transition - exactly matching Figma specs */
  transition: background-color 100ms cubic-bezier(0.4, 0, 0.2, 1); /* ease-in-out with 100ms */
}

/* Size variants based on Figma specs */
.sizeSm {
  width: var(--t-size-900); /* 36px as in Figma */
  height: var(--t-size-500); /* 20px as in Figma */
}

.sizeMd {
  width: 2.75rem; /* 44px as in Figma */
  height: var(--t-size-600); /* 24px as in Figma */
}

/* States */
.root {
  background-color: var( --t-color-surface-secondary); /* Default color */
}

.root:hover:not(.disabled) {
  background-color: var(--t-color-surface-secondary-hover); /* Hover state */
  /* Linear hover transition with 200ms - exactly as in Figma */
  transition: background-color 200ms linear;
}

/* Pressed state */
.pressed {
  background-color: var(--t-color-fill-brand); /* Pressed state */
}

.pressed:hover:not(.disabled) {
  background-color: var(--t-color-fill-brand); /* Pressed hover state */
  /* Linear hover transition with 200ms - exactly as in Figma */
  transition: background-color 200ms linear;
}

.disabled {
  background-color: var(--t-color-surface-disabled); /* Disabled state */
  cursor: not-allowed;
}

.pressed.disabled {
  background-color: var( --t-color-fill-brand);
  opacity: 0.5; /* Pressed disabled state */
}

/* Thumb (the circle that moves) */
.thumb {
  position: absolute;
  top: 2px;
  left: 2px;
  display: block;
  background-color: var(--t-color-fill-primary); /* White thumb */
  border-radius: var(--t-border-radius-full);
  box-shadow: var(--t-shadow-popover);
  will-change: transform;
  transform: translateX(0); /* Default position (unchecked) */
  
  /* Smooth transform transition - optimized for performance */
  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1),
              scale 100ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Hover state for thumb */
.root:hover:not(.disabled) .thumb {
  /* Enhanced shadow on hover */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15), var(--t-shadow-popover);
  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1),
              scale 100ms cubic-bezier(0.4, 0, 0.2, 1),
              box-shadow 200ms linear;
}

/* Active press state - micro-interaction */
.root:active:not(.disabled) .thumb {
  scale: 1.1;
  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1),
              scale 50ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Disabled state for thumb */
.disabled .thumb {
  background-color: var(--t-color-fill-disabled);
  box-shadow: none;
}

/* Disabled pressed state - keep thumb white */
.disabled.pressed .thumb {
  background-color: var(--t-color-fill-primary);
}

/* Small thumb */
.thumbSm {
  width: 16px;
  height: 16px;
}

/* Medium thumb */
.thumbMd {
  width: var(--t-size-500);
  height: var(--t-size-500);
}

/* Transform-based positioning using Radix data attributes */
/* Default position (unchecked) - already set in main .thumb selector above */

/* Checked state positioning */
.root[data-state="checked"] .thumb {
  transform: translateX(var(--thumb-translate-distance));
}

/* Smooth state change animation - brief scale on toggle */
.root[data-state="checked"] .thumb,
.root[data-state="unchecked"] .thumb {
  animation: thumbToggle 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes thumbToggle {
  0% { scale: 1; }
  50% { scale: 1.05; }
  100% { scale: 1; }
}

/* Size-specific transform distances */
.sizeSm .thumb {
  --thumb-translate-distance: 16px; /* 36px total width - 16px thumb - 4px padding */
}

.sizeMd .thumb {
  --thumb-translate-distance: var(--t-size-500); /* 44px total width - 20px thumb - 4px padding */
}

/* RTL support - reverse the transform direction */
html[dir="rtl"] .root[data-state="checked"] .thumb {
  transform: translateX(calc(-1 * var(--thumb-translate-distance)));
}

/* Accessible focus styles */
.root:focus-visible {
  outline: var(--t-border-width-50) solid var(--t-color-blue-1200);
  outline-offset: var(--t-size-100);
}
