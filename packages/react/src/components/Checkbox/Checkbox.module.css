/* Checkbox Component Styles */

.container {
  display: flex;
  flex-direction: column;
  width: 100%;
  gap: var(--t-space-50);
  /* Align the entire component contents to the start of the container */
  align-items: flex-start;
}

/* For RTL, align everything to the end (right side) */
:global([dir="rtl"]) .container {
  align-items: flex-start;
}

.checkboxWrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: var(--t-space-200);
}

/* For RTL mode, we keep the same DOM order but visually reverse it */
:global([dir="rtl"]) .checkboxWrapper {
  flex-direction: row;
}

.checkbox {
  all: unset;
  width: var(--t-size-500);
  height: var(--t-size-500);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--t-border-radius-100);
  border: var(--t-border-width-25) solid var(--t-color-border-primary);
  background-color: var(--t-color-surface-primary);
  cursor: pointer;
  transition: all var(--t-duration-fast) var(--t-easing-in-out);
  flex-shrink: 0;
}

.checkbox:hover {
  border-color: var(--t-color-border-hover);
  background-color: var(--t-color-surface-hover);
}

.checkbox:focus-visible {
  outline: 2px solid var(--t-color-fill-brand);
  outline-offset: 2px;
}

.checkbox[data-state="checked"] {
  background-color: var(--t-color-fill-brand);
  border-color: var(--t-color-fill-brand);
}

.checkbox[data-state="checked"]:hover {
  background-color: var(--t-color-fill-brand-hover);
  border-color: var(--t-color-fill-brand-hover);
}

.checkbox[data-state="indeterminate"] {
  background-color: var(--t-color-fill-brand);
  border-color: var(--t-color-fill-brand);
}

.checkbox[data-state="indeterminate"]:hover {
  background-color: var(--t-color-fill-brand-hover);
  border-color: var(--t-color-fill-brand-hover);
}

.checkbox[data-disabled] {
  opacity: 1;
  cursor: not-allowed;
  background-color: var(--t-color-surface-disabled);
border: 0;
}

.checkbox[data-disabled]:hover {
  background-color: var(--t-color-surface-disabled);
  /* border-color: var(--t-color-border-disabled); */
}

.indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  color: var(--t-color-icon-on-fill);
}
.indicator svg {
  stroke-width: 3;
}

.label {
font: var(--t-typography-body-sm-default);
  color: var(--t-color-text-primary);
  position: relative;
  line-height: 1.5;
}

/* Line height trim for label */
.label::before,
.label::after {
  content: '';
  display: block;
  height: 0;
}

/* English font adjustment (smaller trim) */
.label::before {
  margin-top: -0.15em;
}

.label::after {
  margin-bottom: -0.15em;
}

/* Arabic font adjustment (larger trim) */
:global([dir="rtl"]) .label::before {
  margin-top: -0.25em;
}

:global([dir="rtl"]) .label::after {
  margin-bottom: -0.25em;
}

.required {
  color: var(--t-color-fill-critical);
  margin-inline-start: var(--t-space-50);
}

.disabled .label {
  color: var(--t-color-text-disabled);
  cursor: not-allowed;
}

.srOnly {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.helpText {
  font: var(--t-typography-body-sm-default);
  color: var(--t-color-text-secondary);
  padding: 0;
  position: relative;
  line-height: 1.5;
}

/* Line height trim for help text */
.helpText::before,
.helpText::after {
  content: '';
  display: block;
  height: 0;
}

/* English font adjustment (smaller trim) */
.helpText::before {
  margin-top: -0.15em;
}

.helpText::after {
  margin-bottom: -0.15em;
}

/* Arabic font adjustment (larger trim) */
:global([dir="rtl"]) .helpText::before {
  margin-top: -0.25em;
}

:global([dir="rtl"]) .helpText::after {
  margin-bottom: -0.25em;
}

/* In LTR, indent the helpText from the left */
:global([dir="ltr"]) .helpText {
  padding-left: calc(var(--t-size-400) + var(--t-space-200));
}

/* In RTL, indent the helpText from the right, exactly 24px as specified in Figma */
:global([dir="rtl"]) .helpText {
  padding-right: var(--t-space-600);
}

.errorMessage {
  display: flex;
  align-items: center;
  gap: var(--t-space-100);
  font: var(--t-typography-body-sm-default);
  color: var(--t-color-text-critical);
  padding: 0;
  position: relative;
  line-height: 1.5;
}

/* Line height trim for error message */
.errorMessage::before,
.errorMessage::after {
  content: '';
  display: block;
  height: 0;
}

/* English font adjustment (smaller trim) */
.errorMessage::before {
  margin-top: -0.15em;
}

.errorMessage::after {
  margin-bottom: -0.15em;
}

/* Arabic font adjustment (larger trim) */
:global([dir="rtl"]) .errorMessage::before {
  margin-top: -0.25em;
}

:global([dir="rtl"]) .errorMessage::after {
  margin-bottom: -0.25em;
}

/* In LTR mode, indent and set normal direction */
:global([dir="ltr"]) .errorMessage {
  padding-left: calc(var(--t-size-400) + var(--t-space-200));
  flex-direction: row;
}

/* In RTL mode, indent from right and reverse icon order */
:global([dir="rtl"]) .errorMessage {
  padding-right: var(--t-space-600);
  flex-direction: row;
}

.errorIcon {
  color: var(--t-color-icon-critical);
}

.error .checkbox {
  border-color: var(--t-color-border-critical);
}

.error .checkbox:hover {
  border-color: var(--t-color-border-critical-hover);
    background-color: var(--t-color-fill-critical-secondary);

}

.error .checkbox[data-state="checked"],
.error .checkbox[data-state="indeterminate"] {
  background-color: var(--t-color-fill-critical);
  border-color: var(--t-color-fill-critical);
}

.error .checkbox[data-state="checked"]:hover,
.error .checkbox[data-state="indeterminate"]:hover {
  background-color: var(--t-color-fill-critical-hover);
  border-color: var(--t-color-fill-critical-hover);
}

.icon {
  display: block;
}

