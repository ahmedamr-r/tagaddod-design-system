/* Toast Viewport Positioning */
.viewport {
  position: fixed;
  display: flex;
  flex-direction: column;
  padding: var(--t-space-400, 20px);
  gap: var(--t-space-200, 8px);
  width: 360px;
  max-width: 100vw;
  margin: 0;
  list-style: none;
  z-index: 2147483647;
  outline: none;
  --viewport-padding: 20px;
}

/* Viewport Positions */
.viewport-top-left {
  top: 0 !important;
  left: 0 !important;
  right: auto !important;
  bottom: auto !important;
}

.viewport-top-right {
  top: 0 !important;
  right: 0 !important;
  left: auto !important;
  bottom: auto !important;
}

.viewport-bottom-left {
  bottom: 0 !important;
  left: 0 !important;
  right: auto !important;
  top: auto !important;
}

.viewport-bottom-right {
  bottom: 0 !important;
  right: 0 !important;
  left: auto !important;
  top: auto !important;
}

/* Toast Root */
.root {
  /* Height constraints using design tokens */
  min-height: 3rem; /* 48px equivalent */
  max-height: 4rem; /* 64px equivalent */
  
  /* Base styling matching Figma */
  display: flex;
  align-items: center;
  background-color: var(--color-bg-surface, #ffffff);
  border-radius: var(--border-radius-200, 8px);
  padding: var(--space-300, 12px);
  box-shadow: 0px 8px 16px -4px rgba(26, 26, 26, 0.22);
  width: 100%;
  position: relative;
  
  /* Animation */
  animation-duration: 200ms;
  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
  will-change: transform, opacity;
}

/* Toast type variants - background colors matching Figma */
.success {
  background-color: var(--color-bg-fill-success, #00ae61);
}

.error {
  background-color: var(--color-bg-fill-critical, #d51e25);
}

.default {
  background-color: var(--color-bg-surface, #ffffff);
}

/* Content layout */
.content {
  display: flex;
  align-items: center;
  gap: var(--space-300, 12px);
  width: 100%;
  min-height: 0;
}

/* Icon styling */
.icon {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  color: var(--color-icon, #16161d);
}

/* Icon with background container */
.iconWithBackground {
  background-color: var(--color-bg, #f9f9fa);
  border-radius: var(--border-radius-100, 4px);
  padding: var(--space-300, 12px);
  width: 44px;
  height: 44px;
}

/* Icon background for success and error types */
.success .iconWithBackground,
.error .iconWithBackground {
  background-color: var(--color-overlay-light-20, #f7f7f8);
}

/* Icon without background - smaller size */
.icon:not(.iconWithBackground) {
  width: 20px;
  height: 20px;
}

/* Icon colors for types when no background */
.success .icon:not(.iconWithBackground) {
  color: var(--color-text-on-bg-fill, #ffffff);
}

.error .icon:not(.iconWithBackground) {
  color: var(--color-text-on-bg-fill, #ffffff);
}

.default .icon:not(.iconWithBackground) {
  color: var(--color-icon, #16161d);
}

/* Text content */
.text {
  flex: 1;
  min-width: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: var(--t-space-050, 2px);
}

/* Title styling - body-md-medium equivalent */
.title {
  font-family: var(--t-font-family-primary);
  font-size: 16px; /* body-md size */
  font-weight: 500; /* medium weight */
  line-height: 1.5;
  margin: 0;
  
  /* Text overflow handling */
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Title colors based on type */
.default .title {
  color: var(--color-text, #16161d);
}

.success .title,
.error .title {
  color: var(--color-text-on-bg-fill, #ffffff);
}

/* Description styling - body-sm-default equivalent */
.description {
  font-family: var(--t-font-family-primary);
  font-size: 14px; /* body-sm size */
  font-weight: 400; /* default/regular weight */
  line-height: 1.5;
  margin: 0;
  
  /* Multi-line text overflow handling */
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

/* Description colors based on type */
.default .description {
  color: var(--color-text-secondary, #7d8096);
}

.success .description,
.error .description {
  color: var(--color-text-on-bg-fill, #ffffff);
}

/* Close button */
.close {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  width: 20px;
  height: 20px;
  border: none;
  background: none;
  cursor: pointer;
  border-radius: var(--border-radius-050, 2px);
  transition: all var(--t-duration-base) var(--t-easing-in-out);
}

/* Force the SVG icon to be 20px */
.close svg {
  width: 20px !important;
  height: 20px !important;
  stroke-width: 1.5;
}

/* Close button colors based on type */
.default .close {
  color: var(--color-text-secondary, #7d8096);
}

.success .close,
.error .close {
  color: var(--color-text-on-bg-fill, #ffffff);
}

.close:hover {
  opacity: 0.8;
}

.close:focus {
  outline: 2px solid var(--t-color-border-focus);
  outline-offset: 1px;
}

/* Line height trim for English text */
.title::before,
.title::after,
.description::before,
.description::after {
  content: '';
  display: block;
  height: 0;
}

.title::before,
.description::before {
  margin-top: -0.15em;
}

.title::after,
.description::after {
  margin-bottom: -0.15em;
}

/* Arabic text adjustment (larger trim) */
:global([dir="rtl"]) .title::before,
:global([dir="rtl"]) .description::before {
  margin-top: -0.25em;
}

:global([dir="rtl"]) .title::after,
:global([dir="rtl"]) .description::after {
  margin-bottom: -0.25em;
}

/* RTL adjustments */
:global([dir="rtl"]) .title,
:global([dir="rtl"]) .description {
  font-family: var(--t-font-family-arabic, var(--t-font-family-primary));
  text-align: right;
}

/* RTL Viewport positions */
:global([dir="rtl"]) .viewport-top-left {
  top: 0;
  right: 0;
  left: auto;
}

:global([dir="rtl"]) .viewport-top-right {
  top: 0;
  left: 0;
  right: auto;
}

:global([dir="rtl"]) .viewport-bottom-left {
  bottom: 0;
  right: 0;
  left: auto;
}

:global([dir="rtl"]) .viewport-bottom-right {
  bottom: 0;
  left: 0;
  right: auto;
}

/* Toast animations based on position */
.root[data-state="open"] {
  animation-name: slideIn;
}

.root[data-state="closed"] {
  animation-name: slideOut;
}

.root[data-swipe="move"] {
  transform: translateX(var(--radix-toast-swipe-move-x));
}

.root[data-swipe="cancel"] {
  transform: translateX(0);
  transition: transform 200ms ease-out;
}

.root[data-swipe="end"] {
  animation: swipeOut 100ms ease-out;
}

/* Top position animations */
.viewport-top-left .root[data-state="open"],
.viewport-top-right .root[data-state="open"] {
  animation-name: slideInFromTop;
}

.viewport-top-left .root[data-state="closed"],
.viewport-top-right .root[data-state="closed"] {
  animation-name: slideOutToTop;
}

/* Bottom position animations */
.viewport-bottom-left .root[data-state="open"],
.viewport-bottom-right .root[data-state="open"] {
  animation-name: slideInFromBottom;
}

.viewport-bottom-left .root[data-state="closed"],
.viewport-bottom-right .root[data-state="closed"] {
  animation-name: slideOutToBottom;
}

/* Keyframe animations */
@keyframes slideIn {
  from {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
  to {
    transform: translateX(0);
  }
}

@keyframes slideOut {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
}

@keyframes slideInFromTop {
  from {
    transform: translateY(calc(-100% - var(--viewport-padding)));
  }
  to {
    transform: translateY(0);
  }
}

@keyframes slideOutToTop {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(calc(-100% - var(--viewport-padding)));
  }
}

@keyframes slideInFromBottom {
  from {
    transform: translateY(calc(100% + var(--viewport-padding)));
  }
  to {
    transform: translateY(0);
  }
}

@keyframes slideOutToBottom {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(calc(100% + var(--viewport-padding)));
  }
}

@keyframes swipeOut {
  from {
    transform: translateX(var(--radix-toast-swipe-end-x));
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
}

/* RTL animations */
:global([dir="rtl"]) .root[data-state="open"] {
  animation-name: slideInRTL;
}

:global([dir="rtl"]) .root[data-state="closed"] {
  animation-name: slideOutRTL;
}

@keyframes slideInRTL {
  from {
    transform: translateX(calc(-100% - var(--viewport-padding)));
  }
  to {
    transform: translateX(0);
  }
}

@keyframes slideOutRTL {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(-100% - var(--viewport-padding)));
  }
}