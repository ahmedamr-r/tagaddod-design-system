name: Token Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/tokens/**'
      - 'packages/themes/**'

jobs:
  check-conflicts:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.ref.startsWith('design-tokens-sync/') || github.event.pull_request.head.ref.startsWith('token-update/')
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      
      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
      
      - name: Check for conflicts
        id: conflict-check
        run: |
          # Try to merge base into PR branch
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          if ! git merge origin/${{ github.event.pull_request.base.ref }} --no-commit --no-ff; then
            echo "conflicts=true" >> $GITHUB_OUTPUT
            
            # Get list of conflicted files
            CONFLICTS=$(git diff --name-only --diff-filter=U)
            echo "Conflicted files:"
            echo "$CONFLICTS"
            
            # Abort the merge
            git merge --abort
          else
            echo "conflicts=false" >> $GITHUB_OUTPUT
            # Abort the merge since we were just testing
            git merge --abort
          fi
      
      - name: Attempt automatic rebase
        if: steps.conflict-check.outputs.conflicts == 'true'
        id: auto-rebase
        run: |
          # Try to rebase onto base branch
          if git rebase origin/${{ github.event.pull_request.base.ref }}; then
            echo "rebase_success=true" >> $GITHUB_OUTPUT
            # Push the rebased branch
            git push --force-with-lease origin ${{ github.event.pull_request.head.ref }}
          else
            echo "rebase_success=false" >> $GITHUB_OUTPUT
            git rebase --abort
          fi
      
      - name: Create conflict notification
        if: steps.conflict-check.outputs.conflicts == 'true' && steps.auto-rebase.outputs.rebase_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Token Merge Conflict Detected')
            );
            
            const commentBody = `## ⚠️ Token Merge Conflict Detected
            
            This pull request has conflicts with the base branch that couldn't be automatically resolved.
            
            ### Conflicted Files:
            ${process.env.CONFLICTS ? process.env.CONFLICTS.split('\n').map(f => `- \`${f}\``).join('\n') : 'Unable to determine conflicted files'}
            
            ### Resolution Options:
            
            1. **Manual Resolution** (Recommended):
               - Pull the latest changes from \`${context.payload.pull_request.base.ref}\`
               - Resolve conflicts locally
               - Push the resolved changes
            
            2. **Token Admin UI**:
               - Import the current tokens from this branch
               - Re-apply your changes in the Token Admin UI
               - Create a new PR
            
            3. **Request Help**:
               - Tag a maintainer for assistance
               - Provide context about your changes
            
            Remember: Resolving token conflicts requires careful consideration of both sets of changes to maintain design consistency.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
            }
        env:
          CONFLICTS: ${{ steps.conflict-check.outputs.conflicts }}

  merge-queue:
    runs-on: ubuntu-latest
    if: github.event.pull_request.labels.*.name contains 'tokens-update'
    
    steps:
      - name: Add to merge queue
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR is approved and all checks pass
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const approved = reviews.some(review => review.state === 'APPROVED');
            
            if (approved && pr.mergeable_state === 'clean') {
              // Add to merge queue
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['merge-queue']
              });
              
              // Comment on PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '✅ This PR has been added to the merge queue and will be automatically merged once it reaches the front of the queue.'
              });
            }
