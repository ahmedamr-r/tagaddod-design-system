name: Token Merge Queue

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual trigger

jobs:
  process-queue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Process merge queue
        uses: actions/github-script@v7
        with:
          script: |
            // Get all PRs labeled with 'merge-queue'
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'merge-queue',
              sort: 'created',
              direction: 'asc'
            });
            
            if (prs.length === 0) {
              console.log('No PRs in merge queue');
              return;
            }
            
            // Process the oldest PR first
            const pr = prs[0];
            console.log(`Processing PR #${pr.number}: ${pr.title}`);
            
            // Check if PR is still mergeable
            const { data: currentPr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            if (currentPr.mergeable_state !== 'clean') {
              console.log(`PR #${pr.number} is not mergeable (state: ${currentPr.mergeable_state})`);
              
              // Remove from queue and notify
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: 'merge-queue'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `❌ This PR was removed from the merge queue because it's no longer mergeable (state: ${currentPr.mergeable_state}). Please resolve any conflicts or failing checks.`
              });
              
              return;
            }
            
            // Merge the PR
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
              
              console.log(`Successfully merged PR #${pr.number}`);
              
              // Remove merge-queue label (PR will be closed)
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: 'merge-queue'
              });
              
            } catch (error) {
              console.error(`Failed to merge PR #${pr.number}: ${error.message}`);
              
              // Remove from queue and notify
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: 'merge-queue'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `❌ Failed to merge this PR. Error: ${error.message}\n\nThe PR has been removed from the merge queue. Please investigate and re-add when ready.`
              });
            }
