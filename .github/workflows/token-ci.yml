name: Token CI

on:
  pull_request:
    paths:
      - 'packages/tokens/**'
      - 'packages/themes/**'
      - '.changeset/**'
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 20

jobs:
  validate-tokens:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: yarn install --immutable
      
      - name: Build tokens
        run: |
          cd packages/tokens
          yarn build
      
      - name: Validate token format
        run: |
          cd packages/tokens
          # Create validation script
          cat > validate.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Validate W3C format
          function validateTokenFormat(tokens, filepath = '') {
            const errors = [];
            
            function validate(obj, path = []) {
              Object.entries(obj).forEach(([key, value]) => {
                const currentPath = [...path, key];
                
                if (value && typeof value === 'object') {
                  if ('value' in value && 'type' in value) {
                    // This is a token
                    if (!value.type) {
                      errors.push(`${currentPath.join('.')}: Missing 'type' field`);
                    }
                    if (value.value === undefined) {
                      errors.push(`${currentPath.join('.')}: Missing 'value' field`);
                    }
                  } else {
                    // Recurse into nested object
                    validate(value, currentPath);
                  }
                }
              });
            }
            
            validate(tokens);
            return errors;
          }
          
          // Check all token files
          const tokenDirs = ['src/primitives', 'src/semantics'];
          let hasErrors = false;
          
          tokenDirs.forEach(dir => {
            if (fs.existsSync(dir)) {
              fs.readdirSync(dir).forEach(file => {
                if (file.endsWith('.json')) {
                  const filepath = path.join(dir, file);
                  const content = fs.readFileSync(filepath, 'utf8');
                  try {
                    const tokens = JSON.parse(content);
                    const errors = validateTokenFormat(tokens, filepath);
                    if (errors.length > 0) {
                      console.error(`Errors in ${filepath}:`);
                      errors.forEach(err => console.error(`  - ${err}`));
                      hasErrors = true;
                    }
                  } catch (e) {
                    console.error(`Failed to parse ${filepath}: ${e.message}`);
                    hasErrors = true;
                  }
                }
              });
            }
          });
          
          if (hasErrors) {
            process.exit(1);
          }
          console.log('All tokens validated successfully');
          EOF
          
          node validate.js
      
      - name: Check for contrast issues
        run: |
          cd packages/tokens
          # Create contrast check script
          cat > check-contrast.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const wcagContrast = require('wcag-contrast');
          
          // Get all color tokens
          function getColorTokens(obj, path = []) {
            const colors = {};
            
            Object.entries(obj).forEach(([key, value]) => {
              const currentPath = [...path, key];
              
              if (value && typeof value === 'object') {
                if (value.type === 'color' && value.value) {
                  colors[currentPath.join('.')] = value.value;
                } else if (!('value' in value)) {
                  Object.assign(colors, getColorTokens(value, currentPath));
                }
              }
            });
            
            return colors;
          }
          
          // Check common color combinations
          const primitives = {};
          const primitivesDir = 'src/primitives';
          if (fs.existsSync(primitivesDir)) {
            fs.readdirSync(primitivesDir).forEach(file => {
              if (file.endsWith('.json')) {
                const content = fs.readFileSync(path.join(primitivesDir, file), 'utf8');
                Object.assign(primitives, JSON.parse(content));
              }
            });
          }
          
          const colors = getColorTokens(primitives);
          const warnings = [];
          
          // Check against white and black backgrounds
          Object.entries(colors).forEach(([name, color]) => {
            try {
              const whiteRatio = wcagContrast.ratio(color, '#ffffff');
              const blackRatio = wcagContrast.ratio(color, '#000000');
              
              if (whiteRatio < 4.5 && blackRatio < 4.5) {
                warnings.push(`${name}: Fails WCAG AA against both white and black (${whiteRatio.toFixed(2)} / ${blackRatio.toFixed(2)})`);
              }
            } catch (e) {
              // Invalid color format
            }
          });
          
          if (warnings.length > 0) {
            console.log('Contrast warnings:');
            warnings.forEach(warn => console.log(`  - ${warn}`));
          }
          
          console.log('Contrast check completed');
          EOF
          
          yarn add wcag-contrast
          node check-contrast.js

  visual-regression:
    runs-on: ubuntu-latest
    needs: validate-tokens
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: yarn install --immutable
      
      - name: Build packages
        run: yarn build
      
      - name: Build Storybook
        run: yarn workspace @tagaddod/storybook build-storybook
      
      - name: Publish to Chromatic
        uses: chromaui/action@v11
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: 'build-storybook'
          workingDir: packages/storybook
          exitZeroOnChanges: false
          exitOnceUploaded: false
        continue-on-error: true

  check-changesets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for changeset
        run: |
          if ! ls .changeset/*.md > /dev/null 2>&1; then
            echo "ERROR: No changeset found. Token changes require a changeset."
            echo "Please run 'yarn changeset' to create one."
            exit 1
          fi
