[
  {
    "componentName": "Components/ThemeProvider",
    "stories": [
      {
        "id": "Components/ThemeProvider--default",
        "name": "Default",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--fontswitchingdemo",
        "name": "FontSwitchingDemo",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "FontSwitchingDemo",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--typographycomparison",
        "name": "TypographyComparison",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "TypographyComparison",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--languagefontswitcher",
        "name": "LanguageFontSwitcher",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "LanguageFontSwitcher",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--tagaddodtheme",
        "name": "TagaddodTheme",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "TagaddodTheme",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--greenpantheme",
        "name": "GreenPanTheme",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "GreenPanTheme",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--rtldirection",
        "name": "RtlDirection",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "RtlDirection",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--customstoragekey",
        "name": "CustomStorageKey",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "CustomStorageKey",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--nestedthemeproviders",
        "name": "NestedThemeProviders",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "NestedThemeProviders",
        "description": ""
      },
      {
        "id": "Components/ThemeProvider--withthemeclasses",
        "name": "WithThemeClasses",
        "title": "Components/ThemeProvider",
        "importPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "ThemeProvider",
        "storyName": "WithThemeClasses",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/providers/ThemeProvider.stories.tsx",
    "mdxContent": "import { Meta, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as ThemeProviderStories from './ThemeProvider.stories';\n\n<Meta of={ThemeProviderStories} />\n\n# ThemeProvider\n\nThe `ThemeProvider` is a context provider that manages theme, direction, locale, and typography preferences throughout the application. It enables runtime switching between brands (Tagaddod/GreenPan), text directions (LTR/RTL), locales (en/ar), and **automatically switches fonts** between Outfit (English) and Tajawal (Arabic) without requiring a page reload.\n\n## Overview\n\nThe `ThemeProvider` is a foundational component of the Tagaddod Design System that provides comprehensive theming capabilities across the entire component library. It:\n\n- ✅ Applies brand-specific design tokens\n- ✅ Handles Right-to-Left (RTL) text direction\n- ✅ Manages locale settings with automatic font switching\n- ✅ **Switches between Outfit (English) and Tajawal (Arabic) fonts**\n- ✅ Persists user preferences in localStorage\n- ✅ Provides hooks for descendants to access and modify theme state\n\n## Font System Architecture\n\nThe `ThemeProvider` includes an intelligent **bilingual font system** that automatically switches fonts based on language:\n\n### English (LTR)\n- **Font Family**: Outfit (sans-serif)\n- **Font Weights**: 400 (regular), 500 (medium), 600 (semibold), 700 (bold)\n- **CSS Selector**: `html[lang=\"en\"]`\n\n### Arabic (RTL)\n- **Font Family**: Tajawal (sans-serif)\n- **Font Weights**: 500 (regular), 700 (medium/semibold/bold)\n- **CSS Selector**: `html[lang=\"ar\"]`\n\n<Canvas of={ThemeProviderStories.FontSwitchingDemo} />\n\n## Import\n\n```jsx\nimport { ThemeProvider, useTheme, useThemeClasses } from '@tagaddod-design/react';\n```\n\n## Props\n\n<ArgTypes of={ThemeProviderStories} />\n\n## Basic Usage\n\nWrap your application with the `ThemeProvider` to enable theme and font support:\n\n<Canvas of={ThemeProviderStories.Default} />\n\n```jsx\nimport { ThemeProvider } from '@tagaddod-design/react';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <YourApplication />\n    </ThemeProvider>\n  );\n}\n```\n\n## Theme Options\n\nThe `ThemeProvider` supports two brands with identical font behavior:\n\n- **Tagaddod**: The primary brand (default)\n- **GreenPan**: Secondary brand with its own color palette\n\n<Canvas of={ThemeProviderStories.TagaddodTheme} />\n\n```jsx\n// Explicitly set Tagaddod theme (though it's the default)\n<ThemeProvider defaultTheme=\"tagaddod\">\n  <YourApplication />\n</ThemeProvider>\n```\n\n<Canvas of={ThemeProviderStories.GreenPanTheme} />\n\n```jsx\n// Set GreenPan theme - fonts work the same way\n<ThemeProvider defaultTheme=\"greenpan\">\n  <YourApplication />\n</ThemeProvider>\n```\n\n## Direction, Locale, and Font Switching\n\nThe `ThemeProvider` supports both Left-to-Right (LTR) and Right-to-Left (RTL) text directions, with **automatic font switching**:\n\n### LTR Mode (English)\n- **Direction**: `ltr`\n- **Locale**: `en` \n- **Font**: Outfit\n- **Usage**: Used for English content (default)\n\n### RTL Mode (Arabic)\n- **Direction**: `rtl`\n- **Locale**: `ar`\n- **Font**: Tajawal\n- **Usage**: Used for Arabic content\n\n<Canvas of={ThemeProviderStories.RtlDirection} />\n\n```jsx\n// Set RTL direction - automatically switches to Tajawal font\n<ThemeProvider defaultDirection=\"rtl\" defaultLocale=\"ar\">\n  <YourApplication />\n</ThemeProvider>\n```\n\n## Typography Examples\n\n<Canvas of={ThemeProviderStories.TypographyComparison} />\n\nThe font switching happens automatically when you change direction. Notice how:\n- **English text** renders with the **Outfit** font family\n- **Arabic text** renders with the **Tajawal** font family\n- Font weights are adjusted for optimal readability in each language\n\n## How Font Switching Works\n\n### 1. HTML Language Attribute\n\nThe provider sets the `lang` attribute on the `<html>` element:\n\n```html\n<!-- English Mode -->\n<html lang=\"en\" dir=\"ltr\">\n\n<!-- Arabic Mode -->\n<html lang=\"ar\" dir=\"rtl\">\n```\n\n### 2. CSS Font Selectors\n\nLocale-specific CSS files contain font overrides:\n\n```css\n/* English font (en.css) */\nhtml[lang=\"en\"] {\n  --t-font-family-primary: Outfit, sans-serif;\n  --t-font-weight-regular: 400;\n  --t-font-weight-medium: 500;\n  --t-font-weight-semibold: 600;\n  --t-font-weight-bold: 700;\n}\n\n/* Arabic font (ar.css) */\nhtml[lang=\"ar\"] {\n  --t-font-family-primary: Tajawal, sans-serif;\n  --t-font-weight-regular: 500;\n  --t-font-weight-medium: 700;\n  --t-font-weight-semibold: 700;\n  --t-font-weight-bold: 700;\n}\n```\n\n### 3. Component Font Application\n\nAll components use the CSS variable:\n\n```css\n.Button {\n  font-family: var(--t-font-family-primary);\n  font-weight: var(--t-font-weight-medium);\n}\n```\n\n### 4. Automatic Direction-Locale Sync\n\nChanging direction automatically updates locale and triggers font switching:\n\n```javascript\n// Inside ThemeProvider\nuseEffect(() => {\n  const expectedLocale = getLocaleFromDirection(direction);\n  if (locale !== expectedLocale) {\n    setLocale(expectedLocale);\n  }\n}, [direction, locale]);\n```\n\n## Persistent Storage\n\nTheme preferences (including font/locale) are automatically stored in `localStorage`:\n\n<Canvas of={ThemeProviderStories.CustomStorageKey} />\n\n```jsx\n// Use a custom localStorage key\n<ThemeProvider storageKey=\"my-app-theme-preferences\">\n  <YourApplication />\n</ThemeProvider>\n```\n\nThe stored preferences include:\n```json\n{\n  \"theme\": \"tagaddod\",\n  \"direction\": \"rtl\", \n  \"locale\": \"ar\"\n}\n```\n\n## Nested Providers\n\nYou can nest `ThemeProvider`s to apply different themes/fonts to specific sections:\n\n<Canvas of={ThemeProviderStories.NestedThemeProviders} />\n\n```jsx\n<ThemeProvider defaultTheme=\"tagaddod\" defaultDirection=\"ltr\">\n  {/* Outer content uses Tagaddod theme + Outfit font */}\n  <Header />\n  <MainContent />\n  \n  {/* A specific section uses GreenPan theme + Tajawal font */}\n  <ThemeProvider defaultTheme=\"greenpan\" defaultDirection=\"rtl\">\n    <GreenPanSection /> {/* This will use Arabic font */}\n  </ThemeProvider>\n  \n  <Footer />\n</ThemeProvider>\n```\n\n## Hooks\n\n### useTheme\n\nThe `useTheme` hook provides access to the current theme context and methods to update it:\n\n```jsx\nimport { useTheme } from '@tagaddod-design/react';\n\nfunction ThemeSwitcher() {\n  const { \n    theme,         // Current theme ('tagaddod' | 'greenpan')\n    setTheme,      // Function to update theme\n    direction,     // Current direction ('ltr' | 'rtl')\n    setDirection,  // Function to update direction (triggers font switch)\n    locale,        // Current locale ('en' | 'ar')\n    setLocale      // Function to update locale (triggers font switch)\n  } = useTheme();\n  \n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n      <button onClick={() => setTheme('tagaddod')}>Tagaddod</button>\n      <button onClick={() => setTheme('greenpan')}>GreenPan</button>\n      \n      <p>Font: {locale === 'en' ? 'Outfit' : 'Tajawal'}</p>\n      <button onClick={() => setDirection('ltr')}>English (Outfit)</button>\n      <button onClick={() => setDirection('rtl')}>Arabic (Tajawal)</button>\n    </div>\n  );\n}\n```\n\n### useThemeClasses\n\nThe `useThemeClasses` hook returns CSS class names and other utility values for theme-based styling:\n\n<Canvas of={ThemeProviderStories.WithThemeClasses} />\n\n```jsx\nimport { useThemeClasses } from '@tagaddod-design/react';\n\nfunction ThemedComponent() {\n  const { \n    theme,         // Current theme value\n    direction,     // Current direction value\n    locale,        // Current locale value ('en' = Outfit, 'ar' = Tajawal)\n    isRTL,         // Boolean: true if direction is 'rtl'\n    themeClass,    // CSS class for current theme (e.g., 'theme-tagaddod')\n    dirClass,      // CSS class for direction (e.g., 'dir-ltr')\n    localeClass    // CSS class for locale (e.g., 'locale-en')\n  } = useThemeClasses();\n  \n  const currentFont = locale === 'en' ? 'Outfit' : 'Tajawal';\n  \n  return (\n    <div className={`my-component ${themeClass} ${dirClass}`}>\n      <p>Current font: {currentFont}</p>\n      {/* Component content */}\n    </div>\n  );\n}\n```\n\n## Language/Font Switcher Demo\n\n<Canvas of={ThemeProviderStories.LanguageFontSwitcher} />\n\n```jsx\nfunction LanguageFontSwitcher() {\n  const { locale, direction, setDirection } = useTheme();\n  \n  const switchLanguage = () => {\n    // Direction change will automatically update locale and font\n    setDirection(locale === 'en' ? 'rtl' : 'ltr');\n  };\n  \n  const currentFont = locale === 'en' ? 'Outfit' : 'Tajawal';\n  \n  return (\n    <div>\n      <p>Current: {locale === 'en' ? 'English' : 'Arabic'} ({currentFont})</p>\n      <button onClick={switchLanguage}>\n        {locale === 'en' ? 'العربية (Tajawal)' : 'English (Outfit)'}\n      </button>\n    </div>\n  );\n}\n```\n\n## Best Practices\n\n### Typography Best Practices\n\n1. **Always use CSS variables** for font properties to enable automatic switching:\n   ```css\n   /* ✅ Good - automatically switches fonts */\n   .element {\n     font-family: var(--t-font-family-primary);\n     font-weight: var(--t-font-weight-medium);\n   }\n   \n   /* ❌ Bad - hardcoded font won't switch */\n   .element {\n     font-family: Outfit, sans-serif;\n   }\n   ```\n\n2. **Test typography in both languages** to ensure readability and visual balance\n\n3. **Use semantic font weight tokens** rather than numeric values\n\n### General Best Practices\n\n1. **Always use the `ThemeProvider` at the root level** of your application\n\n2. **Use logical CSS properties** for directional styles to support RTL languages:\n   ```css\n   /* ✅ Good - automatically flips in RTL */\n   .element {\n     margin-inline-start: 16px;\n   }\n   \n   /* ❌ Bad - doesn't change in RTL */\n   .element {\n     margin-left: 16px;\n   }\n   ```\n\n3. **Test components in all combinations**: Both themes, directions, and fonts\n\n4. **Avoid directly manipulating HTML attributes**; use the provided context methods\n\n## Troubleshooting\n\n### Font Not Switching\n\nIf fonts aren't switching properly:\n\n1. **Check HTML `lang` attribute**: Verify it's set to `en` or `ar`\n2. **Verify CSS imports**: Ensure locale-specific CSS files are imported\n3. **Check font loading**: Verify both Outfit and Tajawal are loaded in document head\n4. **Inspect CSS variables**: Use DevTools to check `--t-font-family-primary` value\n\n### RTL Layout Issues\n\nFor RTL layout problems:\n\n1. **Use logical properties**: Replace `margin-left` with `margin-inline-start`\n2. **Check `dir` attribute**: Should be `rtl` for Arabic content\n3. **Test text alignment**: Use `text-align: start` instead of `text-align: left`\n\n## Related\n\n- [Design Tokens](/docs/tokens-intro--documentation)\n- [Typography System](/docs/typography-intro--documentation)\n- [Internationalization](/docs/i18n-intro--documentation)\n- [Global Styles](/docs/styles-intro--documentation)\n",
    "componentInfo": {
      "props": {},
      "description": "ThemeProvider",
      "usage": [
        "import { ThemeProvider, useTheme, useThemeClasses } from '@tagaddod-design/react';",
        "import { ThemeProvider } from '@tagaddod-design/react';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <YourApplication />\n    </ThemeProvider>\n  );\n}",
        "// Explicitly set Tagaddod theme (though it's the default)\n<ThemeProvider defaultTheme=\"tagaddod\">\n  <YourApplication />\n</ThemeProvider>",
        "// Set GreenPan theme - fonts work the same way\n<ThemeProvider defaultTheme=\"greenpan\">\n  <YourApplication />\n</ThemeProvider>",
        "// Set RTL direction - automatically switches to Tajawal font\n<ThemeProvider defaultDirection=\"rtl\" defaultLocale=\"ar\">\n  <YourApplication />\n</ThemeProvider>",
        "// Use a custom localStorage key\n<ThemeProvider storageKey=\"my-app-theme-preferences\">\n  <YourApplication />\n</ThemeProvider>",
        "<ThemeProvider defaultTheme=\"tagaddod\" defaultDirection=\"ltr\">\n  {/* Outer content uses Tagaddod theme + Outfit font */}\n  <Header />\n  <MainContent />\n  \n  {/* A specific section uses GreenPan theme + Tajawal font */}\n  <ThemeProvider defaultTheme=\"greenpan\" defaultDirection=\"rtl\">\n    <GreenPanSection /> {/* This will use Arabic font */}\n  </ThemeProvider>\n  \n  <Footer />\n</ThemeProvider>",
        "import { useTheme } from '@tagaddod-design/react';\n\nfunction ThemeSwitcher() {\n  const { \n    theme,         // Current theme ('tagaddod' | 'greenpan')\n    setTheme,      // Function to update theme\n    direction,     // Current direction ('ltr' | 'rtl')\n    setDirection,  // Function to update direction (triggers font switch)\n    locale,        // Current locale ('en' | 'ar')\n    setLocale      // Function to update locale (triggers font switch)\n  } = useTheme();\n  \n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n      <button onClick={() => setTheme('tagaddod')}>Tagaddod</button>\n      <button onClick={() => setTheme('greenpan')}>GreenPan</button>\n      \n      <p>Font: {locale === 'en' ? 'Outfit' : 'Tajawal'}</p>\n      <button onClick={() => setDirection('ltr')}>English (Outfit)</button>\n      <button onClick={() => setDirection('rtl')}>Arabic (Tajawal)</button>\n    </div>\n  );\n}",
        "import { useThemeClasses } from '@tagaddod-design/react';\n\nfunction ThemedComponent() {\n  const { \n    theme,         // Current theme value\n    direction,     // Current direction value\n    locale,        // Current locale value ('en' = Outfit, 'ar' = Tajawal)\n    isRTL,         // Boolean: true if direction is 'rtl'\n    themeClass,    // CSS class for current theme (e.g., 'theme-tagaddod')\n    dirClass,      // CSS class for direction (e.g., 'dir-ltr')\n    localeClass    // CSS class for locale (e.g., 'locale-en')\n  } = useThemeClasses();\n  \n  const currentFont = locale === 'en' ? 'Outfit' : 'Tajawal';\n  \n  return (\n    <div className={`my-component ${themeClass} ${dirClass}`}>\n      <p>Current font: {currentFont}</p>\n      {/* Component content */}\n    </div>\n  );\n}",
        "function LanguageFontSwitcher() {\n  const { locale, direction, setDirection } = useTheme();\n  \n  const switchLanguage = () => {\n    // Direction change will automatically update locale and font\n    setDirection(locale === 'en' ? 'rtl' : 'ltr');\n  };\n  \n  const currentFont = locale === 'en' ? 'Outfit' : 'Tajawal';\n  \n  return (\n    <div>\n      <p>Current: {locale === 'en' ? 'English' : 'Arabic'} ({currentFont})</p>\n      <button onClick={switchLanguage}>\n        {locale === 'en' ? 'العربية (Tajawal)' : 'English (Outfit)'}\n      </button>\n    </div>\n  );\n}"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/TopBar",
    "stories": [
      {
        "id": "Components/TopBar--default",
        "name": "Default",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/TopBar--customizedlistbox",
        "name": "CustomizedListbox",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "CustomizedListbox",
        "description": ""
      },
      {
        "id": "Components/TopBar--shadowtest",
        "name": "ShadowTest",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "ShadowTest",
        "description": ""
      },
      {
        "id": "Components/TopBar--popovercustomization",
        "name": "PopoverCustomization",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "PopoverCustomization",
        "description": ""
      },
      {
        "id": "Components/TopBar--clickablelogo",
        "name": "ClickableLogo",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "ClickableLogo",
        "description": ""
      },
      {
        "id": "Components/TopBar--disabledwarehouse",
        "name": "DisabledWarehouse",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "DisabledWarehouse",
        "description": ""
      },
      {
        "id": "Components/TopBar--customwarehouses",
        "name": "CustomWarehouses",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "CustomWarehouses",
        "description": ""
      },
      {
        "id": "Components/TopBar--withoutlogout",
        "name": "WithoutLogout",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "WithoutLogout",
        "description": ""
      },
      {
        "id": "Components/TopBar--customlogouttext",
        "name": "CustomLogoutText",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "CustomLogoutText",
        "description": ""
      },
      {
        "id": "Components/TopBar--interactive",
        "name": "Interactive",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "Interactive",
        "description": ""
      },
      {
        "id": "Components/TopBar--mobileview",
        "name": "MobileView",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "MobileView",
        "description": ""
      },
      {
        "id": "Components/TopBar--rtllayout",
        "name": "RTLLayout",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "RTLLayout",
        "description": ""
      },
      {
        "id": "Components/TopBar--fulllayoutexample",
        "name": "FullLayoutExample",
        "title": "Components/TopBar",
        "importPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TopBar",
        "storyName": "FullLayoutExample",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/TopBar/TopBar.stories.tsx",
    "mdxContent": "",
    "componentInfo": {
      "props": {},
      "description": "",
      "usage": [],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Tooltip",
    "stories": [
      {
        "id": "Components/Tooltip--default",
        "name": "Default",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Tooltip--autopositioning",
        "name": "AutoPositioning",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "AutoPositioning",
        "description": ""
      },
      {
        "id": "Components/Tooltip--top",
        "name": "Top",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Top",
        "description": ""
      },
      {
        "id": "Components/Tooltip--right",
        "name": "Right",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Right",
        "description": ""
      },
      {
        "id": "Components/Tooltip--bottom",
        "name": "Bottom",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Bottom",
        "description": ""
      },
      {
        "id": "Components/Tooltip--left",
        "name": "Left",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Left",
        "description": ""
      },
      {
        "id": "Components/Tooltip--alignstart",
        "name": "AlignStart",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "AlignStart",
        "description": ""
      },
      {
        "id": "Components/Tooltip--aligncenter",
        "name": "AlignCenter",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "AlignCenter",
        "description": ""
      },
      {
        "id": "Components/Tooltip--alignend",
        "name": "AlignEnd",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "AlignEnd",
        "description": ""
      },
      {
        "id": "Components/Tooltip--withicon",
        "name": "WithIcon",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "WithIcon",
        "description": ""
      },
      {
        "id": "Components/Tooltip--icononlytrigger",
        "name": "IconOnlyTrigger",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "IconOnlyTrigger",
        "description": ""
      },
      {
        "id": "Components/Tooltip--longcontent",
        "name": "LongContent",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "LongContent",
        "description": ""
      },
      {
        "id": "Components/Tooltip--disabled",
        "name": "Disabled",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/Tooltip--customdelay",
        "name": "CustomDelay",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "CustomDelay",
        "description": ""
      },
      {
        "id": "Components/Tooltip--rtlcontent",
        "name": "RtlContent",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "RtlContent",
        "description": ""
      },
      {
        "id": "Components/Tooltip--multipletooltips",
        "name": "MultipleTooltips",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "MultipleTooltips",
        "description": ""
      },
      {
        "id": "Components/Tooltip--allpositions",
        "name": "AllPositions",
        "title": "Components/Tooltip",
        "importPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tooltip",
        "storyName": "AllPositions",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Tooltip/Tooltip.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as TooltipStories from './Tooltip.stories';\n\n<Meta of={TooltipStories} />\n\n# Tooltip\n\nA tooltip is a popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\n\n<Canvas of={TooltipStories.Default} />\n\n## Usage\n\nTooltips are used to provide additional context or helpful information about UI elements without cluttering the interface. They should be concise and appear quickly when users need them.\n\n**Automatic Positioning**: By default, tooltips automatically position themselves based on available viewport space. You can optionally specify a preferred side if needed.\n\n### When to use tooltips\n\n- To explain the purpose of icon-only buttons\n- To provide additional context for form fields\n- To clarify abbreviated text or technical terms\n- To show the full text when content is truncated\n\n### When not to use tooltips\n\n- For critical information that users must see\n- On mobile devices where hover interactions don't exist\n- When the tooltip content is longer than a few sentences\n\n## Examples\n\n### Basic Usage\n\n<Canvas of={TooltipStories.Default} />\n\n### Automatic Positioning\n\n<Canvas of={TooltipStories.AutoPositioning} />\n\n### Positioning\n\nTooltips can be positioned on any side of the trigger element:\n\n<Canvas of={TooltipStories.Top} />\n<Canvas of={TooltipStories.Right} />\n<Canvas of={TooltipStories.Bottom} />\n<Canvas of={TooltipStories.Left} />\n\n### Alignment\n\nControl how the tooltip aligns relative to its trigger:\n\n<Canvas of={TooltipStories.AlignStart} />\n<Canvas of={TooltipStories.AlignCenter} />\n<Canvas of={TooltipStories.AlignEnd} />\n\n### With Icons\n\nTooltips work well with icon buttons and informational elements:\n\n<Canvas of={TooltipStories.WithIcon} />\n<Canvas of={TooltipStories.IconOnlyTrigger} />\n\n### Long Content\n\nTooltips automatically wrap longer content:\n\n<Canvas of={TooltipStories.LongContent} />\n\n### Multiple Tooltips\n\n<Canvas of={TooltipStories.MultipleTooltips} />\n\n### All Positions\n\n<Canvas of={TooltipStories.AllPositions} />\n\n## RTL Support\n\nThe tooltip component fully supports RTL (right-to-left) layouts with proper text alignment and positioning:\n\n<Canvas of={TooltipStories.RtlContent} />\n\n## Implementation\n\n### TooltipProvider\n\nWrap your application or tooltip group with `TooltipProvider` to enable tooltip functionality:\n\n```tsx\nimport { TooltipProvider, Tooltip } from '@tagaddod-design/react';\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <Tooltip content=\"Helpful information\">\n        <button>Hover me</button>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n```\n\n### Basic Tooltip (Auto-positioning)\n\n```tsx\n<Tooltip content=\"This explains what the button does\">\n  <Button>Action</Button>\n</Tooltip>\n```\n\n### Custom Positioning\n\n```tsx\n<Tooltip\n  content=\"Tooltip content\"\n  side=\"right\"\n  align=\"start\"\n  sideOffset={12}\n>\n  <Button>Positioned tooltip</Button>\n</Tooltip>\n```\n\n### Disabled State\n\n```tsx\n<Tooltip content=\"This won't show\" disabled>\n  <Button>Disabled tooltip</Button>\n</Tooltip>\n```\n\n## Accessibility\n\n- Tooltips are announced by screen readers when the trigger receives focus\n- Use `aria-label` on trigger elements when the tooltip provides essential information\n- Ensure tooltip content is concise and meaningful\n- Tooltips automatically hide when focus leaves the trigger element\n\n## Props\n\n<ArgTypes of={TooltipStories} />\n\n## Design Tokens\n\nThe tooltip component uses the following design tokens:\n\n- `--t-color-overlay-dark-85`: Background color (semi-transparent dark)\n- `--color-text-on-bg-fill`: Text color (white)\n- `--t-typography-body-sm-default`: Typography (font family, size, weight)\n- `--t-font-family-primary`: Font family for LTR text\n- `--t-font-family-arabic`: Font family for RTL text\n- `--t-space-200`: Internal padding\n- `--t-border-radius-200`: Border radius",
    "componentInfo": {
      "props": {},
      "description": "Tooltip",
      "usage": [
        "import { TooltipProvider, Tooltip } from '@tagaddod-design/react';\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <Tooltip content=\"Helpful information\">\n        <button>Hover me</button>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}",
        "<Tooltip content=\"This explains what the button does\">\n  <Button>Action</Button>\n</Tooltip>",
        "<Tooltip\n  content=\"Tooltip content\"\n  side=\"right\"\n  align=\"start\"\n  sideOffset={12}\n>\n  <Button>Positioned tooltip</Button>\n</Tooltip>",
        "<Tooltip content=\"This won't show\" disabled>\n  <Button>Disabled tooltip</Button>\n</Tooltip>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/TextInput",
    "stories": [
      {
        "id": "Components/TextInput--default",
        "name": "Default",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/TextInput--withhelptext",
        "name": "WithHelpText",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithHelpText",
        "description": ""
      },
      {
        "id": "Components/TextInput--witherror",
        "name": "WithError",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithError",
        "description": ""
      },
      {
        "id": "Components/TextInput--witherrorandhelptext",
        "name": "WithErrorAndHelpText",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithErrorAndHelpText",
        "description": ""
      },
      {
        "id": "Components/TextInput--required",
        "name": "Required",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Required",
        "description": ""
      },
      {
        "id": "Components/TextInput--optional",
        "name": "Optional",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Optional",
        "description": ""
      },
      {
        "id": "Components/TextInput--disabled",
        "name": "Disabled",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/TextInput--readonly",
        "name": "ReadOnly",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "ReadOnly",
        "description": ""
      },
      {
        "id": "Components/TextInput--prefixexamples",
        "name": "PrefixExamples",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "PrefixExamples",
        "description": ""
      },
      {
        "id": "Components/TextInput--currencyprefixes",
        "name": "CurrencyPrefixes",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "CurrencyPrefixes",
        "description": ""
      },
      {
        "id": "Components/TextInput--dynamictextprefix",
        "name": "DynamicTextPrefix",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "DynamicTextPrefix",
        "description": ""
      },
      {
        "id": "Components/TextInput--withsuffix",
        "name": "WithSuffix",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithSuffix",
        "description": ""
      },
      {
        "id": "Components/TextInput--withprefixandsuffix",
        "name": "WithPrefixAndSuffix",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithPrefixAndSuffix",
        "description": ""
      },
      {
        "id": "Components/TextInput--clearable",
        "name": "Clearable",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Clearable",
        "description": ""
      },
      {
        "id": "Components/TextInput--password",
        "name": "Password",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Password",
        "description": ""
      },
      {
        "id": "Components/TextInput--withprefixandclearable",
        "name": "WithPrefixAndClearable",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "WithPrefixAndClearable",
        "description": ""
      },
      {
        "id": "Components/TextInput--sizes",
        "name": "Sizes",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "Sizes",
        "description": ""
      },
      {
        "id": "Components/TextInput--sizeswithprefix",
        "name": "SizesWithPrefix",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "SizesWithPrefix",
        "description": ""
      },
      {
        "id": "Components/TextInput--fullwidth",
        "name": "FullWidth",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "FullWidth",
        "description": ""
      },
      {
        "id": "Components/TextInput--allstates",
        "name": "AllStates",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "AllStates",
        "description": ""
      },
      {
        "id": "Components/TextInput--rtlexample",
        "name": "RTLExample",
        "title": "Components/TextInput",
        "importPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "TextInput",
        "storyName": "RTLExample",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/TextInput/TextInput.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as TextInputStories from './TextInput.stories';\nimport { TextInput } from './TextInput';\nimport { IconSearch, IconMail } from '@tabler/icons-react';\n\n<Meta of={TextInputStories} />\n\n# TextInput Component\n\nThe TextInput component is a form element for collecting user text input with support for various states, sizes, and visual treatments.\n\n## Overview\n\nTextInput is a fundamental component for forms and data collection, offering a rich set of features including various states (error, disabled, read-only), prefix and suffix elements, password visibility toggle, and clear functionality.\n\n## Import\n\n```jsx\nimport { TextInput } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={TextInput} />\n\n## Basic Usage\n\n<Canvas of={TextInputStories.Default} />\n\n```jsx\n<TextInput \n  label=\"Name\"\n  placeholder=\"Enter your name\"\n/>\n```\n\n## Labels and Help Text\n\n### Standard Label\n\nLabels describe the purpose of the input field.\n\n<Canvas of={TextInputStories.Default} />\n\n### Optional Fields\n\nMark non-required fields with the \"optional\" flag to display \"(Optional)\" next to the label.\n\n<Canvas of={TextInputStories.Optional} />\n\n```jsx\n<TextInput \n  label=\"Phone Number\"\n  placeholder=\"Enter your phone number\"\n  optional={true}\n/>\n```\n\n### Required Fields\n\nAll fields are required by default. Use the `optional` prop to mark fields as optional.\n\n<Canvas of={TextInputStories.Required} />\n\n```jsx\n<TextInput \n  label=\"Username\"\n  placeholder=\"Enter your username\"\n  required={true}\n/>\n```\n\n### Help Text\n\nAdd supplementary information below the input with the `helpText` prop.\n\n<Canvas of={TextInputStories.WithHelpText} />\n\n```jsx\n<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email\"\n  helpText=\"We will never share your email with anyone else.\"\n/>\n```\n\n## Validation States\n\n### Error State\n\nDisplay error messages when validation fails.\n\n<Canvas of={TextInputStories.WithError} />\n\n```jsx\n<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n  errorMessage=\"Password must be at least 8 characters long\"\n/>\n```\n\n### Disabled State\n\nPrevent interaction with disabled inputs.\n\n<Canvas of={TextInputStories.Disabled} />\n\n```jsx\n<TextInput \n  label=\"Disabled Input\"\n  placeholder=\"You cannot edit this field\"\n  disabled={true}\n/>\n```\n\n### Read-Only State\n\nDisplay information that cannot be edited but should remain visible.\n\n<Canvas of={TextInputStories.ReadOnly} />\n\n```jsx\n<TextInput \n  label=\"Read-only Input\"\n  value=\"This is read-only text\"\n  readOnly={true}\n/>\n```\n\n## Sizes\n\nTextInput comes in three sizes to fit different UI contexts.\n\n<Canvas of={TextInputStories.Sizes} />\n\n```jsx\n<TextInput \n  label=\"Micro (20px)\"\n  placeholder=\"Micro input\"\n  size=\"micro\"\n/>\n\n<TextInput \n  label=\"Medium (32px)\"\n  placeholder=\"Medium input\"\n  size=\"medium\"\n/>\n\n<TextInput \n  label=\"Large (40px)\"\n  placeholder=\"Large input\"\n  size=\"large\"\n/>\n```\n\n## Special Features\n\n### Prefix and Suffix\n\nAdd icons or text before or after the input text.\n\n#### Prefix Examples\n\nDifferent types of prefixes including icons and text.\n\n<Canvas of={TextInputStories.PrefixExamples} />\n\n```jsx\nimport { IconMail, IconSearch } from '@tabler/icons-react';\n\n// Icon prefix\n<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email address\"\n  prefix={<IconMail size={18} />}\n/>\n\n// Text prefix\n<TextInput \n  label=\"Amount\"\n  placeholder=\"0.00\"\n  prefix=\"$\"\n/>\n```\n\n#### Sizes with Prefix\n\nPrefixes adapt to different input sizes with appropriate icon sizing.\n\n<Canvas of={TextInputStories.SizesWithPrefix} />\n\n```jsx\nimport { IconSearch } from '@tabler/icons-react';\n\n// Different sizes with appropriate icon sizing\n<TextInput size=\"micro\" prefix={<IconSearch size={14} />} />\n<TextInput size=\"medium\" prefix={<IconSearch size={18} />} />\n<TextInput size=\"large\" prefix={<IconSearch size={22} />} />\n```\n\n#### Suffix\n\n<Canvas of={TextInputStories.WithSuffix} />\n\n```jsx\nimport { IconCurrencyDollar } from '@tabler/icons-react';\n\n<TextInput \n  label=\"Amount\"\n  placeholder=\"Enter amount\"\n  suffix={<IconCurrencyDollar size={18} />}\n/>\n```\n\n#### Combined Prefix and Suffix\n\n<Canvas of={TextInputStories.WithPrefixAndSuffix} />\n\n```jsx\nimport { IconMail } from '@tabler/icons-react';\n\n<TextInput \n  label=\"Email\"\n  placeholder=\"username\"\n  prefix={<IconMail size={18} />}\n  suffix={<span>@example.com</span>}\n/>\n```\n\n### Clearable Input\n\nAdd a clear button that appears when the input has a value.\n\n<Canvas of={TextInputStories.Clearable} />\n\n```jsx\n<TextInput \n  label=\"Clearable Input\"\n  placeholder=\"Type something to show clear button\"\n  defaultValue=\"Clear me\"\n  clearable={true}\n/>\n```\n\n### Password Input\n\nPassword inputs automatically include a visibility toggle.\n\n<Canvas of={TextInputStories.Password} />\n\n```jsx\n<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n/>\n```\n\n## Layout Options\n\n### Standard Width\n\nBy default, TextInput has a width defined by its container.\n\n<Canvas of={TextInputStories.Default} />\n\n### Full Width\n\nSet `fullWidth` to true to make the input take 100% of its container width.\n\n<Canvas of={TextInputStories.FullWidth} />\n\n```jsx\n<TextInput \n  label=\"Full Width Input\"\n  placeholder=\"This input takes full width\"\n  fullWidth={true}\n/>\n```\n\n## Common Use Cases\n\nThe most common input patterns are demonstrated in the `PrefixExamples` story:\n\n<Canvas of={TextInputStories.PrefixExamples} />\n\n```jsx\nimport { IconSearch, IconMail } from '@tabler/icons-react';\n\n// Search input\n<TextInput \n  label=\"Search\"\n  placeholder=\"Search for something\"\n  prefix={<IconSearch size={18} />}\n/>\n\n// Email input\n<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email address\"\n  prefix={<IconMail size={18} />}\n/>\n\n// Amount input\n<TextInput \n  label=\"Amount\"\n  placeholder=\"0.00\"\n  prefix=\"$\"\n/>\n```\n\n### Password Input with Visibility Toggle\n\n<Canvas of={TextInputStories.Password} />\n\n```jsx\n<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n/>\n```\n\n## Internationalization\n\nThe TextInput component properly handles Right-to-Left (RTL) languages automatically by:\n\n1. Adjusting prefix and suffix positioning for RTL text flow\n2. Applying appropriate line height for Arabic text\n3. Correctly aligning text and help text in RTL contexts\n\n<Canvas of={TextInputStories.RTLExample} />\n\n```jsx\n<div dir=\"rtl\">\n  <TextInput \n    label=\"البحث\" \n    placeholder=\"ابحث هنا...\" \n    prefix={<IconSearch size={18} />}\n    clearable={true}\n  />\n</div>\n```\n\n## Accessibility\n\n- Each input has a unique ID that connects it to its label, help text, and error message\n- Required fields use the `required` attribute (all fields are required by default unless marked optional)\n- Error states use `aria-invalid` and connect error messages with `aria-describedby`\n- Interactive elements (clear button, password toggle) have appropriate `aria-label` values\n- Focus states are clearly visible for keyboard navigation\n- Screen readers can access help text and error messages through proper ARIA attributes\n\n## Form Integration\n\nTextInput is built on Radix UI's Form components, making it suitable for form libraries and validation:\n\n```jsx\nimport { Form } from '@radix-ui/react-form';\n\n<Form onSubmit={handleSubmit}>\n  <TextInput\n    name=\"email\"\n    label=\"Email Address\"\n    required={true}\n  />\n  <TextInput\n    name=\"password\"\n    label=\"Password\"\n    type=\"password\"\n    required={true}\n  />\n  <button type=\"submit\">Sign In</button>\n</Form>\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe TextInput uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-font-family-primary` | Text font |\n| `--t-font-size-*` | Font sizes for different elements |\n| `--t-font-weight-*` | Font weights |\n| `--t-color-text-*` | Text colors |\n| `--t-color-border-*` | Border colors |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-fill-*` | Focus and error colors |\n| `--t-color-icon-*` | Icon colors |\n| `--t-border-radius-*` | Border radius |\n| `--t-size-*` | Height dimensions |\n| `--t-duration-*` | Animation duration |\n| `--t-easing-*` | Animation timing |\n| `--t-line-height-*` | Line height for different languages |\n\n### Handling Different Input Types\n\n1. The component detects `type=\"password\"` and renders a toggle button\n2. For other input types, standard HTML behavior applies\n3. Clearable inputs apply to all input types\n\n### Controlled vs Uncontrolled\n\nTextInput works in both controlled and uncontrolled modes:\n\n```jsx\n// Uncontrolled with default value\n<TextInput \n  defaultValue=\"Initial value\" \n  name=\"myInput\"\n/>\n\n// Controlled with state\nconst [value, setValue] = useState('');\n<TextInput \n  value={value} \n  onChange={(e) => setValue(e.target.value)}\n/>\n```\n\n### Browser Support\n\nThe TextInput component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "TextInput Component",
      "usage": [
        "import { TextInput } from '@tagaddod/react';",
        "<TextInput \n  label=\"Name\"\n  placeholder=\"Enter your name\"\n/>",
        "<TextInput \n  label=\"Phone Number\"\n  placeholder=\"Enter your phone number\"\n  optional={true}\n/>",
        "<TextInput \n  label=\"Username\"\n  placeholder=\"Enter your username\"\n  required={true}\n/>",
        "<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email\"\n  helpText=\"We will never share your email with anyone else.\"\n/>",
        "<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n  errorMessage=\"Password must be at least 8 characters long\"\n/>",
        "<TextInput \n  label=\"Disabled Input\"\n  placeholder=\"You cannot edit this field\"\n  disabled={true}\n/>",
        "<TextInput \n  label=\"Read-only Input\"\n  value=\"This is read-only text\"\n  readOnly={true}\n/>",
        "<TextInput \n  label=\"Micro (20px)\"\n  placeholder=\"Micro input\"\n  size=\"micro\"\n/>\n\n<TextInput \n  label=\"Medium (32px)\"\n  placeholder=\"Medium input\"\n  size=\"medium\"\n/>\n\n<TextInput \n  label=\"Large (40px)\"\n  placeholder=\"Large input\"\n  size=\"large\"\n/>",
        "import { IconMail, IconSearch } from '@tabler/icons-react';\n\n// Icon prefix\n<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email address\"\n  prefix={<IconMail size={18} />}\n/>\n\n// Text prefix\n<TextInput \n  label=\"Amount\"\n  placeholder=\"0.00\"\n  prefix=\"$\"\n/>",
        "import { IconSearch } from '@tabler/icons-react';\n\n// Different sizes with appropriate icon sizing\n<TextInput size=\"micro\" prefix={<IconSearch size={14} />} />\n<TextInput size=\"medium\" prefix={<IconSearch size={18} />} />\n<TextInput size=\"large\" prefix={<IconSearch size={22} />} />",
        "import { IconCurrencyDollar } from '@tabler/icons-react';\n\n<TextInput \n  label=\"Amount\"\n  placeholder=\"Enter amount\"\n  suffix={<IconCurrencyDollar size={18} />}\n/>",
        "import { IconMail } from '@tabler/icons-react';\n\n<TextInput \n  label=\"Email\"\n  placeholder=\"username\"\n  prefix={<IconMail size={18} />}\n  suffix={<span>@example.com</span>}\n/>",
        "<TextInput \n  label=\"Clearable Input\"\n  placeholder=\"Type something to show clear button\"\n  defaultValue=\"Clear me\"\n  clearable={true}\n/>",
        "<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n/>",
        "<TextInput \n  label=\"Full Width Input\"\n  placeholder=\"This input takes full width\"\n  fullWidth={true}\n/>",
        "import { IconSearch, IconMail } from '@tabler/icons-react';\n\n// Search input\n<TextInput \n  label=\"Search\"\n  placeholder=\"Search for something\"\n  prefix={<IconSearch size={18} />}\n/>\n\n// Email input\n<TextInput \n  label=\"Email\"\n  placeholder=\"Enter your email address\"\n  prefix={<IconMail size={18} />}\n/>\n\n// Amount input\n<TextInput \n  label=\"Amount\"\n  placeholder=\"0.00\"\n  prefix=\"$\"\n/>",
        "<TextInput \n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n/>",
        "<div dir=\"rtl\">\n  <TextInput \n    label=\"البحث\" \n    placeholder=\"ابحث هنا...\" \n    prefix={<IconSearch size={18} />}\n    clearable={true}\n  />\n</div>",
        "import { Form } from '@radix-ui/react-form';\n\n<Form onSubmit={handleSubmit}>\n  <TextInput\n    name=\"email\"\n    label=\"Email Address\"\n    required={true}\n  />\n  <TextInput\n    name=\"password\"\n    label=\"Password\"\n    type=\"password\"\n    required={true}\n  />\n  <button type=\"submit\">Sign In</button>\n</Form>",
        "// Uncontrolled with default value\n<TextInput \n  defaultValue=\"Initial value\" \n  name=\"myInput\"\n/>\n\n// Controlled with state\nconst [value, setValue] = useState('');\n<TextInput \n  value={value} \n  onChange={(e) => setValue(e.target.value)}\n/>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Tabs",
    "stories": [
      {
        "id": "Components/Tabs--playground",
        "name": "Playground",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Playground",
        "description": ""
      },
      {
        "id": "Components/Tabs--default",
        "name": "Default",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Tabs--primary",
        "name": "Primary",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Primary",
        "description": ""
      },
      {
        "id": "Components/Tabs--secondary",
        "name": "Secondary",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Secondary",
        "description": ""
      },
      {
        "id": "Components/Tabs--fitted",
        "name": "Fitted",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Fitted",
        "description": ""
      },
      {
        "id": "Components/Tabs--withbadge",
        "name": "WithBadge",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "WithBadge",
        "description": ""
      },
      {
        "id": "Components/Tabs--withicon",
        "name": "WithIcon",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "WithIcon",
        "description": ""
      },
      {
        "id": "Components/Tabs--withiconandbadge",
        "name": "WithIconAndBadge",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "WithIconAndBadge",
        "description": ""
      },
      {
        "id": "Components/Tabs--disabledtab",
        "name": "DisabledTab",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "DisabledTab",
        "description": ""
      },
      {
        "id": "Components/Tabs--rtl",
        "name": "RTL",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "RTL",
        "description": ""
      },
      {
        "id": "Components/Tabs--verticalorientation",
        "name": "VerticalOrientation",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "VerticalOrientation",
        "description": ""
      },
      {
        "id": "Components/Tabs--withtabdescription",
        "name": "WithTabDescription",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "WithTabDescription",
        "description": ""
      },
      {
        "id": "Components/Tabs--count2",
        "name": "Count2",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Count2",
        "description": ""
      },
      {
        "id": "Components/Tabs--count4",
        "name": "Count4",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Count4",
        "description": ""
      },
      {
        "id": "Components/Tabs--count6",
        "name": "Count6",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "Count6",
        "description": ""
      },
      {
        "id": "Components/Tabs--animationshowcase",
        "name": "AnimationShowcase",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "AnimationShowcase",
        "description": ""
      },
      {
        "id": "Components/Tabs--allvariants",
        "name": "AllVariants",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "AllVariants",
        "description": ""
      },
      {
        "id": "Components/Tabs--badgestatesshowcase",
        "name": "BadgeStatesShowcase",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "BadgeStatesShowcase",
        "description": ""
      },
      {
        "id": "Components/Tabs--commonusecases",
        "name": "CommonUseCases",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "CommonUseCases",
        "description": ""
      },
      {
        "id": "Components/Tabs--accessibilityfeatures",
        "name": "AccessibilityFeatures",
        "title": "Components/Tabs",
        "importPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Tabs",
        "storyName": "AccessibilityFeatures",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Tabs/Tabs.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as TabsStories from './Tabs.stories';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from './Tabs';\n\n<Meta of={TabsStories} />\n\n# Tabs Component\n\nThe Tabs component allows users to navigate between related sections of content, displaying one section at a time while keeping all options visible and accessible.\n\n## Overview\n\nTabs are a fundamental navigation pattern that organizes content into separate views that users can switch between without changing the page. The Tagaddod Tabs component is built on Radix UI primitives to ensure full accessibility while providing flexible design options.\n\nUse Tabs when:\n- Content can be organized into discrete categories\n- Users need to navigate between related sections\n- You want to keep the interface clean and organized\n- Screen space is limited and you need to show one view at a time\n\n## Import\n\n```jsx\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@tagaddod/react';\n```\n\n## Component Structure\n\nThe Tabs component consists of four main parts:\n\n1. **Tabs** - The container that provides context to its children\n2. **TabsList** - The container for the tab triggers\n3. **TabsTrigger** - The clickable buttons that users interact with\n4. **TabsContent** - The content associated with each tab\n\n## Props\n\n### Tabs Props\n\n<ArgTypes of={Tabs} />\n\n### TabsTrigger Props\n\n<ArgTypes of={TabsTrigger} />\n\n### TabsContent Props\n\n<ArgTypes of={TabsContent} />\n\n## Basic Usage\n\n<Canvas of={TabsStories.Default} />\n\n```jsx\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@tagaddod/react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Content tabs\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab one content\n    </div>\n  </TabsContent>\n  <TabsContent value=\"tab2\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab two content\n    </div>\n  </TabsContent>\n  <TabsContent value=\"tab3\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab three content\n    </div>\n  </TabsContent>\n</Tabs>\n```\n\n## Variants\n\n### Primary Tabs\n\nThe primary variant is the default, featuring an underline indicator.\n\n<Canvas of={TabsStories.Primary} />\n\n```jsx\n<Tabs variant=\"primary\" defaultValue=\"tab1\" ariaLabel=\"Primary tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Primary variant - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>\n```\n\n### Secondary Tabs\n\nThe secondary variant has a more subtle appearance with background highlighting.\n\n<Canvas of={TabsStories.Secondary} />\n\n```jsx\n<Tabs variant=\"secondary\" defaultValue=\"tab1\" ariaLabel=\"Secondary tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Secondary variant - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>\n```\n\n## Layout Options\n\n### Standard Tabs\n\nBy default, tabs take up only the space needed for their content.\n\n<Canvas of={TabsStories.Default} />\n\n### Fitted Tabs\n\nFitted tabs distribute evenly across the available width, making them suitable for full-width containers.\n\n<Canvas of={TabsStories.Fitted} />\n\n```jsx\n<Tabs fitted defaultValue=\"tab1\" ariaLabel=\"Fitted tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Fitted tabs - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>\n```\n\n### Vertical Orientation\n\nFor certain interfaces, tabs can be displayed vertically.\n\n<Canvas of={TabsStories.VerticalOrientation} />\n\n```jsx\n<Tabs \n  orientation=\"vertical\" \n  variant=\"secondary\"\n  defaultValue=\"tab1\" \n  ariaLabel=\"Vertical tabs example\"\n>\n  <div style={{ display: 'flex', gap: '20px' }}>\n    <TabsList style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n      <TabsTrigger value=\"tab1\">Account</TabsTrigger>\n      <TabsTrigger value=\"tab2\">Security</TabsTrigger>\n      <TabsTrigger value=\"tab3\">Notifications</TabsTrigger>\n    </TabsList>\n    <div style={{ flex: 1 }}>\n      <TabsContent value=\"tab1\">\n        <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px', minHeight: '150px' }}>\n          <h3>Account Settings</h3>\n          <p>Manage your account information.</p>\n        </div>\n      </TabsContent>\n      {/* Other tab contents */}\n    </div>\n  </div>\n</Tabs>\n```\n\n## Tab Features\n\n### With Badge\n\nAdd badges to indicate counts or status.\n\n<Canvas of={TabsStories.WithBadge} />\n\n```jsx\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with badge\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\" badge=\"3\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n### With Icon\n\nInclude icons to visually represent tab content.\n\n<Canvas of={TabsStories.WithIcon} />\n\n```jsx\nimport { IconHome, IconUser, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with icons\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>Home</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconUser size={18} />}>Profile</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>Settings</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n### With Icon and Badge\n\nCombine icons and badges for rich tab indicators.\n\n<Canvas of={TabsStories.WithIconAndBadge} />\n\n```jsx\nimport { IconHome, IconBell, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with icons and badge\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>Home</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconBell size={18} />} badge=\"5\">Notifications</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>Settings</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n### Disabled Tab\n\nDisable specific tabs that are currently unavailable.\n\n<Canvas of={TabsStories.DisabledTab} />\n\n```jsx\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with disabled tab\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\" disabled>Tab 2 (Disabled)</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n## Tab Count Options\n\nThe Tabs component supports 2-6 tabs with optimized styling for each configuration.\n\n### Two Tabs\n\n<Canvas of={TabsStories.Count2} />\n\n```jsx\n<Tabs count={2} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n### Four Tabs\n\n<Canvas of={TabsStories.Count4} />\n\n```jsx\n<Tabs count={4} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n    <TabsTrigger value=\"tab4\">Tab 4</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n### Six Tabs\n\n<Canvas of={TabsStories.Count6} />\n\n```jsx\n<Tabs count={6} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n    <TabsTrigger value=\"tab4\">Tab 4</TabsTrigger>\n    <TabsTrigger value=\"tab5\">Tab 5</TabsTrigger>\n    <TabsTrigger value=\"tab6\">Tab 6</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n## Internationalization\n\nThe Tabs component properly handles Right-to-Left (RTL) languages.\n\n<Canvas of={TabsStories.RTL} />\n\n```jsx\n<Tabs dir=\"rtl\" defaultValue=\"tab1\" ariaLabel=\"RTL tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>الرئيسية</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconUser size={18} />} badge=\"3\">الملف الشخصي</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>الإعدادات</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      محتوى التبويب الأول\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>\n```\n\n## Controlled vs Uncontrolled\n\n### Uncontrolled\n\nUse the `defaultValue` prop for uncontrolled tabs.\n\n```jsx\n<Tabs defaultValue=\"tab1\">\n  {/* Tabs content */}\n</Tabs>\n```\n\n### Controlled\n\nFor more control, manage the state yourself and use the `value` and `onValueChange` props.\n\n```jsx\nimport { useState } from 'react';\n\nfunction ControlledTabs() {\n  const [activeTab, setActiveTab] = useState('tab1');\n  \n  return (\n    <Tabs \n      value={activeTab} \n      onValueChange={setActiveTab}\n    >\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"tab1\">Tab 1 Content</TabsContent>\n      <TabsContent value=\"tab2\">Tab 2 Content</TabsContent>\n      <TabsContent value=\"tab3\">Tab 3 Content</TabsContent>\n      \n      <div style={{ marginTop: '16px' }}>\n        <p>Current tab: {activeTab}</p>\n        <button onClick={() => setActiveTab('tab1')}>Go to Tab 1</button>\n        <button onClick={() => setActiveTab('tab2')}>Go to Tab 2</button>\n        <button onClick={() => setActiveTab('tab3')}>Go to Tab 3</button>\n      </div>\n    </Tabs>\n  );\n}\n```\n\n## Common Use Cases\n\n### Navigation Tabs\n\n<Canvas of={TabsStories.CommonUseCases} />\n\n```jsx\nimport { IconHome, IconUser, IconMessage, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"home\" variant=\"primary\" fitted ariaLabel=\"Main navigation\">\n  <TabsList>\n    <TabsTrigger value=\"home\" icon={<IconHome size={18} />} description=\"View your dashboard\">Home</TabsTrigger>\n    <TabsTrigger value=\"profile\" icon={<IconUser size={18} />} description=\"View and edit your profile\">Profile</TabsTrigger>\n    <TabsTrigger value=\"messages\" icon={<IconMessage size={18} />} badge=\"3\" description=\"Read your messages\">Messages</TabsTrigger>\n    <TabsTrigger value=\"settings\" icon={<IconSettings size={18} />} description=\"Configure your account settings\">Settings</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"home\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Welcome to the Dashboard</h4>\n      <p>This is the main view of your application.</p>\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>\n```\n\n### Form Sections\n\nOrganize multi-step forms into logical sections.\n\n```jsx\n<Tabs defaultValue=\"personal\" variant=\"secondary\" ariaLabel=\"Registration form sections\">\n  <TabsList>\n    <TabsTrigger value=\"personal\" description=\"Fill in personal information\">Personal Info</TabsTrigger>\n    <TabsTrigger value=\"address\" description=\"Fill in address details\">Address</TabsTrigger>\n    <TabsTrigger value=\"payment\" description=\"Add payment information\">Payment</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"personal\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Personal Information</h4>\n      <form>\n        <label htmlFor=\"name\">Full Name</label>\n        <input id=\"name\" name=\"name\" type=\"text\" />\n        \n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" />\n        \n        <label htmlFor=\"phone\">Phone</label>\n        <input id=\"phone\" name=\"phone\" type=\"tel\" />\n      </form>\n    </div>\n  </TabsContent>\n  {/* Other form sections */}\n</Tabs>\n```\n\n### Settings Panel with Vertical Tabs\n\nCreate a vertical navigation panel for settings.\n\n```jsx\n<Tabs defaultValue=\"account\" variant=\"secondary\" orientation=\"vertical\" ariaLabel=\"Settings navigation\">\n  <div style={{ display: 'flex', gap: '20px' }}>\n    <TabsList style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n      <TabsTrigger value=\"account\" icon={<IconUser size={18} />} description=\"Manage account settings\">Account</TabsTrigger>\n      <TabsTrigger value=\"security\" icon={<IconSettings size={18} />} description=\"Adjust security options\">Security</TabsTrigger>\n      <TabsTrigger value=\"notifications\" icon={<IconBell size={18} />} badge=\"2\" description=\"Configure notifications\">Notifications</TabsTrigger>\n    </TabsList>\n    <div style={{ flex: 1 }}>\n      <TabsContent value=\"account\">\n        <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px', minHeight: '200px' }}>\n          <h4>Account Settings</h4>\n          <p>Manage your account information, profile picture, and personal details.</p>\n        </div>\n      </TabsContent>\n      {/* Other tab contents */}\n    </div>\n  </div>\n</Tabs>\n```\n\n### Dashboard Metrics\n\nDisplay different metrics in a dashboard.\n\n```jsx\n<Tabs defaultValue=\"overview\" fitted ariaLabel=\"Dashboard metrics\">\n  <TabsList>\n    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n    <TabsTrigger value=\"sales\">Sales</TabsTrigger>\n    <TabsTrigger value=\"traffic\" badge=\"↑12%\">Traffic</TabsTrigger>\n    <TabsTrigger value=\"conversion\">Conversion</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"overview\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Dashboard Overview</h4>\n      {/* Overview metrics and charts */}\n    </div>\n  </TabsContent>\n  {/* Other metric contents */}\n</Tabs>\n```\n\n## Accessibility\n\n<Canvas of={TabsStories.AccessibilityFeatures} />\n\nThe Tabs component follows accessibility best practices:\n\n- **WAI-ARIA Compliance**: Uses appropriate ARIA roles, states, and properties:\n  - `role=\"tablist\"` for the tab container\n  - `role=\"tab\"` for individual tabs\n  - `role=\"tabpanel\"` for tab content\n  - `aria-selected` to indicate the selected tab\n  - `aria-controls` to associate tabs with their panels\n  - `aria-labelledby` to associate panels with their tabs\n\n- **Keyboard Navigation**:\n  - `Tab` to move focus to the tab list\n  - `Arrow keys` to navigate between tabs\n  - `Space/Enter` to select a tab\n  - `Home/End` to jump to the first/last tab\n\n- **Focus Management**:\n  - When a tab is activated, focus automatically moves to the associated panel\n  - Clear focus indicators for keyboard users\n  - Proper tab order for logical navigation\n\n- **Screen Reader Support**:\n  - Each tab can include a `description` for additional screen reader context\n  - Proper labeling of the tab list with `ariaLabel` or `ariaLabelledby` \n  - Appropriate announcement of tab selection changes\n\n- **Motion Sensitivity**:\n  - Animations respect the `prefers-reduced-motion` setting\n  - Subtle transitions that don't cause distraction\n\n- **RTL Support**:\n  - Full right-to-left language support\n  - Appropriate arrow key direction reversal in RTL mode\n\nExample with accessible description for screen readers:\n\n```jsx\n<Tabs \n  defaultValue=\"account\" \n  variant=\"primary\" \n  ariaLabel=\"Account management tabs\"\n>\n  <TabsList>\n    <TabsTrigger \n      value=\"account\" \n      description=\"View and edit your account information\"\n    >\n      Account Info\n    </TabsTrigger>\n    <TabsTrigger \n      value=\"password\" \n      description=\"Change your account password\"\n    >\n      Password\n    </TabsTrigger>\n    <TabsTrigger \n      value=\"preferences\" \n      description=\"Manage your email and notification settings\"\n    >\n      Preferences\n    </TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe Tabs component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-font-family-primary` | Font family |\n| `--t-font-size-*` | Font sizes for different elements |\n| `--t-font-weight-*` | Font weights |\n| `--t-color-text-*` | Text colors |\n| `--t-color-border-*` | Border colors |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-fill-*` | Brand colors |\n| `--t-color-badge-*` | Badge colors |\n| `--t-border-radius-*` | Border radius |\n| `--t-duration-*` | Animation duration |\n| `--t-easing-*` | Animation timing functions |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Animations\n\nThe Tabs component includes several animations that enhance the user experience:\n\n- **Tab Indicator**: The active indicator smoothly transitions between tabs\n- **Content Fade**: Tab content fades in when activated\n- **Hover Effects**: Subtle background and color changes on hover\n- **Selection Animation**: Smooth transitions when a tab is selected\n- **Badge State Changes**: Badge appearance changes with tab states\n\nAll animations respect the user's `prefers-reduced-motion` setting.\n\n<Canvas of={TabsStories.AnimationShowcase} />\n\n### Badge States\n\nBadge styling changes based on the tab state:\n\n<Canvas of={TabsStories.BadgeStatesShowcase} />\n\n### Technical Architecture\n\nThe Tabs component is built on Radix UI's primitives and includes:\n\n- **State Management**: Tab selection state\n- **Event Handling**: Click handlers and keyboard interactions\n- **Composition**: Multiple sub-components (TabsList, TabsTrigger, TabsContent)\n- **Styling**: CSS modules with proper scoping\n- **Accessibility**: ARIA attributes and keyboard navigation\n- **Internationalization**: RTL support and dynamic line height\n\n### Browser Support\n\nThe Tabs component is compatible with all modern browsers:\n\n- Chrome (latest)\n- Firefox (latest)\n- Safari (latest)\n- Edge (latest)\n- Mobile browsers (iOS Safari, Android Chrome)\n\nRTL language support works across all supported browsers.\n\n## Best Practices\n\n1. **Use clear labels**: Keep tab labels short and descriptive\n2. **Include icons**: When appropriate, use icons to enhance recognition\n3. **Order logically**: Arrange tabs in a logical sequence or priority order\n4. **Limit tab count**: Aim for 2-6 tabs; use other navigation for more options\n5. **Match content height**: Try to keep content panels a similar height to prevent jarring layout shifts\n6. **Maintain context**: Ensure users don't lose their place when switching tabs\n7. **Preserve state**: When using controlled tabs, preserve content state between tab switches\n8. **Be responsive**: Consider how tabs will behave on different screen sizes\n9. **Badge appropriately**: Use badges for counts or status indicators, not decorative purposes\n10. **Horizontal vs vertical**: Choose horizontal tabs for top-level navigation and vertical tabs for settings or sections with many options\n",
    "componentInfo": {
      "props": {},
      "description": "Tabs Component",
      "usage": [
        "import { Tabs, TabsList, TabsTrigger, TabsContent } from '@tagaddod/react';",
        "import { Tabs, TabsList, TabsTrigger, TabsContent } from '@tagaddod/react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Content tabs\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab one content\n    </div>\n  </TabsContent>\n  <TabsContent value=\"tab2\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab two content\n    </div>\n  </TabsContent>\n  <TabsContent value=\"tab3\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Tab three content\n    </div>\n  </TabsContent>\n</Tabs>",
        "<Tabs variant=\"primary\" defaultValue=\"tab1\" ariaLabel=\"Primary tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Primary variant - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>",
        "<Tabs variant=\"secondary\" defaultValue=\"tab1\" ariaLabel=\"Secondary tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Secondary variant - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>",
        "<Tabs fitted defaultValue=\"tab1\" ariaLabel=\"Fitted tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      Fitted tabs - Tab one content\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>",
        "<Tabs \n  orientation=\"vertical\" \n  variant=\"secondary\"\n  defaultValue=\"tab1\" \n  ariaLabel=\"Vertical tabs example\"\n>\n  <div style={{ display: 'flex', gap: '20px' }}>\n    <TabsList style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n      <TabsTrigger value=\"tab1\">Account</TabsTrigger>\n      <TabsTrigger value=\"tab2\">Security</TabsTrigger>\n      <TabsTrigger value=\"tab3\">Notifications</TabsTrigger>\n    </TabsList>\n    <div style={{ flex: 1 }}>\n      <TabsContent value=\"tab1\">\n        <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px', minHeight: '150px' }}>\n          <h3>Account Settings</h3>\n          <p>Manage your account information.</p>\n        </div>\n      </TabsContent>\n      {/* Other tab contents */}\n    </div>\n  </div>\n</Tabs>",
        "<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with badge\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\" badge=\"3\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "import { IconHome, IconUser, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with icons\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>Home</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconUser size={18} />}>Profile</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>Settings</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "import { IconHome, IconBell, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with icons and badge\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>Home</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconBell size={18} />} badge=\"5\">Notifications</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>Settings</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "<Tabs defaultValue=\"tab1\" ariaLabel=\"Tabs with disabled tab\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\" disabled>Tab 2 (Disabled)</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "<Tabs count={2} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "<Tabs count={4} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n    <TabsTrigger value=\"tab4\">Tab 4</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "<Tabs count={6} defaultValue=\"tab1\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n    <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n    <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n    <TabsTrigger value=\"tab4\">Tab 4</TabsTrigger>\n    <TabsTrigger value=\"tab5\">Tab 5</TabsTrigger>\n    <TabsTrigger value=\"tab6\">Tab 6</TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>",
        "<Tabs dir=\"rtl\" defaultValue=\"tab1\" ariaLabel=\"RTL tabs example\">\n  <TabsList>\n    <TabsTrigger value=\"tab1\" icon={<IconHome size={18} />}>الرئيسية</TabsTrigger>\n    <TabsTrigger value=\"tab2\" icon={<IconUser size={18} />} badge=\"3\">الملف الشخصي</TabsTrigger>\n    <TabsTrigger value=\"tab3\" icon={<IconSettings size={18} />}>الإعدادات</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"tab1\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      محتوى التبويب الأول\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>",
        "<Tabs defaultValue=\"tab1\">\n  {/* Tabs content */}\n</Tabs>",
        "import { useState } from 'react';\n\nfunction ControlledTabs() {\n  const [activeTab, setActiveTab] = useState('tab1');\n  \n  return (\n    <Tabs \n      value={activeTab} \n      onValueChange={setActiveTab}\n    >\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"tab1\">Tab 1 Content</TabsContent>\n      <TabsContent value=\"tab2\">Tab 2 Content</TabsContent>\n      <TabsContent value=\"tab3\">Tab 3 Content</TabsContent>\n      \n      <div style={{ marginTop: '16px' }}>\n        <p>Current tab: {activeTab}</p>\n        <button onClick={() => setActiveTab('tab1')}>Go to Tab 1</button>\n        <button onClick={() => setActiveTab('tab2')}>Go to Tab 2</button>\n        <button onClick={() => setActiveTab('tab3')}>Go to Tab 3</button>\n      </div>\n    </Tabs>\n  );\n}",
        "import { IconHome, IconUser, IconMessage, IconSettings } from '@tabler/icons-react';\n\n<Tabs defaultValue=\"home\" variant=\"primary\" fitted ariaLabel=\"Main navigation\">\n  <TabsList>\n    <TabsTrigger value=\"home\" icon={<IconHome size={18} />} description=\"View your dashboard\">Home</TabsTrigger>\n    <TabsTrigger value=\"profile\" icon={<IconUser size={18} />} description=\"View and edit your profile\">Profile</TabsTrigger>\n    <TabsTrigger value=\"messages\" icon={<IconMessage size={18} />} badge=\"3\" description=\"Read your messages\">Messages</TabsTrigger>\n    <TabsTrigger value=\"settings\" icon={<IconSettings size={18} />} description=\"Configure your account settings\">Settings</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"home\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Welcome to the Dashboard</h4>\n      <p>This is the main view of your application.</p>\n    </div>\n  </TabsContent>\n  {/* Other tab contents */}\n</Tabs>",
        "<Tabs defaultValue=\"personal\" variant=\"secondary\" ariaLabel=\"Registration form sections\">\n  <TabsList>\n    <TabsTrigger value=\"personal\" description=\"Fill in personal information\">Personal Info</TabsTrigger>\n    <TabsTrigger value=\"address\" description=\"Fill in address details\">Address</TabsTrigger>\n    <TabsTrigger value=\"payment\" description=\"Add payment information\">Payment</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"personal\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Personal Information</h4>\n      <form>\n        <label htmlFor=\"name\">Full Name</label>\n        <input id=\"name\" name=\"name\" type=\"text\" />\n        \n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" />\n        \n        <label htmlFor=\"phone\">Phone</label>\n        <input id=\"phone\" name=\"phone\" type=\"tel\" />\n      </form>\n    </div>\n  </TabsContent>\n  {/* Other form sections */}\n</Tabs>",
        "<Tabs defaultValue=\"account\" variant=\"secondary\" orientation=\"vertical\" ariaLabel=\"Settings navigation\">\n  <div style={{ display: 'flex', gap: '20px' }}>\n    <TabsList style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n      <TabsTrigger value=\"account\" icon={<IconUser size={18} />} description=\"Manage account settings\">Account</TabsTrigger>\n      <TabsTrigger value=\"security\" icon={<IconSettings size={18} />} description=\"Adjust security options\">Security</TabsTrigger>\n      <TabsTrigger value=\"notifications\" icon={<IconBell size={18} />} badge=\"2\" description=\"Configure notifications\">Notifications</TabsTrigger>\n    </TabsList>\n    <div style={{ flex: 1 }}>\n      <TabsContent value=\"account\">\n        <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px', minHeight: '200px' }}>\n          <h4>Account Settings</h4>\n          <p>Manage your account information, profile picture, and personal details.</p>\n        </div>\n      </TabsContent>\n      {/* Other tab contents */}\n    </div>\n  </div>\n</Tabs>",
        "<Tabs defaultValue=\"overview\" fitted ariaLabel=\"Dashboard metrics\">\n  <TabsList>\n    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n    <TabsTrigger value=\"sales\">Sales</TabsTrigger>\n    <TabsTrigger value=\"traffic\" badge=\"↑12%\">Traffic</TabsTrigger>\n    <TabsTrigger value=\"conversion\">Conversion</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"overview\">\n    <div style={{ padding: '16px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>\n      <h4>Dashboard Overview</h4>\n      {/* Overview metrics and charts */}\n    </div>\n  </TabsContent>\n  {/* Other metric contents */}\n</Tabs>",
        "<Tabs \n  defaultValue=\"account\" \n  variant=\"primary\" \n  ariaLabel=\"Account management tabs\"\n>\n  <TabsList>\n    <TabsTrigger \n      value=\"account\" \n      description=\"View and edit your account information\"\n    >\n      Account Info\n    </TabsTrigger>\n    <TabsTrigger \n      value=\"password\" \n      description=\"Change your account password\"\n    >\n      Password\n    </TabsTrigger>\n    <TabsTrigger \n      value=\"preferences\" \n      description=\"Manage your email and notification settings\"\n    >\n      Preferences\n    </TabsTrigger>\n  </TabsList>\n  {/* Tab contents */}\n</Tabs>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Table",
    "stories": [
      {
        "id": "Components/Table--playground",
        "name": "Playground",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "Playground",
        "description": ""
      },
      {
        "id": "Components/Table--example",
        "name": "Example",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "Example",
        "description": ""
      },
      {
        "id": "Components/Table--cellvariants",
        "name": "CellVariants",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "CellVariants",
        "description": ""
      },
      {
        "id": "Components/Table--tablestates",
        "name": "TableStates",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "TableStates",
        "description": ""
      },
      {
        "id": "Components/Table--withexport",
        "name": "WithExport",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "WithExport",
        "description": ""
      },
      {
        "id": "Components/Table--stripedtable",
        "name": "StripedTable",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "StripedTable",
        "description": ""
      },
      {
        "id": "Components/Table--gridtable",
        "name": "GridTable",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "GridTable",
        "description": ""
      },
      {
        "id": "Components/Table--tabbedtable",
        "name": "TabbedTable",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "TabbedTable",
        "description": ""
      },
      {
        "id": "Components/Table--statictable",
        "name": "StaticTable",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "StaticTable",
        "description": ""
      },
      {
        "id": "Components/Table--columnmanagement",
        "name": "ColumnManagement",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "ColumnManagement",
        "description": ""
      },
      {
        "id": "Components/Table--advancedfilters",
        "name": "AdvancedFilters",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "AdvancedFilters",
        "description": ""
      },
      {
        "id": "Components/Table--errorrowhighlighting",
        "name": "ErrorRowHighlighting",
        "title": "Components/Table",
        "importPath": "../packages/react/src/components/Table/Table.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Table",
        "storyName": "ErrorRowHighlighting",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Table/Table.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as TableStories from './Table.stories';\nimport { Table } from './Table';\n\n<Meta of={TableStories} />\n\n# Table Component\n\nThe Table component is a powerful, feature-rich data display component built on TanStack Table, offering extensive customization options including sorting, filtering, pagination, tabbed interfaces, column ordering, and column resizing.\n\n## Overview\n\nThe Tagaddod Table component provides an intuitive way to display structured data with advanced features such as:\n\n- Column sorting\n- Text search and filtering\n- Pagination\n- Tabbed interfaces\n- **Column ordering** with drag and drop\n- **Column resizing** with interactive handles\n- Customizable row styling\n- Export functionality\n- Error, loading, and empty states\n- RTL language support\n\nThis component is ideal for data-heavy applications where users need to view, sort, search, and interact with structured information.\n\n## Import\n\n```jsx\n// Basic table import\nimport { Table } from '@tagaddod/react';\n\n// Cell variants imports\nimport { \n  Table, \n  QuickColumns, \n  createCellColumn, \n  createInteractiveCellColumn, \n  createActionCellColumn,\n  createCustomCellColumn,\n  TableCellVariants,\n  CellVariantProps \n} from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Table} />\n\n## Basic Usage\n\n<Canvas of={TableStories.Example} />\n\n```jsx\nimport { Table } from '@tagaddod/react';\nimport { IconEdit, IconTrash } from '@tabler/icons-react';\nimport { Button } from '@tagaddod/react';\n\n// Define column structure\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    size: 80,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Item',\n    size: 250,\n  },\n  {\n    accessorKey: 'stockCollectors',\n    header: 'Dispatched to collectors',\n    size: 150,\n  },\n  {\n    accessorKey: 'stockWarehouse',\n    header: 'Available at warehouse',\n    size: 150,\n  },\n  {\n    id: 'actions',\n    header: '',\n    cell: () => (\n      <div style={{ display: 'flex', gap: '8px' }}>\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"neutral\"\n          prefixIcon={<IconEdit size={16} />}\n          onClick={(e) => {\n            e.stopPropagation();\n            alert('Edit clicked');\n          }}\n        />\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"critical\"\n          prefixIcon={<IconTrash size={16} />}\n          onClick={(e) => {\n            e.stopPropagation();\n            alert('Delete clicked');\n          }}\n        />\n      </div>\n    ),\n  },\n];\n\n// Sample data\nconst data = [\n  {\n    id: 34,\n    name: \"زيت حلوة 700 مل\",\n    stockCollectors: 325,\n    stockWarehouse: 325,\n  },\n  // Additional rows...\n];\n\n// Render the table\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  striped={true}\n  gridCells={false}\n  showHeader={true}\n  onRowClick={(row) => console.log('Row clicked:', row.original)}\n/>\n```\n\n## Error Row Highlighting Demo\n\nDemonstration of error row highlighting with the fill-critical-secondary token:\n\n<Canvas of={TableStories.ErrorRowHighlighting} />\n\n## Table Variants\n\nExplore different table configurations through these comprehensive examples:\n\n### Striped Table\n<Canvas of={TableStories.StripedTable} />\n\n### Grid Table  \n<Canvas of={TableStories.GridTable} />\n\n### Tabbed Table\n<Canvas of={TableStories.TabbedTable} />\n\n### Static Table\n<Canvas of={TableStories.StaticTable} />\n\n\n## Column Management Features\n\nThe Table component includes advanced column management capabilities that allow users to customize their data view through interactive column ordering and resizing.\n\n### Column Ordering\n\nColumn ordering allows users to reorder table columns by dragging and dropping them. This feature is **disabled by default** and must be explicitly enabled via the `enableColumnOrdering` prop. It is built using @dnd-kit for modern, accessible drag and drop interactions.\n\n#### Basic Implementation\n\n```jsx\nimport { Table } from '@tagaddod/react';\n\nconst columns = [\n  {\n    id: 'name',        // Important: Provide unique IDs for all columns\n    accessorKey: 'name',\n    header: 'Name',\n    size: 200,\n  },\n  {\n    id: 'email',\n    accessorKey: 'email', \n    header: 'Email',\n    size: 250,\n  },\n  // ... more columns\n];\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Users Table\"\n  enableColumnOrdering={true}  // Enable column ordering\n/>\n```\n\n#### Key Features\n\n- **Default State**: Column ordering is disabled by default (`enableColumnOrdering={false}`)\n- **Drag Handles**: When enabled, hover over column headers to reveal drag handles (⋮⋮⋮)\n- **Visual Feedback**: Columns show visual feedback during drag operations\n- **Keyboard Accessible**: Use Tab + Arrow keys + Space for reordering\n- **Automatic Persistence**: Column order state is maintained during table interactions\n- **RTL Support**: Proper handling for right-to-left languages\n\n#### Best Practices\n\n- Always provide unique `id` properties for columns\n- Use descriptive column IDs that won't conflict\n- Consider disabling column ordering for tables with many interactive cell variants\n\n### Column Resizing  \n\nColumn resizing enables users to adjust column widths by dragging resize handles that appear on column borders. This feature is **disabled by default** and must be explicitly enabled via the `enableColumnResizing` prop.\n\n#### Configuration\n\n```jsx\nimport { Table } from '@tagaddod/react';\n\nconst columns = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    size: 200,           // Initial width\n    minSize: 100,        // Minimum width\n    maxSize: 400,        // Maximum width\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email', \n    size: 250,\n    minSize: 150,\n    maxSize: 500,\n  },\n  {\n    accessorKey: 'actions',\n    header: 'Actions',\n    size: 100,\n    enableResizing: false, // Disable resizing for this column\n  },\n];\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Resizable Table\"\n  enableColumnResizing={true}  // Enable column resizing\n/>\n```\n\n#### Resize Behavior\n\n- **Default State**: Column resizing is disabled by default (`enableColumnResizing={false}`)\n- **Interactive Handles**: When enabled, resize handles appear on hover at column borders\n- **Real-time Updates**: Column widths update immediately during drag\n- **Constraints**: Respects `minSize` and `maxSize` boundaries\n- **Visual Indicators**: Active resize handles are highlighted in blue\n- **Touch Support**: Works on touch devices for mobile compatibility\n- **Double-click**: Double-click resize handles to auto-fit column content\n\n#### Column Sizing Properties\n\n| Property | Type | Description |\n|----------|------|-------------|\n| `size` | `number` | Initial column width in pixels |\n| `minSize` | `number` | Minimum allowed width (default: 20px) |\n| `maxSize` | `number` | Maximum allowed width (default: unlimited) |\n| `enableResizing` | `boolean` | Whether column can be resized (default: true) |\n\n#### Advanced Configuration\n\n```jsx\n// Complete column management setup\n<Table\n  data={data}\n  columns={columns}\n  title=\"Advanced Table\"\n  enableColumnOrdering={true}     // Enable column ordering\n  enableColumnResizing={true}     // Enable column resizing\n  gridCells={true}                // Show borders for better visual feedback\n  // RTL direction is automatically detected\n/>\n```\n\n#### Combining Features\n\n```jsx\n// Table with both column ordering and resizing\n<Table\n  data={data}\n  columns={columns}\n  title=\"Full Column Management\"\n  enableColumnOrdering={true}   // Enable column ordering\n  enableColumnResizing={true}   // Enable column resizing\n  showSearch={true}\n  showFilters={true}\n  gridCells={true}  // Recommended for better visual feedback\n/>\n```\n\n#### Column Management Summary\n\n| Feature | Default State | How to Enable |\n|---------|---------------|---------------|\n| **Column Ordering** | ❌ Disabled | `enableColumnOrdering={true}` |\n| **Column Resizing** | ❌ Disabled | `enableColumnResizing={true}` |\n\n**Best Practices:**\n- Use `gridCells={true}` when enabling column management features for better visual feedback\n- Column ordering works best with unique column IDs\n- Both features are disabled by default for better performance\n- Consider performance impact with many columns (50+) when enabling both features\n\nUse the controls panel below to:\n- Toggle features on/off (search, filters, pagination, tabs, etc.)\n- Switch between different table states (normal, error, empty, etc.)\n- Change direction (LTR/RTL)\n- Configure tab behavior\n- Modify display options\n\n## Cell Variants\n\nThe Table component includes a comprehensive cell variants system that makes it easy to create consistent, interactive table cells. This system provides predefined cell types and helper functions for common use cases.\n\n<Canvas of={TableStories.CellVariants} />\n\n### How to Create Table Cells\n\nThe Table component provides three main approaches for creating table cells, from simple to fully custom:\n\n#### 1. **Quick Columns (Simplest)**\nFor standard cases, use the `QuickColumns` helper:\n```jsx\nimport { QuickColumns } from '@tagaddod/react';\n\nconst columns = [\n  QuickColumns.text('name', 'Name'),              // Simple text\n  QuickColumns.badge('status', 'Status'),         // Status badges\n  QuickColumns.number('amount', 'Amount'),        // Formatted numbers\n  QuickColumns.checkbox('selected', 'Select', handleSelection),\n  QuickColumns.actions('Actions', handleAction), // Action buttons\n];\n```\n\n#### 2. **Pre-built Cell Variants (Flexible)**\nFor more control, use specific cell variant functions:\n```jsx\nimport { createCellColumn, createInteractiveCellColumn } from '@tagaddod/react';\n\nconst columns = [\n  createCellColumn('description', 'Description', 'textMultiline'),\n  createCellColumn('tags', 'Tags', 'badgeMultiple'),\n  createInteractiveCellColumn('priority', 'Priority', 'select', handleChange, {\n    cellProps: { options: [{ label: 'High', value: 'high' }] }\n  }),\n];\n```\n\n#### 3. **Custom Cell Components (Full Control)**\nFor unique requirements, create completely custom cells:\n```jsx\nimport { createCustomCellColumn, CellVariantProps } from '@tagaddod/react';\n\nconst CustomCell: React.FC<CellVariantProps<any>> = ({ value, row, onChange }) => {\n  // Your custom cell implementation with any design system component\n  return <YourCustomDesign value={value} />;\n};\n\nconst columns = [\n  createCustomCellColumn('custom', 'Custom', CustomCell),\n];\n```\n\n### Available Cell Variants\n\nThe table supports **13 predefined cell variants** that you can use with `createCellColumn`:\n\n| Variant Type | Cell Variant Name | Description | Data Type |\n|--------------|-------------------|-------------|-----------|\n| **Text** | `textSingleLine` | Basic text display with RTL support | `string` |\n| **Text** | `textMultiline` | Multi-line text with proper line breaks | `string` (with `\\n`) |\n| **Text** | `textTruncated` | Text with ellipsis and tooltip on overflow | `string` |\n| **Text** | `textSingleLineWithBadge` | Text with optional badge and prefix icon | `{text: string, badge?: string, badgeVariant?: string, prefixIcon?: ReactNode}` |\n| **Badge** | `badge` | Single status badge with tone | `{text: string, tone?: 'success' \\| 'warning' \\| ...}` |\n| **Badge** | `badgeMultiple` | Multiple badges in one cell | `Array<{text: string, tone?: string}>` |\n| **Interactive** | `checkbox` | Interactive checkbox for selection | `boolean` |\n| **Interactive** | `radioButton` | Radio button group for exclusive selection | `string` + options |\n| **Interactive** | `select` | Dropdown selection with options | `string` + options |\n| **Interactive** | `textField` | Editable text input field | `string` |\n| **Data** | `updatedNumber` | Formatted numbers with locale support | `number` or `{primary: number, secondary?: number}` |\n| **Actions** | `actionIcon` | Single or multiple action buttons | Any (uses onClick callback) |\n| **Actions** | `actionDropdownIcon` | Action dropdown menu | `Array<{label: string, onClick: Function}>` |\n\n### Quick Usage with Helper Functions\n\nThe easiest way to use cell variants is with the `QuickColumns` helper:\n\n```jsx\nimport { Table, QuickColumns, createInteractiveCellColumn } from '@tagaddod/react';\n\nconst columns = [\n  QuickColumns.text('name', 'Customer Name'),\n  QuickColumns.badge('status', 'Status'),\n  QuickColumns.checkbox('selected', 'Select', (checked, row) => {\n    console.log(`Row ${row.id} selected: ${checked}`);\n  }),\n  QuickColumns.number('amount', 'Amount'),\n  QuickColumns.actions('Actions', (row) => {\n    console.log('Action clicked for:', row);\n  }),\n];\n```\n\n### Advanced Cell Variant Usage\n\nFor more control, use the detailed helper functions:\n\n```jsx\nimport { \n  createCellColumn, \n  createInteractiveCellColumn, \n  createActionCellColumn \n} from '@tagaddod/react';\n\nconst columns = [\n  // Text variants\n  createCellColumn('customer', 'Customer', 'textSingleLine'),\n  createCellColumn('description', 'Description', 'textMultiline'),\n  \n  // Badge variants\n  createCellColumn('status', 'Status', 'badge'),\n  createCellColumn('tags', 'Tags', 'badgeMultiple'),\n  \n  // Interactive variants\n  createInteractiveCellColumn('priority', 'Priority', 'select', handlePriorityChange, {\n    cellProps: { \n      options: [\n        { label: 'High', value: 'high' },\n        { label: 'Medium', value: 'medium' },\n        { label: 'Low', value: 'low' }\n      ]\n    }\n  }),\n  \n  createInteractiveCellColumn('approved', 'Approved', 'checkbox', handleApprovalChange),\n  \n  createInteractiveCellColumn('notes', 'Notes', 'textField', handleNotesChange, {\n    cellProps: { placeholder: 'Add notes...' }\n  }),\n  \n  // Action variants\n  createActionCellColumn('Actions', 'actionIcon', handleRowAction),\n  createActionCellColumn('More', 'actionDropdownIcon', () => {}, {\n    actions: [\n      { label: 'Edit', onClick: (row) => editRow(row) },\n      { label: 'Delete', onClick: (row) => deleteRow(row) },\n      { label: 'View Details', onClick: (row) => viewDetails(row) }\n    ]\n  })\n];\n```\n\n### Data Structure for Cell Variants\n\nDifferent cell variants expect specific data structures:\n\n```jsx\nconst salesData = [\n  {\n    id: 1,\n    customer: 'Olivia Rhye',                                    // textSingleLine\n    description: 'Premium customer with\\nmultiple orders',      // textMultiline\n    status: { text: 'Active', tone: 'success' },               // badge\n    tags: [                                                     // badgeMultiple\n      { text: 'VIP', tone: 'success' },\n      { text: 'Premium', tone: 'info' }\n    ],\n    selected: true,                                             // checkbox\n    priority: 'high',                                           // select/radioButton\n    amount: 2400.50,                                            // updatedNumber\n    notes: 'Important client'                                   // textField\n  }\n];\n```\n\n### Creating Custom Cell Variants\n\nYou can create completely custom cell variants using the `createCustomCellColumn` helper. This gives you full control over the cell's appearance and behavior while maintaining consistency with the table system.\n\n#### Example 1: Progress Bar Cell\n\n```jsx\nimport { createCustomCellColumn, CellVariantProps } from '@tagaddod/react';\n\n// Create custom progress bar cell\nconst ProgressBarCell: React.FC<CellVariantProps<number>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-100)',\n      width: '100%'\n    }}>\n      <div style={{ \n        flex: 1,\n        height: '8px', \n        backgroundColor: 'var(--t-color-surface-tertiary)', \n        borderRadius: 'var(--t-border-radius-sm)',\n        overflow: 'hidden'\n      }}>\n        <div \n          style={{ \n            width: `${value || 0}%`, \n            height: '100%', \n            backgroundColor: 'var(--t-color-fill-brand-primary)', \n            transition: 'width 0.3s ease'\n          }} \n        />\n      </div>\n      <span style={{ \n        fontSize: 'var(--t-font-size-sm)',\n        fontWeight: 'var(--t-font-weight-medium)',\n        color: 'var(--t-color-text-secondary)',\n        minWidth: '32px',\n        textAlign: isRTL ? 'left' : 'right'\n      }}>\n        {value || 0}%\n      </span>\n    </div>\n  );\n};\n\n// Use in column definition\nconst columns = [\n  createCustomCellColumn('completion', 'Progress', ProgressBarCell),\n];\n```\n\n#### Example 2: User Avatar Cell with Two Lines\n\n```jsx\nimport { Avatar } from '@tagaddod/react';\n\ninterface UserCellData {\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\nconst UserAvatarCell: React.FC<CellVariantProps<UserCellData>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-200)'\n    }}>\n      <Avatar \n        src={value?.avatar} \n        fallback={value?.name?.charAt(0) || '?'}\n        size=\"small\"\n      />\n      <div>\n        <div style={{ \n          ...lineHeightStyle,\n          font: 'var(--t-typography-body-sm-medium)',\n          color: 'var(--t-color-text-primary)'\n        }}>\n          {value?.name || '-'}\n        </div>\n        <div style={{ \n          ...lineHeightStyle,\n          font: 'var(--t-typography-body-sm-default)',\n          color: 'var(--t-color-text-secondary)'\n        }}>\n          {value?.email || '-'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Usage with data structure\nconst userData = [\n  {\n    id: 1,\n    user: {\n      name: 'Ahmed Al-Rashid',\n      email: 'ahmed@example.com',\n      avatar: 'https://example.com/avatar1.jpg'\n    },\n    role: 'Admin'\n  }\n];\n\nconst columns = [\n  createCustomCellColumn('user', 'User', UserAvatarCell),\n  QuickColumns.text('role', 'Role'),\n];\n```\n\n#### Example 3: Interactive Rating Cell\n\n```jsx\nimport { useState } from 'react';\nimport { IconStar } from '@tabler/icons-react';\n\nconst RatingCell: React.FC<CellVariantProps<number>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  const [hoveredStar, setHoveredStar] = useState<number | null>(null);\n  \n  const handleStarClick = (rating: number) => {\n    onChange?.(rating, row);\n  };\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      gap: 'var(--t-space-050)'\n    }}>\n      {[1, 2, 3, 4, 5].map((star) => (\n        <IconStar\n          key={star}\n          size={16}\n          style={{\n            cursor: 'pointer',\n            color: (hoveredStar || value || 0) >= star \n              ? 'var(--t-color-fill-warning-primary)' \n              : 'var(--t-color-border-secondary)',\n            fill: (hoveredStar || value || 0) >= star \n              ? 'var(--t-color-fill-warning-primary)' \n              : 'transparent'\n          }}\n          onClick={() => handleStarClick(star)}\n          onMouseEnter={() => setHoveredStar(star)}\n          onMouseLeave={() => setHoveredStar(null)}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Use as interactive cell\nconst columns = [\n  createInteractiveCellColumn('rating', 'Rating', 'custom', handleRatingChange, {\n    cellProps: { CustomComponent: RatingCell }\n  })\n];\n```\n\n#### Example 4: Status Cell with Icon and Color\n\n```jsx\nimport { IconCircleCheck, IconClock, IconAlertTriangle } from '@tabler/icons-react';\n\ninterface StatusCellData {\n  status: 'completed' | 'pending' | 'failed';\n  label: string;\n}\n\nconst StatusIconCell: React.FC<CellVariantProps<StatusCellData>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return {\n          icon: <IconCircleCheck size={16} />,\n          color: 'var(--t-color-text-success)',\n          bgColor: 'var(--t-color-fill-success-secondary)'\n        };\n      case 'pending':\n        return {\n          icon: <IconClock size={16} />,\n          color: 'var(--t-color-text-warning)',\n          bgColor: 'var(--t-color-fill-warning-secondary)'\n        };\n      case 'failed':\n        return {\n          icon: <IconAlertTriangle size={16} />,\n          color: 'var(--t-color-text-critical)',\n          bgColor: 'var(--t-color-fill-critical-secondary)'\n        };\n      default:\n        return {\n          icon: <IconClock size={16} />,\n          color: 'var(--t-color-text-secondary)',\n          bgColor: 'var(--t-color-surface-secondary)'\n        };\n    }\n  };\n  \n  const config = getStatusConfig(value?.status || '');\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-100)',\n      padding: 'var(--t-space-100) var(--t-space-200)',\n      backgroundColor: config.bgColor,\n      borderRadius: 'var(--t-border-radius-sm)',\n      width: 'fit-content'\n    }}>\n      <span style={{ color: config.color, display: 'flex' }}>\n        {config.icon}\n      </span>\n      <span style={{ \n        font: 'var(--t-typography-body-sm-medium)',\n        color: config.color,\n        lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n      }}>\n        {value?.label || '-'}\n      </span>\n    </div>\n  );\n};\n\n// Usage\nconst taskData = [\n  {\n    id: 1,\n    task: 'Setup Database',\n    status: {\n      status: 'completed' as const,\n      label: 'Completed'\n    }\n  }\n];\n\nconst columns = [\n  QuickColumns.text('task', 'Task'),\n  createCustomCellColumn('status', 'Status', StatusIconCell),\n];\n```\n\n### Custom Cells by Importing Other Components\n\nThe Table component works seamlessly with other Tagaddod Design System components. Here are examples of creating custom cells by importing and using existing components:\n\n#### Example 5: Dropdown Actions Cell\n\n```jsx\nimport { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@tagaddod/react';\nimport { Button } from '@tagaddod/react';\nimport { IconDots, IconEdit, IconTrash, IconEye } from '@tabler/icons-react';\n\nconst DropdownActionsCell: React.FC<CellVariantProps<any>> = ({ row }) => {\n  const handleEdit = () => {\n    console.log('Edit:', row);\n  };\n  \n  const handleDelete = () => {\n    console.log('Delete:', row);\n  };\n  \n  const handleView = () => {\n    console.log('View:', row);\n  };\n  \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"neutral\"\n          prefixIcon={<IconDots size={16} />}\n          onClick={(e) => e.stopPropagation()}\n        />\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={handleView}>\n          <IconEye size={16} />\n          View Details\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={handleEdit}>\n          <IconEdit size={16} />\n          Edit\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={handleDelete} destructive>\n          <IconTrash size={16} />\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nconst columns = [\n  QuickColumns.text('name', 'Name'),\n  createCustomCellColumn('actions', 'Actions', DropdownActionsCell),\n];\n```\n\n#### Example 6: Toggle Switch Cell\n\n```jsx\nimport { Switch } from '@tagaddod/react';\n\nconst ToggleSwitchCell: React.FC<CellVariantProps<boolean>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <Switch\n      checked={value || false}\n      onCheckedChange={(checked) => onChange?.(checked, row)}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('feature', 'Feature'),\n  createInteractiveCellColumn('enabled', 'Enabled', 'custom', handleToggleChange, {\n    cellProps: { CustomComponent: ToggleSwitchCell }\n  }),\n];\n```\n\n#### Example 7: Tag Input Cell\n\n```jsx\nimport { TagInput } from '@tagaddod/react';\n\nconst TagInputCell: React.FC<CellVariantProps<string[]>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <TagInput\n      value={value || []}\n      onValueChange={(tags) => onChange?.(tags, row)}\n      placeholder=\"Add tags...\"\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('title', 'Title'),\n  createInteractiveCellColumn('tags', 'Tags', 'custom', handleTagsChange, {\n    cellProps: { CustomComponent: TagInputCell }\n  }),\n];\n```\n\n#### Example 8: Date Picker Cell\n\n```jsx\nimport { DatePicker } from '@tagaddod/react';\n\nconst DatePickerCell: React.FC<CellVariantProps<Date | null>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <DatePicker\n      value={value}\n      onValueChange={(date) => onChange?.(date, row)}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('task', 'Task'),\n  createInteractiveCellColumn('dueDate', 'Due Date', 'custom', handleDateChange, {\n    cellProps: { CustomComponent: DatePickerCell }\n  }),\n];\n```\n\n### Extending the Cell Variants Registry\n\nYou can extend the built-in cell variants registry to add your custom variants and use them with the helper functions:\n\n```jsx\nimport { TableCellVariants } from '@tagaddod/react';\n\n// Add your custom variants to the registry\nconst ExtendedCellVariants = {\n  ...TableCellVariants,\n  progressBar: ProgressBarCell,\n  userAvatar: UserAvatarCell,\n  ratingStars: RatingCell,\n  statusIcon: StatusIconCell,\n  dropdownActions: DropdownActionsCell,\n  toggleSwitch: ToggleSwitchCell,\n};\n\n// Now you can use them with helper functions\nconst columns = [\n  createCellColumn('completion', 'Progress', 'progressBar'),\n  createCellColumn('user', 'User', 'userAvatar'),\n  createInteractiveCellColumn('rating', 'Rating', 'ratingStars', handleRatingChange),\n  createCellColumn('status', 'Status', 'statusIcon'),\n  createCustomCellColumn('actions', 'Actions', 'dropdownActions'),\n];\n```\n\n### Custom Cell Best Practices\n\nWhen creating custom cells, follow these best practices:\n\n#### 1. **RTL Support**\nAlways include RTL detection and proper styling:\n```jsx\nconst isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\nconst lineHeightStyle = {\n  lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n};\n```\n\n#### 2. **Use Design Tokens**\nAlways use design system tokens for consistency:\n```jsx\n// ✅ Good - Using design tokens\ncolor: 'var(--t-color-text-primary)',\npadding: 'var(--t-space-200)',\nborderRadius: 'var(--t-border-radius-sm)',\nfont: 'var(--t-typography-body-sm-default)'\n\n// ❌ Bad - Hard-coded values\ncolor: '#333',\npadding: '8px',\nborderRadius: '4px',\nfont: '14px sans-serif'\n```\n\n#### 3. **Handle Click Events Properly**\nPrevent event bubbling for interactive elements:\n```jsx\n<Button\n  onClick={(e) => {\n    e.stopPropagation(); // Prevent row click when button is clicked\n    handleAction();\n  }}\n/>\n```\n\n#### 4. **Data Type Safety**\nDefine proper TypeScript interfaces for complex data:\n```jsx\ninterface CustomCellData {\n  primary: string;\n  secondary?: string;\n  metadata?: Record<string, any>;\n}\n\nconst CustomCell: React.FC<CellVariantProps<CustomCellData>> = ({ value }) => {\n  // Type-safe access to value properties\n  return <div>{value?.primary || '-'}</div>;\n};\n```\n\n#### 5. **Performance Optimization**\nUse React.memo for complex cells with large datasets:\n```jsx\nimport { memo } from 'react';\n\nconst ExpensiveCustomCell: React.FC<CellVariantProps<ComplexData>> = memo(({ value }) => {\n  // Complex rendering logic\n  return <div>...</div>;\n});\n```\n\n### Cell Variant Props Interface\n\nAll cell variants implement the `CellVariantProps` interface:\n\n```typescript\ninterface CellVariantProps<T = any> {\n  value: T;                                    // The cell value\n  row?: any;                                   // The entire row data\n  onChange?: (value: T, row?: any) => void;    // Change handler for interactive cells\n  onClick?: (row?: any) => void;               // Click handler for action cells\n  options?: Array<{ label: string; value: any }>; // Options for select/radio cells\n  className?: string;                          // Additional CSS classes\n  [key: string]: any;                         // Additional props\n}\n```\n\n### RTL Support in Cell Variants\n\nAll cell variants automatically support RTL languages with proper:\n- Text alignment (right for RTL, left for LTR)\n- Font family switching (Arabic fonts for RTL content)\n- Line height adjustments (optimized for Arabic text)\n- Layout direction (flex-direction, positioning)\n\nThe RTL detection and styling is handled automatically by each cell variant component.\n\n### Important Notes for Cell Variants\n\n#### Select Component Requirements\nWhen using Select or ActionDropdown cell variants, ensure that:\n- All option values are **non-empty strings**\n- Empty string values are automatically filtered out\n- Use meaningful values like `'high'`, `'medium'`, `'low'` instead of `''`\n\n```jsx\n// ✅ Correct - Non-empty option values\nconst priorityOptions = [\n  { label: 'High', value: 'high' },\n  { label: 'Medium', value: 'medium' },\n  { label: 'Low', value: 'low' }\n];\n\n// ❌ Incorrect - Empty string values will cause errors\nconst badOptions = [\n  { label: 'Select...', value: '' },  // This will be filtered out\n  { label: 'High', value: 'high' }\n];\n```\n\n#### Badge Component Tones\nBadge components use `tone` prop with these available values:\n- `'default'` - Gray/neutral appearance\n- `'info'` - Blue informational tone\n- `'success'` - Green success tone  \n- `'warning'` - Yellow/orange warning tone\n- `'critical'` - Red error/critical tone\n- `'magic'` - Purple/gradient special tone\n\n#### Typography Implementation\nText cell variants use consistent typography:\n- **Font**: `--t-typography-body-sm-default` for consistent styling\n- **Text Single Line**: Primary text color (`--t-color-text-primary`)\n- **Text Multiline**: First line uses primary color, subsequent lines use secondary color (`--t-color-text-secondary`)\n- **RTL Support**: Automatic line-height adjustments for Arabic text\n\n#### Performance Considerations\nFor optimal performance with cell variants:\n- Use `React.memo` for custom cell components when dealing with large datasets\n- Prefer static options arrays over inline object creation\n- Consider virtualization for tables with 1000+ rows and complex cell variants\n\n### Troubleshooting Cell Variants\n\n#### Common Issues and Solutions\n\n**\"Select.Item must have a value prop that is not an empty string\"**\n- **Cause**: Select options contain empty string values\n- **Solution**: Ensure all option values are non-empty strings or they will be filtered out automatically\n\n**Cell variant not rendering correctly**\n- **Cause**: Incorrect data structure passed to cell variant\n- **Solution**: Check the expected data structure for each variant in the documentation above\n\n**TypeScript errors with custom cell variants**\n- **Cause**: Custom component doesn't implement `CellVariantProps` interface\n- **Solution**: Ensure your custom component extends `React.FC<CellVariantProps<YourDataType>>`\n\n**Interactive cells not updating**\n- **Cause**: Missing or incorrect `onChange` callback\n- **Solution**: Use `createInteractiveCellColumn` and provide proper onChange handler\n\n```jsx\n// ✅ Correct interactive cell setup\ncreateInteractiveCellColumn('status', 'Status', 'select', (value, row) => {\n  console.log('Status changed:', value, 'for row:', row);\n  // Update your data state here\n}, {\n  cellProps: { \n    options: [\n      { label: 'Active', value: 'active' },\n      { label: 'Inactive', value: 'inactive' }\n    ]\n  }\n})\n```\n\n## Custom Cell Development Summary\n\nThe Table component's cell variant system provides multiple levels of customization:\n\n### Choose Your Approach\n\n| Approach | Best For | Complexity | Flexibility |\n|----------|----------|------------|-------------|\n| **QuickColumns** | Standard data types (text, numbers, badges) | Low | Low |\n| **Cell Variants** | Common interactive patterns | Medium | Medium |\n| **Custom Cells** | Unique designs, complex interactions | High | High |\n| **Component Import** | Using existing design system components | Medium | High |\n\n### Quick Reference Guide\n\n```jsx\n// 1. Simple text and numbers\nQuickColumns.text('name', 'Name')\nQuickColumns.number('amount', 'Amount')\n\n// 2. Interactive elements\nQuickColumns.checkbox('selected', 'Select', handleChange)\nQuickColumns.actions('Actions', handleClick)\n\n// 3. Custom styling with variants\ncreateCellColumn('status', 'Status', 'badge')\ncreateCellColumn('description', 'Description', 'textMultiline')\n\n// 4. Interactive variants with options\ncreateInteractiveCellColumn('priority', 'Priority', 'select', handleChange, {\n  cellProps: { options: [...] }\n})\n\n// 5. Fully custom cells\nconst CustomCell = ({ value, row, onChange }) => (\n  <YourCustomComponent value={value} onChange={onChange} />\n);\ncreateCustomCellColumn('custom', 'Custom', CustomCell)\n\n// 6. Using other design system components\nconst ComponentCell = ({ value, onChange, row }) => (\n  <Switch checked={value} onCheckedChange={(v) => onChange(v, row)} />\n);\ncreateCustomCellColumn('toggle', 'Toggle', ComponentCell)\n```\n\n### Data Structure Patterns\n\n```jsx\n// Text variants\nname: \"Ahmed Al-Rashid\"                    // textSingleLine\ndescription: \"Line 1\\nLine 2\\nLine 3\"     // textMultiline\n\n// Badge variants  \nstatus: { text: \"Active\", tone: \"success\" }              // badge\ntags: [{ text: \"VIP\", tone: \"success\" }, {...}]         // badgeMultiple\n\n// Complex text with badge\nuser: { \n  text: \"Ahmed\", \n  badge: \"VIP\", \n  badgeVariant: \"success\",\n  prefixIcon: <IconUser />\n}                                          // textSingleLineWithBadge\n\n// Numbers\namount: 1250.50                            // updatedNumber (simple)\ncounts: { primary: 100, secondary: 50 }   // updatedNumber (complex)\n\n// Interactive\nselected: true                             // checkbox\npriority: \"high\"                          // select, radioButton\nnotes: \"Custom text\"                      // textField\n```\n\nThe Table component's cell system is designed to be both powerful and approachable, allowing you to start simple and add complexity only when needed. Whether you're displaying basic data or creating complex interactive experiences, the cell variant system provides the tools and patterns to build consistent, accessible, and performant table interfaces.\n\n## Features\n\n### Pagination\n\nAdd pagination to control the number of records displayed per page.\n\n```jsx\nimport { useState } from 'react';\n\nconst [pageIndex, setPageIndex] = useState(0);\nconst [pageSize, setPageSize] = useState(5);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  pagination={{\n    pageIndex,\n    pageSize,\n    pageCount: Math.ceil(data.length / pageSize),\n    onPageChange: setPageIndex,\n    onPageSizeChange: setPageSize,\n    pageSizeOptions: [5, 10, 20, 50],\n  }}\n/>\n```\n\n### Enhanced Search and Filters\n\nEnable search functionality and filters for more targeted data exploration.\n\n```jsx\nconst [searchQuery, setSearchQuery] = useState('');\nconst [filters, setFilters] = useState({\n  status: 'active',\n});\nconst [isFilterBarVisible, setIsFilterBarVisible] = useState(true);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  showSearch={true}\n  showFilters={true}\n  showFilterBar={isFilterBarVisible}\n  showExport={true}\n  searchQuery={searchQuery}\n  onSearchChange={setSearchQuery}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n  onFilterClick={() => setIsFilterBarVisible(!isFilterBarVisible)}\n  onExport={() => alert('Export clicked')}\n  filterOptions={{\n    status: {\n      label: 'Status',\n      options: [\n        { label: 'All', value: 'all' },\n        { label: 'Active', value: 'active' },\n        { label: 'Inactive', value: 'inactive' },\n      ],\n    },\n    category: {\n      label: 'Category',\n      options: [\n        { label: 'All', value: 'all' },\n        { label: 'Food', value: 'food' },\n        { label: 'Cleaning', value: 'cleaning' },\n        { label: 'Drinks', value: 'drinks' },\n      ],\n    },\n  }}\n/>\n```\n\n### Table with Tabs\n\nCreate tabbed interfaces to organize different data sets.\n\n```jsx\nconst [activeTab, setActiveTab] = useState('inventory');\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Management\"\n  showTabs={true}\n  tabItems={[\n    { id: 'inventory', label: 'Inventory Stock', active: activeTab === 'inventory', badge: productData.length },\n    { id: 'orders', label: 'Orders', active: activeTab === 'orders', badge: orderData.length },\n  ]}\n  onTabChange={(tabId) => {\n    setActiveTab(tabId);\n    console.log('Tab changed to:', tabId);\n  }}\n/>\n```\n\n### Enhanced Tabs with Automatic Data Switching\n\nFor more complex tabbed interfaces, use `tableTabs` to define complete configurations for each tab.\n\n```jsx\n<Table\n  data={[]} // Default data (not used with tableTabs)\n  columns={[]} // Default columns (not used with tableTabs)\n  title=\"Inventory Management\"\n  showTabs={true}\n  tableTabs={[\n    {\n      id: 'inventory',\n      label: 'Inventory Stock',\n      active: true, // This tab will be active by default\n      badge: productData.length,\n      data: productData,\n      columns: productColumns,\n      title: 'Inventory Stock',\n    },\n    {\n      id: 'orders',\n      label: 'Orders',\n      badge: orderData.length,\n      data: orderData,\n      columns: orderColumns,\n      title: 'Order History',\n    },\n  ]}\n  onRowClick={(row) => console.log('Row clicked:', row.original)}\n/>\n```\n\n### Grid Cells\n\nEnable grid cells to show borders between cells for better data visualization.\n\n```jsx\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  striped={false}\n  gridCells={true}\n/>\n```\n\n### Striped Rows\n\nUse striped rows **only for read-only data** without interactive elements. Striped rows should be avoided when the table contains interactive components like buttons, checkboxes, or form inputs as they can interfere with hover states and user interactions.\n\n```jsx\n// ✅ Good - Read-only data display\n<Table\n  data={readOnlyData}\n  columns={displayColumns}\n  title=\"Report Data\"\n  striped={true}\n  onRowClick={undefined} // No row interactions\n/>\n\n// ❌ Avoid - Interactive data with form elements\n<Table\n  data={interactiveData}\n  columns={cellVariantColumns}\n  title=\"Editable Data\"\n  striped={false} // Keep false for better UX\n  onRowClick={handleRowClick}\n/>\n```\n\n### Static Tables (No Hover Effects)\n\nFor purely static data displays like reports or dashboards where user interaction is not needed, you can disable row hover effects using the `disableRowHover` prop.\n\n```jsx\n// ✅ Static table - perfect for reports and read-only displays\n<Table\n  data={reportData}\n  columns={reportColumns}\n  title=\"Monthly Report\"\n  striped={true}\n  disableRowHover={true}\n  showSearch={false}\n  showFilters={false}\n  showPagination={false}\n/>\n```\n\n**When to use `disableRowHover`:**\n- Static data reports that won't be modified\n- Dashboard summary tables\n- Print-friendly table layouts\n- Performance-critical displays with many rows\n- Tables embedded in cards or confined spaces\n\n## Table States\n\n### Empty State\n\nShow a message when there's no data to display.\n\n```jsx\n<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"empty\"\n  emptyMessage=\"There are no records to display.\"\n/>\n```\n\n### Loading State\n\nDisplay a loading indicator while data is being fetched.\n\n```jsx\n<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"loading\"\n/>\n```\n\n### Error State\n\nShow an error message when data retrieval fails.\n\n```jsx\n<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"error\"\n  errorMessage=\"Error in data retrieving. Don't worry, it's our fault. Please try again later.\"\n/>\n```\n\n### Not Found State\n\nIndicate when a search yields no results. The not found state features a title/subtitle structure with customizable messages.\n\n```jsx\n<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"notFound\"\n  notFoundMessage=\"No available results for 'searched item'\"\n  notFoundSubtitle=\"Try using different search terms or check your spelling\"\n  searchQuery=\"searched item\"\n/>\n```\n\n**Not Found State Features:**\n- **Icon**: Uses `IconSearchOff` with 32px size in a 72px circular background\n- **Title**: Uses `body-lg-semibold` typography with primary text color\n- **Subtitle**: Uses `body-md-default` typography with secondary text color\n- **Customizable**: Both title and subtitle messages can be customized\n- **Defaults**: Provides sensible default messages if not specified\n\n## Internationalization\n\nThe Table component properly handles Right-to-Left (RTL) languages automatically.\n\n```jsx\n<div dir=\"rtl\" style={{ width: '100%' }}>\n  <Table\n    data={data}\n    columns={columns}\n    title=\"مخزون المنتجات\"\n    striped={true}\n    gridCells={false}\n  />\n</div>\n```\n\n## Column Configuration\n\nThe Table component accepts columns defined according to TanStack Table's `ColumnDef` interface, with additional Tagaddod-specific properties for styling.\n\n```jsx\nconst columns = [\n  // Standard column with accessor and header\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    size: 80,\n  },\n  \n  // Column with custom cell rendering\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150,\n    cell: info => (\n      <span \n        style={{ \n          color: \n            info.getValue() === 'Completed' ? 'var(--t-color-text-success)' :\n            info.getValue() === 'Pending' ? 'var(--t-color-text-warning)' :\n            'var(--t-color-text-info)'\n        }}\n      >\n        {info.getValue()}\n      </span>\n    ),\n  },\n  \n  // Column with custom styling via meta\n  {\n    id: 'actions',\n    header: '',\n    cell: () => (/* Action buttons */),\n    meta: {\n      headerClassName: 'custom-header',\n      cellClassName: 'custom-cell',\n      width: '100px',\n    },\n  },\n];\n```\n\n## Advanced Usage\n\n### Controlled Table\n\nFull control of table state for advanced integration needs.\n\n```jsx\nconst [sorting, setSorting] = useState([]);\nconst [globalFilter, setGlobalFilter] = useState('');\nconst [pagination, setPagination] = useState({\n  pageIndex: 0,\n  pageSize: 10,\n});\nconst [filters, setFilters] = useState({});\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Advanced Table\"\n  searchQuery={globalFilter}\n  onSearchChange={setGlobalFilter}\n  pagination={{\n    pageIndex: pagination.pageIndex,\n    pageSize: pagination.pageSize,\n    pageCount: Math.ceil(data.length / pagination.pageSize),\n    onPageChange: (pageIndex) => setPagination(prev => ({ ...prev, pageIndex })),\n    onPageSizeChange: (pageSize) => setPagination(prev => ({ ...prev, pageSize })),\n  }}\n  defaultSorting={sorting}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n/>\n```\n\n### Server-Side Data\n\nFor tables with server-side pagination, sorting, and filtering.\n\n```jsx\nconst [data, setData] = useState([]);\nconst [totalItems, setTotalItems] = useState(0);\nconst [loading, setLoading] = useState(false);\nconst [pagination, setPagination] = useState({\n  pageIndex: 0,\n  pageSize: 10,\n});\nconst [sorting, setSorting] = useState([]);\nconst [filters, setFilters] = useState({});\n\n// Fetch data on state changes\nuseEffect(() => {\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const response = await api.fetchData({\n        page: pagination.pageIndex,\n        limit: pagination.pageSize,\n        sort: sorting.length > 0 ? { \n          field: sorting[0].id, \n          direction: sorting[0].desc ? 'desc' : 'asc' \n        } : undefined,\n        filters,\n      });\n      \n      setData(response.data);\n      setTotalItems(response.total);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  fetchData();\n}, [pagination, sorting, filters]);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Server-Side Table\"\n  state={loading ? 'loading' : 'normal'}\n  pagination={{\n    pageIndex: pagination.pageIndex,\n    pageSize: pagination.pageSize,\n    pageCount: Math.ceil(totalItems / pagination.pageSize),\n    onPageChange: (pageIndex) => setPagination(prev => ({ ...prev, pageIndex })),\n    onPageSizeChange: (pageSize) => setPagination(prev => ({ ...prev, pageSize })),\n  }}\n  defaultSorting={sorting}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n/>\n```\n\n## Common Use Cases\n\n### Data Grid with Row Actions\n\nTable with row actions for data management operations.\n\n```jsx\n<Table\n  data={users}\n  columns={[\n    { accessorKey: 'name', header: 'Name' },\n    { accessorKey: 'email', header: 'Email' },\n    { accessorKey: 'role', header: 'Role' },\n    {\n      id: 'actions',\n      header: 'Actions',\n      cell: ({ row }) => (\n        <div style={{ display: 'flex', gap: '8px' }}>\n          <Button\n            variant=\"plain\"\n            size=\"micro\"\n            tone=\"neutral\"\n            prefixIcon={<IconEdit size={16} />}\n            onClick={(e) => {\n              e.stopPropagation();\n              editUser(row.original);\n            }}\n          />\n          <Button\n            variant=\"plain\"\n            size=\"micro\"\n            tone=\"critical\"\n            prefixIcon={<IconTrash size={16} />}\n            onClick={(e) => {\n              e.stopPropagation();\n              deleteUser(row.original.id);\n            }}\n          />\n        </div>\n      ),\n    },\n  ]}\n  onRowClick={(row) => viewUserDetails(row.original.id)}\n/>\n```\n\n### Dashboard Analytics Table\n\nDisplay analytical data with metrics and visual indicators.\n\n```jsx\n<Table\n  data={analyticsData}\n  columns={[\n    { accessorKey: 'metric', header: 'Metric' },\n    { \n      accessorKey: 'value', \n      header: 'Value',\n      cell: ({ row }) => formatNumber(row.original.value),\n    },\n    { \n      accessorKey: 'change', \n      header: 'Change',\n      cell: ({ getValue }) => {\n        const change = getValue();\n        return (\n          <div style={{ \n            color: change > 0 ? 'var(--t-color-text-success)' : 'var(--t-color-text-critical)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '4px'\n          }}>\n            {change > 0 ? '↑' : '↓'} {Math.abs(change)}%\n          </div>\n        );\n      },\n    },\n    { \n      id: 'chart',\n      header: 'Trend',\n      cell: ({ row }) => <SparklineChart data={row.original.trend} />,\n    },\n  ]}\n  title=\"Performance Metrics\"\n  gridCells={true}\n/>\n```\n\n### Record Selection Table\n\nTable with row selection for batch operations.\n\n```jsx\nconst [selectedRows, setSelectedRows] = useState([]);\n\n// Define selection column\nconst selectionColumn = {\n  id: 'selection',\n  header: ({ table }) => (\n    <input\n      type=\"checkbox\"\n      checked={table.getIsAllRowsSelected()}\n      onChange={table.getToggleAllRowsSelectedHandler()}\n    />\n  ),\n  cell: ({ row }) => (\n    <input\n      type=\"checkbox\"\n      checked={row.getIsSelected()}\n      onChange={row.getToggleSelectedHandler()}\n      onClick={(e) => e.stopPropagation()}\n    />\n  ),\n  size: 40,\n};\n\n// Columns with selection\nconst columnsWithSelection = [selectionColumn, ...columns];\n\n<div>\n  <div style={{ marginBottom: '16px' }}>\n    <Button \n      disabled={selectedRows.length === 0}\n      onClick={() => handleBatchAction(selectedRows)}\n    >\n      Process Selected ({selectedRows.length})\n    </Button>\n  </div>\n  \n  <Table\n    data={data}\n    columns={columnsWithSelection}\n    title=\"Select Records\"\n    onRowSelectionChange={setSelectedRows}\n  />\n</div>\n```\n\n## Accessibility\n\nThe Table component is built with accessibility in mind:\n\n- Semantic HTML table structure (`<table>`, `<thead>`, `<tbody>`, `<tr>`, `<th>`, `<td>`) for optimal screen reader compatibility\n- Appropriate ARIA attributes for sorting, filtering, and pagination\n- Keyboard navigation support for all interactive elements\n- Focus management for row and cell interactions\n- Proper contrast ratios for all visual states\n- RTL language support with appropriate text alignment and directional changes\n- Visible focus indicators for keyboard users\n- Responsive design that works on various screen sizes and devices\n\n## Implementation Details\n\n### CSS Variables\n\nThe Table component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-typography-body-sm-default` | Typography for text cell variants |\n| `--t-font-family-primary` | Text font |\n| `--t-font-size-*` | Font sizes for text elements |\n| `--t-font-weight-*` | Font weights |\n| `--t-color-text-primary` | Primary text color |\n| `--t-color-text-secondary` | Secondary text color (multiline second lines) |\n| `--t-color-text-tertiary` | Tertiary text color |\n| `--t-color-border-*` | Border colors |\n| `--t-color-surface-primary` | Table background color |\n| `--t-color-surface-hover` | Row hover background color |\n| `--t-color-surface-active` | Striped row hover background color |\n| `--t-color-surface-secondary` | Header background color |\n| `--t-color-fill-*` | Highlight colors |\n| `--t-border-radius-*` | Border radius |\n| `--t-shadow-*` | Box shadows |\n| `--t-duration-*` | Animation duration |\n| `--t-line-height-*` | Line height for different languages |\n\n### Technical Architecture\n\nThe Table component is built on TanStack Table and includes:\n\n- **Data Processing**: Core row model, filtering, sorting, and pagination\n- **State Management**: Component-level React state with controlled inputs\n- **Event Handling**: Row and cell click handlers\n- **Keyboard Navigation**: Accessible keyboard controls\n- **Rendering Optimization**: Efficient rendering with React memoization\n- **Styling**: CSS Modules with proper scoping\n- **Responsive Design**: Mobile-friendly layout and styling\n\n### Performance Considerations\n\nFor optimal performance with large datasets:\n\n- Use server-side pagination for tables with more than 1,000 rows\n- Implement server-side sorting and filtering for tables with complex data structures\n- Consider virtualization for extremely large datasets\n- Optimize column rendering by minimizing complex cell renderers\n- Use memoization for expensive cell calculations\n- Enable the `manualPagination` option for custom data fetching\n\n### Table Integration with Other Components\n\nThe Table component seamlessly integrates with other Tagaddod Design System components:\n\n- **Pagination**: For page navigation\n- **Tabs**: For tabbed data views\n- **Button**: For action buttons\n- **TextInput**: For search functionality\n- **FilterItem**: For applying data filters\n- **Badge**: For count indicators\n\n## Browser Support\n\nThe Table component is compatible with all modern browsers:\n\n- Chrome (latest)\n- Firefox (latest)\n- Safari (latest)\n- Edge (latest)\n- Mobile browsers (iOS Safari, Android Chrome)\n\nRTL language support works across all supported browsers.\n\n## Dependencies\n\nThe Table component's advanced features require these additional dependencies:\n\n### Column Ordering & Resizing\n- `@dnd-kit/core` - Modern drag and drop library for React\n- `@dnd-kit/sortable` - Sortable utilities for column reordering\n- `@dnd-kit/utilities` - Utility functions for drag and drop\n\nThese dependencies are automatically included when you install the Table component and provide:\n- **Modern DnD**: React 18+ compatible drag and drop\n- **Accessibility**: Full keyboard and screen reader support\n- **Performance**: Optimized for smooth interactions\n- **Touch Support**: Works on mobile and tablet devices\n\n### Bundle Size Impact\nThe column management features add approximately 15-20KB to your bundle size. If you don't need these features, they can be tree-shaken out in future versions of the component library.\n",
    "componentInfo": {
      "props": {},
      "description": "Table Component",
      "usage": [
        "// Basic table import\nimport { Table } from '@tagaddod/react';\n\n// Cell variants imports\nimport { \n  Table, \n  QuickColumns, \n  createCellColumn, \n  createInteractiveCellColumn, \n  createActionCellColumn,\n  createCustomCellColumn,\n  TableCellVariants,\n  CellVariantProps \n} from '@tagaddod/react';",
        "import { Table } from '@tagaddod/react';\nimport { IconEdit, IconTrash } from '@tabler/icons-react';\nimport { Button } from '@tagaddod/react';\n\n// Define column structure\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    size: 80,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Item',\n    size: 250,\n  },\n  {\n    accessorKey: 'stockCollectors',\n    header: 'Dispatched to collectors',\n    size: 150,\n  },\n  {\n    accessorKey: 'stockWarehouse',\n    header: 'Available at warehouse',\n    size: 150,\n  },\n  {\n    id: 'actions',\n    header: '',\n    cell: () => (\n      <div style={{ display: 'flex', gap: '8px' }}>\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"neutral\"\n          prefixIcon={<IconEdit size={16} />}\n          onClick={(e) => {\n            e.stopPropagation();\n            alert('Edit clicked');\n          }}\n        />\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"critical\"\n          prefixIcon={<IconTrash size={16} />}\n          onClick={(e) => {\n            e.stopPropagation();\n            alert('Delete clicked');\n          }}\n        />\n      </div>\n    ),\n  },\n];\n\n// Sample data\nconst data = [\n  {\n    id: 34,\n    name: \"زيت حلوة 700 مل\",\n    stockCollectors: 325,\n    stockWarehouse: 325,\n  },\n  // Additional rows...\n];\n\n// Render the table\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  striped={true}\n  gridCells={false}\n  showHeader={true}\n  onRowClick={(row) => console.log('Row clicked:', row.original)}\n/>",
        "import { Table } from '@tagaddod/react';\n\nconst columns = [\n  {\n    id: 'name',        // Important: Provide unique IDs for all columns\n    accessorKey: 'name',\n    header: 'Name',\n    size: 200,\n  },\n  {\n    id: 'email',\n    accessorKey: 'email', \n    header: 'Email',\n    size: 250,\n  },\n  // ... more columns\n];\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Users Table\"\n  enableColumnOrdering={true}  // Enable column ordering\n/>",
        "import { Table } from '@tagaddod/react';\n\nconst columns = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    size: 200,           // Initial width\n    minSize: 100,        // Minimum width\n    maxSize: 400,        // Maximum width\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email', \n    size: 250,\n    minSize: 150,\n    maxSize: 500,\n  },\n  {\n    accessorKey: 'actions',\n    header: 'Actions',\n    size: 100,\n    enableResizing: false, // Disable resizing for this column\n  },\n];\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Resizable Table\"\n  enableColumnResizing={true}  // Enable column resizing\n/>",
        "// Complete column management setup\n<Table\n  data={data}\n  columns={columns}\n  title=\"Advanced Table\"\n  enableColumnOrdering={true}     // Enable column ordering\n  enableColumnResizing={true}     // Enable column resizing\n  gridCells={true}                // Show borders for better visual feedback\n  // RTL direction is automatically detected\n/>",
        "// Table with both column ordering and resizing\n<Table\n  data={data}\n  columns={columns}\n  title=\"Full Column Management\"\n  enableColumnOrdering={true}   // Enable column ordering\n  enableColumnResizing={true}   // Enable column resizing\n  showSearch={true}\n  showFilters={true}\n  gridCells={true}  // Recommended for better visual feedback\n/>",
        "import { QuickColumns } from '@tagaddod/react';\n\nconst columns = [\n  QuickColumns.text('name', 'Name'),              // Simple text\n  QuickColumns.badge('status', 'Status'),         // Status badges\n  QuickColumns.number('amount', 'Amount'),        // Formatted numbers\n  QuickColumns.checkbox('selected', 'Select', handleSelection),\n  QuickColumns.actions('Actions', handleAction), // Action buttons\n];",
        "import { createCellColumn, createInteractiveCellColumn } from '@tagaddod/react';\n\nconst columns = [\n  createCellColumn('description', 'Description', 'textMultiline'),\n  createCellColumn('tags', 'Tags', 'badgeMultiple'),\n  createInteractiveCellColumn('priority', 'Priority', 'select', handleChange, {\n    cellProps: { options: [{ label: 'High', value: 'high' }] }\n  }),\n];",
        "import { createCustomCellColumn, CellVariantProps } from '@tagaddod/react';\n\nconst CustomCell: React.FC<CellVariantProps<any>> = ({ value, row, onChange }) => {\n  // Your custom cell implementation with any design system component\n  return <YourCustomDesign value={value} />;\n};\n\nconst columns = [\n  createCustomCellColumn('custom', 'Custom', CustomCell),\n];",
        "import { Table, QuickColumns, createInteractiveCellColumn } from '@tagaddod/react';\n\nconst columns = [\n  QuickColumns.text('name', 'Customer Name'),\n  QuickColumns.badge('status', 'Status'),\n  QuickColumns.checkbox('selected', 'Select', (checked, row) => {\n    console.log(`Row ${row.id} selected: ${checked}`);\n  }),\n  QuickColumns.number('amount', 'Amount'),\n  QuickColumns.actions('Actions', (row) => {\n    console.log('Action clicked for:', row);\n  }),\n];",
        "import { \n  createCellColumn, \n  createInteractiveCellColumn, \n  createActionCellColumn \n} from '@tagaddod/react';\n\nconst columns = [\n  // Text variants\n  createCellColumn('customer', 'Customer', 'textSingleLine'),\n  createCellColumn('description', 'Description', 'textMultiline'),\n  \n  // Badge variants\n  createCellColumn('status', 'Status', 'badge'),\n  createCellColumn('tags', 'Tags', 'badgeMultiple'),\n  \n  // Interactive variants\n  createInteractiveCellColumn('priority', 'Priority', 'select', handlePriorityChange, {\n    cellProps: { \n      options: [\n        { label: 'High', value: 'high' },\n        { label: 'Medium', value: 'medium' },\n        { label: 'Low', value: 'low' }\n      ]\n    }\n  }),\n  \n  createInteractiveCellColumn('approved', 'Approved', 'checkbox', handleApprovalChange),\n  \n  createInteractiveCellColumn('notes', 'Notes', 'textField', handleNotesChange, {\n    cellProps: { placeholder: 'Add notes...' }\n  }),\n  \n  // Action variants\n  createActionCellColumn('Actions', 'actionIcon', handleRowAction),\n  createActionCellColumn('More', 'actionDropdownIcon', () => {}, {\n    actions: [\n      { label: 'Edit', onClick: (row) => editRow(row) },\n      { label: 'Delete', onClick: (row) => deleteRow(row) },\n      { label: 'View Details', onClick: (row) => viewDetails(row) }\n    ]\n  })\n];",
        "const salesData = [\n  {\n    id: 1,\n    customer: 'Olivia Rhye',                                    // textSingleLine\n    description: 'Premium customer with\\nmultiple orders',      // textMultiline\n    status: { text: 'Active', tone: 'success' },               // badge\n    tags: [                                                     // badgeMultiple\n      { text: 'VIP', tone: 'success' },\n      { text: 'Premium', tone: 'info' }\n    ],\n    selected: true,                                             // checkbox\n    priority: 'high',                                           // select/radioButton\n    amount: 2400.50,                                            // updatedNumber\n    notes: 'Important client'                                   // textField\n  }\n];",
        "import { createCustomCellColumn, CellVariantProps } from '@tagaddod/react';\n\n// Create custom progress bar cell\nconst ProgressBarCell: React.FC<CellVariantProps<number>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-100)',\n      width: '100%'\n    }}>\n      <div style={{ \n        flex: 1,\n        height: '8px', \n        backgroundColor: 'var(--t-color-surface-tertiary)', \n        borderRadius: 'var(--t-border-radius-sm)',\n        overflow: 'hidden'\n      }}>\n        <div \n          style={{ \n            width: `${value || 0}%`, \n            height: '100%', \n            backgroundColor: 'var(--t-color-fill-brand-primary)', \n            transition: 'width 0.3s ease'\n          }} \n        />\n      </div>\n      <span style={{ \n        fontSize: 'var(--t-font-size-sm)',\n        fontWeight: 'var(--t-font-weight-medium)',\n        color: 'var(--t-color-text-secondary)',\n        minWidth: '32px',\n        textAlign: isRTL ? 'left' : 'right'\n      }}>\n        {value || 0}%\n      </span>\n    </div>\n  );\n};\n\n// Use in column definition\nconst columns = [\n  createCustomCellColumn('completion', 'Progress', ProgressBarCell),\n];",
        "import { Avatar } from '@tagaddod/react';\n\ninterface UserCellData {\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\nconst UserAvatarCell: React.FC<CellVariantProps<UserCellData>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  const lineHeightStyle = {\n    lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n  };\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-200)'\n    }}>\n      <Avatar \n        src={value?.avatar} \n        fallback={value?.name?.charAt(0) || '?'}\n        size=\"small\"\n      />\n      <div>\n        <div style={{ \n          ...lineHeightStyle,\n          font: 'var(--t-typography-body-sm-medium)',\n          color: 'var(--t-color-text-primary)'\n        }}>\n          {value?.name || '-'}\n        </div>\n        <div style={{ \n          ...lineHeightStyle,\n          font: 'var(--t-typography-body-sm-default)',\n          color: 'var(--t-color-text-secondary)'\n        }}>\n          {value?.email || '-'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Usage with data structure\nconst userData = [\n  {\n    id: 1,\n    user: {\n      name: 'Ahmed Al-Rashid',\n      email: 'ahmed@example.com',\n      avatar: 'https://example.com/avatar1.jpg'\n    },\n    role: 'Admin'\n  }\n];\n\nconst columns = [\n  createCustomCellColumn('user', 'User', UserAvatarCell),\n  QuickColumns.text('role', 'Role'),\n];",
        "import { useState } from 'react';\nimport { IconStar } from '@tabler/icons-react';\n\nconst RatingCell: React.FC<CellVariantProps<number>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  const [hoveredStar, setHoveredStar] = useState<number | null>(null);\n  \n  const handleStarClick = (rating: number) => {\n    onChange?.(rating, row);\n  };\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      gap: 'var(--t-space-050)'\n    }}>\n      {[1, 2, 3, 4, 5].map((star) => (\n        <IconStar\n          key={star}\n          size={16}\n          style={{\n            cursor: 'pointer',\n            color: (hoveredStar || value || 0) >= star \n              ? 'var(--t-color-fill-warning-primary)' \n              : 'var(--t-color-border-secondary)',\n            fill: (hoveredStar || value || 0) >= star \n              ? 'var(--t-color-fill-warning-primary)' \n              : 'transparent'\n          }}\n          onClick={() => handleStarClick(star)}\n          onMouseEnter={() => setHoveredStar(star)}\n          onMouseLeave={() => setHoveredStar(null)}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Use as interactive cell\nconst columns = [\n  createInteractiveCellColumn('rating', 'Rating', 'custom', handleRatingChange, {\n    cellProps: { CustomComponent: RatingCell }\n  })\n];",
        "import { IconCircleCheck, IconClock, IconAlertTriangle } from '@tabler/icons-react';\n\ninterface StatusCellData {\n  status: 'completed' | 'pending' | 'failed';\n  label: string;\n}\n\nconst StatusIconCell: React.FC<CellVariantProps<StatusCellData>> = ({ value }) => {\n  const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\n  \n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return {\n          icon: <IconCircleCheck size={16} />,\n          color: 'var(--t-color-text-success)',\n          bgColor: 'var(--t-color-fill-success-secondary)'\n        };\n      case 'pending':\n        return {\n          icon: <IconClock size={16} />,\n          color: 'var(--t-color-text-warning)',\n          bgColor: 'var(--t-color-fill-warning-secondary)'\n        };\n      case 'failed':\n        return {\n          icon: <IconAlertTriangle size={16} />,\n          color: 'var(--t-color-text-critical)',\n          bgColor: 'var(--t-color-fill-critical-secondary)'\n        };\n      default:\n        return {\n          icon: <IconClock size={16} />,\n          color: 'var(--t-color-text-secondary)',\n          bgColor: 'var(--t-color-surface-secondary)'\n        };\n    }\n  };\n  \n  const config = getStatusConfig(value?.status || '');\n  \n  return (\n    <div style={{ \n      display: 'flex',\n      alignItems: 'center',\n      gap: 'var(--t-space-100)',\n      padding: 'var(--t-space-100) var(--t-space-200)',\n      backgroundColor: config.bgColor,\n      borderRadius: 'var(--t-border-radius-sm)',\n      width: 'fit-content'\n    }}>\n      <span style={{ color: config.color, display: 'flex' }}>\n        {config.icon}\n      </span>\n      <span style={{ \n        font: 'var(--t-typography-body-sm-medium)',\n        color: config.color,\n        lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n      }}>\n        {value?.label || '-'}\n      </span>\n    </div>\n  );\n};\n\n// Usage\nconst taskData = [\n  {\n    id: 1,\n    task: 'Setup Database',\n    status: {\n      status: 'completed' as const,\n      label: 'Completed'\n    }\n  }\n];\n\nconst columns = [\n  QuickColumns.text('task', 'Task'),\n  createCustomCellColumn('status', 'Status', StatusIconCell),\n];",
        "import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@tagaddod/react';\nimport { Button } from '@tagaddod/react';\nimport { IconDots, IconEdit, IconTrash, IconEye } from '@tabler/icons-react';\n\nconst DropdownActionsCell: React.FC<CellVariantProps<any>> = ({ row }) => {\n  const handleEdit = () => {\n    console.log('Edit:', row);\n  };\n  \n  const handleDelete = () => {\n    console.log('Delete:', row);\n  };\n  \n  const handleView = () => {\n    console.log('View:', row);\n  };\n  \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"plain\"\n          size=\"micro\"\n          tone=\"neutral\"\n          prefixIcon={<IconDots size={16} />}\n          onClick={(e) => e.stopPropagation()}\n        />\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={handleView}>\n          <IconEye size={16} />\n          View Details\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={handleEdit}>\n          <IconEdit size={16} />\n          Edit\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={handleDelete} destructive>\n          <IconTrash size={16} />\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nconst columns = [\n  QuickColumns.text('name', 'Name'),\n  createCustomCellColumn('actions', 'Actions', DropdownActionsCell),\n];",
        "import { Switch } from '@tagaddod/react';\n\nconst ToggleSwitchCell: React.FC<CellVariantProps<boolean>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <Switch\n      checked={value || false}\n      onCheckedChange={(checked) => onChange?.(checked, row)}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('feature', 'Feature'),\n  createInteractiveCellColumn('enabled', 'Enabled', 'custom', handleToggleChange, {\n    cellProps: { CustomComponent: ToggleSwitchCell }\n  }),\n];",
        "import { TagInput } from '@tagaddod/react';\n\nconst TagInputCell: React.FC<CellVariantProps<string[]>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <TagInput\n      value={value || []}\n      onValueChange={(tags) => onChange?.(tags, row)}\n      placeholder=\"Add tags...\"\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('title', 'Title'),\n  createInteractiveCellColumn('tags', 'Tags', 'custom', handleTagsChange, {\n    cellProps: { CustomComponent: TagInputCell }\n  }),\n];",
        "import { DatePicker } from '@tagaddod/react';\n\nconst DatePickerCell: React.FC<CellVariantProps<Date | null>> = ({ \n  value, \n  onChange, \n  row \n}) => {\n  return (\n    <DatePicker\n      value={value}\n      onValueChange={(date) => onChange?.(date, row)}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nconst columns = [\n  QuickColumns.text('task', 'Task'),\n  createInteractiveCellColumn('dueDate', 'Due Date', 'custom', handleDateChange, {\n    cellProps: { CustomComponent: DatePickerCell }\n  }),\n];",
        "import { TableCellVariants } from '@tagaddod/react';\n\n// Add your custom variants to the registry\nconst ExtendedCellVariants = {\n  ...TableCellVariants,\n  progressBar: ProgressBarCell,\n  userAvatar: UserAvatarCell,\n  ratingStars: RatingCell,\n  statusIcon: StatusIconCell,\n  dropdownActions: DropdownActionsCell,\n  toggleSwitch: ToggleSwitchCell,\n};\n\n// Now you can use them with helper functions\nconst columns = [\n  createCellColumn('completion', 'Progress', 'progressBar'),\n  createCellColumn('user', 'User', 'userAvatar'),\n  createInteractiveCellColumn('rating', 'Rating', 'ratingStars', handleRatingChange),\n  createCellColumn('status', 'Status', 'statusIcon'),\n  createCustomCellColumn('actions', 'Actions', 'dropdownActions'),\n];",
        "const isRTL = document.dir === 'rtl' || document.documentElement.dir === 'rtl';\nconst lineHeightStyle = {\n  lineHeight: isRTL ? 'var(--t-line-height-arabic, 1.2)' : 'var(--t-line-height-english, 1.5)'\n};",
        "// ✅ Good - Using design tokens\ncolor: 'var(--t-color-text-primary)',\npadding: 'var(--t-space-200)',\nborderRadius: 'var(--t-border-radius-sm)',\nfont: 'var(--t-typography-body-sm-default)'\n\n// ❌ Bad - Hard-coded values\ncolor: '#333',\npadding: '8px',\nborderRadius: '4px',\nfont: '14px sans-serif'",
        "<Button\n  onClick={(e) => {\n    e.stopPropagation(); // Prevent row click when button is clicked\n    handleAction();\n  }}\n/>",
        "interface CustomCellData {\n  primary: string;\n  secondary?: string;\n  metadata?: Record<string, any>;\n}\n\nconst CustomCell: React.FC<CellVariantProps<CustomCellData>> = ({ value }) => {\n  // Type-safe access to value properties\n  return <div>{value?.primary || '-'}</div>;\n};",
        "import { memo } from 'react';\n\nconst ExpensiveCustomCell: React.FC<CellVariantProps<ComplexData>> = memo(({ value }) => {\n  // Complex rendering logic\n  return <div>...</div>;\n});",
        "// ✅ Correct - Non-empty option values\nconst priorityOptions = [\n  { label: 'High', value: 'high' },\n  { label: 'Medium', value: 'medium' },\n  { label: 'Low', value: 'low' }\n];\n\n// ❌ Incorrect - Empty string values will cause errors\nconst badOptions = [\n  { label: 'Select...', value: '' },  // This will be filtered out\n  { label: 'High', value: 'high' }\n];",
        "// ✅ Correct interactive cell setup\ncreateInteractiveCellColumn('status', 'Status', 'select', (value, row) => {\n  console.log('Status changed:', value, 'for row:', row);\n  // Update your data state here\n}, {\n  cellProps: { \n    options: [\n      { label: 'Active', value: 'active' },\n      { label: 'Inactive', value: 'inactive' }\n    ]\n  }\n})",
        "// 1. Simple text and numbers\nQuickColumns.text('name', 'Name')\nQuickColumns.number('amount', 'Amount')\n\n// 2. Interactive elements\nQuickColumns.checkbox('selected', 'Select', handleChange)\nQuickColumns.actions('Actions', handleClick)\n\n// 3. Custom styling with variants\ncreateCellColumn('status', 'Status', 'badge')\ncreateCellColumn('description', 'Description', 'textMultiline')\n\n// 4. Interactive variants with options\ncreateInteractiveCellColumn('priority', 'Priority', 'select', handleChange, {\n  cellProps: { options: [...] }\n})\n\n// 5. Fully custom cells\nconst CustomCell = ({ value, row, onChange }) => (\n  <YourCustomComponent value={value} onChange={onChange} />\n);\ncreateCustomCellColumn('custom', 'Custom', CustomCell)\n\n// 6. Using other design system components\nconst ComponentCell = ({ value, onChange, row }) => (\n  <Switch checked={value} onCheckedChange={(v) => onChange(v, row)} />\n);\ncreateCustomCellColumn('toggle', 'Toggle', ComponentCell)",
        "// Text variants\nname: \"Ahmed Al-Rashid\"                    // textSingleLine\ndescription: \"Line 1\\nLine 2\\nLine 3\"     // textMultiline\n\n// Badge variants  \nstatus: { text: \"Active\", tone: \"success\" }              // badge\ntags: [{ text: \"VIP\", tone: \"success\" }, {...}]         // badgeMultiple\n\n// Complex text with badge\nuser: { \n  text: \"Ahmed\", \n  badge: \"VIP\", \n  badgeVariant: \"success\",\n  prefixIcon: <IconUser />\n}                                          // textSingleLineWithBadge\n\n// Numbers\namount: 1250.50                            // updatedNumber (simple)\ncounts: { primary: 100, secondary: 50 }   // updatedNumber (complex)\n\n// Interactive\nselected: true                             // checkbox\npriority: \"high\"                          // select, radioButton\nnotes: \"Custom text\"                      // textField",
        "import { useState } from 'react';\n\nconst [pageIndex, setPageIndex] = useState(0);\nconst [pageSize, setPageSize] = useState(5);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  pagination={{\n    pageIndex,\n    pageSize,\n    pageCount: Math.ceil(data.length / pageSize),\n    onPageChange: setPageIndex,\n    onPageSizeChange: setPageSize,\n    pageSizeOptions: [5, 10, 20, 50],\n  }}\n/>",
        "const [searchQuery, setSearchQuery] = useState('');\nconst [filters, setFilters] = useState({\n  status: 'active',\n});\nconst [isFilterBarVisible, setIsFilterBarVisible] = useState(true);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  showSearch={true}\n  showFilters={true}\n  showFilterBar={isFilterBarVisible}\n  showExport={true}\n  searchQuery={searchQuery}\n  onSearchChange={setSearchQuery}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n  onFilterClick={() => setIsFilterBarVisible(!isFilterBarVisible)}\n  onExport={() => alert('Export clicked')}\n  filterOptions={{\n    status: {\n      label: 'Status',\n      options: [\n        { label: 'All', value: 'all' },\n        { label: 'Active', value: 'active' },\n        { label: 'Inactive', value: 'inactive' },\n      ],\n    },\n    category: {\n      label: 'Category',\n      options: [\n        { label: 'All', value: 'all' },\n        { label: 'Food', value: 'food' },\n        { label: 'Cleaning', value: 'cleaning' },\n        { label: 'Drinks', value: 'drinks' },\n      ],\n    },\n  }}\n/>",
        "const [activeTab, setActiveTab] = useState('inventory');\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Management\"\n  showTabs={true}\n  tabItems={[\n    { id: 'inventory', label: 'Inventory Stock', active: activeTab === 'inventory', badge: productData.length },\n    { id: 'orders', label: 'Orders', active: activeTab === 'orders', badge: orderData.length },\n  ]}\n  onTabChange={(tabId) => {\n    setActiveTab(tabId);\n    console.log('Tab changed to:', tabId);\n  }}\n/>",
        "<Table\n  data={[]} // Default data (not used with tableTabs)\n  columns={[]} // Default columns (not used with tableTabs)\n  title=\"Inventory Management\"\n  showTabs={true}\n  tableTabs={[\n    {\n      id: 'inventory',\n      label: 'Inventory Stock',\n      active: true, // This tab will be active by default\n      badge: productData.length,\n      data: productData,\n      columns: productColumns,\n      title: 'Inventory Stock',\n    },\n    {\n      id: 'orders',\n      label: 'Orders',\n      badge: orderData.length,\n      data: orderData,\n      columns: orderColumns,\n      title: 'Order History',\n    },\n  ]}\n  onRowClick={(row) => console.log('Row clicked:', row.original)}\n/>",
        "<Table\n  data={data}\n  columns={columns}\n  title=\"Inventory Stock\"\n  striped={false}\n  gridCells={true}\n/>",
        "// ✅ Good - Read-only data display\n<Table\n  data={readOnlyData}\n  columns={displayColumns}\n  title=\"Report Data\"\n  striped={true}\n  onRowClick={undefined} // No row interactions\n/>\n\n// ❌ Avoid - Interactive data with form elements\n<Table\n  data={interactiveData}\n  columns={cellVariantColumns}\n  title=\"Editable Data\"\n  striped={false} // Keep false for better UX\n  onRowClick={handleRowClick}\n/>",
        "// ✅ Static table - perfect for reports and read-only displays\n<Table\n  data={reportData}\n  columns={reportColumns}\n  title=\"Monthly Report\"\n  striped={true}\n  disableRowHover={true}\n  showSearch={false}\n  showFilters={false}\n  showPagination={false}\n/>",
        "<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"empty\"\n  emptyMessage=\"There are no records to display.\"\n/>",
        "<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"loading\"\n/>",
        "<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"error\"\n  errorMessage=\"Error in data retrieving. Don't worry, it's our fault. Please try again later.\"\n/>",
        "<Table\n  data={[]}\n  columns={columns}\n  title=\"Inventory Stock\"\n  state=\"notFound\"\n  notFoundMessage=\"No available results for 'searched item'\"\n  notFoundSubtitle=\"Try using different search terms or check your spelling\"\n  searchQuery=\"searched item\"\n/>",
        "<div dir=\"rtl\" style={{ width: '100%' }}>\n  <Table\n    data={data}\n    columns={columns}\n    title=\"مخزون المنتجات\"\n    striped={true}\n    gridCells={false}\n  />\n</div>",
        "const columns = [\n  // Standard column with accessor and header\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    size: 80,\n  },\n  \n  // Column with custom cell rendering\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150,\n    cell: info => (\n      <span \n        style={{ \n          color: \n            info.getValue() === 'Completed' ? 'var(--t-color-text-success)' :\n            info.getValue() === 'Pending' ? 'var(--t-color-text-warning)' :\n            'var(--t-color-text-info)'\n        }}\n      >\n        {info.getValue()}\n      </span>\n    ),\n  },\n  \n  // Column with custom styling via meta\n  {\n    id: 'actions',\n    header: '',\n    cell: () => (/* Action buttons */),\n    meta: {\n      headerClassName: 'custom-header',\n      cellClassName: 'custom-cell',\n      width: '100px',\n    },\n  },\n];",
        "const [sorting, setSorting] = useState([]);\nconst [globalFilter, setGlobalFilter] = useState('');\nconst [pagination, setPagination] = useState({\n  pageIndex: 0,\n  pageSize: 10,\n});\nconst [filters, setFilters] = useState({});\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Advanced Table\"\n  searchQuery={globalFilter}\n  onSearchChange={setGlobalFilter}\n  pagination={{\n    pageIndex: pagination.pageIndex,\n    pageSize: pagination.pageSize,\n    pageCount: Math.ceil(data.length / pagination.pageSize),\n    onPageChange: (pageIndex) => setPagination(prev => ({ ...prev, pageIndex })),\n    onPageSizeChange: (pageSize) => setPagination(prev => ({ ...prev, pageSize })),\n  }}\n  defaultSorting={sorting}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n/>",
        "const [data, setData] = useState([]);\nconst [totalItems, setTotalItems] = useState(0);\nconst [loading, setLoading] = useState(false);\nconst [pagination, setPagination] = useState({\n  pageIndex: 0,\n  pageSize: 10,\n});\nconst [sorting, setSorting] = useState([]);\nconst [filters, setFilters] = useState({});\n\n// Fetch data on state changes\nuseEffect(() => {\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const response = await api.fetchData({\n        page: pagination.pageIndex,\n        limit: pagination.pageSize,\n        sort: sorting.length > 0 ? { \n          field: sorting[0].id, \n          direction: sorting[0].desc ? 'desc' : 'asc' \n        } : undefined,\n        filters,\n      });\n      \n      setData(response.data);\n      setTotalItems(response.total);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  fetchData();\n}, [pagination, sorting, filters]);\n\n<Table\n  data={data}\n  columns={columns}\n  title=\"Server-Side Table\"\n  state={loading ? 'loading' : 'normal'}\n  pagination={{\n    pageIndex: pagination.pageIndex,\n    pageSize: pagination.pageSize,\n    pageCount: Math.ceil(totalItems / pagination.pageSize),\n    onPageChange: (pageIndex) => setPagination(prev => ({ ...prev, pageIndex })),\n    onPageSizeChange: (pageSize) => setPagination(prev => ({ ...prev, pageSize })),\n  }}\n  defaultSorting={sorting}\n  activeFilters={filters}\n  onFilterChange={setFilters}\n/>",
        "<Table\n  data={users}\n  columns={[\n    { accessorKey: 'name', header: 'Name' },\n    { accessorKey: 'email', header: 'Email' },\n    { accessorKey: 'role', header: 'Role' },\n    {\n      id: 'actions',\n      header: 'Actions',\n      cell: ({ row }) => (\n        <div style={{ display: 'flex', gap: '8px' }}>\n          <Button\n            variant=\"plain\"\n            size=\"micro\"\n            tone=\"neutral\"\n            prefixIcon={<IconEdit size={16} />}\n            onClick={(e) => {\n              e.stopPropagation();\n              editUser(row.original);\n            }}\n          />\n          <Button\n            variant=\"plain\"\n            size=\"micro\"\n            tone=\"critical\"\n            prefixIcon={<IconTrash size={16} />}\n            onClick={(e) => {\n              e.stopPropagation();\n              deleteUser(row.original.id);\n            }}\n          />\n        </div>\n      ),\n    },\n  ]}\n  onRowClick={(row) => viewUserDetails(row.original.id)}\n/>",
        "<Table\n  data={analyticsData}\n  columns={[\n    { accessorKey: 'metric', header: 'Metric' },\n    { \n      accessorKey: 'value', \n      header: 'Value',\n      cell: ({ row }) => formatNumber(row.original.value),\n    },\n    { \n      accessorKey: 'change', \n      header: 'Change',\n      cell: ({ getValue }) => {\n        const change = getValue();\n        return (\n          <div style={{ \n            color: change > 0 ? 'var(--t-color-text-success)' : 'var(--t-color-text-critical)',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '4px'\n          }}>\n            {change > 0 ? '↑' : '↓'} {Math.abs(change)}%\n          </div>\n        );\n      },\n    },\n    { \n      id: 'chart',\n      header: 'Trend',\n      cell: ({ row }) => <SparklineChart data={row.original.trend} />,\n    },\n  ]}\n  title=\"Performance Metrics\"\n  gridCells={true}\n/>",
        "const [selectedRows, setSelectedRows] = useState([]);\n\n// Define selection column\nconst selectionColumn = {\n  id: 'selection',\n  header: ({ table }) => (\n    <input\n      type=\"checkbox\"\n      checked={table.getIsAllRowsSelected()}\n      onChange={table.getToggleAllRowsSelectedHandler()}\n    />\n  ),\n  cell: ({ row }) => (\n    <input\n      type=\"checkbox\"\n      checked={row.getIsSelected()}\n      onChange={row.getToggleSelectedHandler()}\n      onClick={(e) => e.stopPropagation()}\n    />\n  ),\n  size: 40,\n};\n\n// Columns with selection\nconst columnsWithSelection = [selectionColumn, ...columns];\n\n<div>\n  <div style={{ marginBottom: '16px' }}>\n    <Button \n      disabled={selectedRows.length === 0}\n      onClick={() => handleBatchAction(selectedRows)}\n    >\n      Process Selected ({selectedRows.length})\n    </Button>\n  </div>\n  \n  <Table\n    data={data}\n    columns={columnsWithSelection}\n    title=\"Select Records\"\n    onRowSelectionChange={setSelectedRows}\n  />\n</div>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Switch",
    "stories": [
      {
        "id": "Components/Switch--default",
        "name": "Default",
        "title": "Components/Switch",
        "importPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Switch",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Switch--pressed",
        "name": "Pressed",
        "title": "Components/Switch",
        "importPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Switch",
        "storyName": "Pressed",
        "description": ""
      },
      {
        "id": "Components/Switch--small",
        "name": "Small",
        "title": "Components/Switch",
        "importPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Switch",
        "storyName": "Small",
        "description": ""
      },
      {
        "id": "Components/Switch--disabled",
        "name": "Disabled",
        "title": "Components/Switch",
        "importPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Switch",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/Switch--disabledpressed",
        "name": "DisabledPressed",
        "title": "Components/Switch",
        "importPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Switch",
        "storyName": "DisabledPressed",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Switch/Switch.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as SwitchStories from './Switch.stories';\nimport { Switch } from './Switch';\n\n<Meta of={SwitchStories} />\n\n# Switch Component\n\nThe Switch component allows users to toggle between two states, typically \"on\" and \"off\". It provides a clear visual indication of the current state and smooth transitions between states.\n\n## Overview\n\nSwitches are ideal for settings and preferences where users need to enable or disable features instantly. Unlike checkboxes, switches immediately apply the change and typically don't require form submission.\n\n## Import\n\n```jsx\nimport { Switch } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Switch} />\n\n## Basic Usage\n\n<Canvas of={SwitchStories.Default} />\n\n```jsx\n<Switch />\n```\n\n## States\n\n### Default (Off)\n\nThe switch starts in the \"off\" position by default.\n\n<Canvas of={SwitchStories.Default} />\n\n```jsx\n<Switch defaultPressed={false} />\n```\n\n### Pressed (On)\n\nThe switch can start in the \"on\" position.\n\n<Canvas of={SwitchStories.Pressed} />\n\n```jsx\n<Switch defaultPressed={true} />\n```\n\n### Disabled\n\nDisabled switches cannot be interacted with.\n\n<Canvas of={SwitchStories.Disabled} />\n\n```jsx\n<Switch disabled={true} />\n```\n\n### Disabled and Pressed\n\nDisabled switches retain their visual state.\n\n<Canvas of={SwitchStories.DisabledPressed} />\n\n```jsx\n<Switch \n  disabled={true} \n  defaultPressed={true} \n/>\n```\n\n## Sizes\n\nThe Switch component comes in two sizes to fit different use cases.\n\n### Small\n\nUse the small size (20px height) for compact interfaces or when space is limited.\n\n<Canvas of={SwitchStories.Small} />\n\n```jsx\n<Switch size=\"sm\" />\n```\n\n### Medium (Default)\n\nThe medium size (24px height) is the default and works well for most interfaces.\n\n```jsx\n<Switch size=\"md\" />\n```\n\n## Interactive Example\n\n<Canvas of={SwitchStories.Interactive} />\n\n```jsx\nfunction ToggleExample() {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n      <Switch \n        pressed={isPressed} \n        onPressedChange={setIsPressed} \n      />\n      <span>Switch is {isPressed ? 'on' : 'off'}</span>\n    </div>\n  );\n}\n```\n\n## Internationalization\n\nThe Switch component automatically handles Right-to-Left (RTL) languages by:\n\n1. Reversing the thumb animation direction\n2. Maintaining proper visual hierarchy in RTL contexts\n3. Ensuring accessible interaction patterns work in all directions\n\n<Canvas of={SwitchStories.RTLSupport} />\n\n```jsx\n<div dir=\"rtl\">\n  <Switch />\n</div>\n```\n\n## All Variants\n\n<Canvas of={SwitchStories.AllVariants} />\n\n## Controlled Usage\n\nYou can control the switch state and handle changes:\n\n```jsx\nimport { useState } from 'react';\n\nfunction ControlledSwitch() {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  return (\n    <Switch \n      pressed={isPressed}\n      onPressedChange={setIsPressed}\n    />\n  );\n}\n```\n\n## Uncontrolled Usage\n\nFor simple cases, you can use the switch in uncontrolled mode:\n\n```jsx\nfunction UncontrolledSwitch() {\n  return (\n    <Switch \n      defaultPressed={false}\n      onPressedChange={(pressed) => console.log('Switch is:', pressed ? 'on' : 'off')}\n    />\n  );\n}\n```\n\n## Form Integration\n\nSwitch is built on Radix UI's Switch component, making it compatible with forms:\n\n```jsx\n<form onSubmit={handleSubmit}>\n  <label htmlFor=\"notifications\">\n    Enable notifications\n    <Switch \n      id=\"notifications\"\n      name=\"notifications\" \n      defaultPressed={true}\n    />\n  </label>\n  <button type=\"submit\">Save Settings</button>\n</form>\n```\n\n## Accessibility\n\n- The switch is keyboard accessible (Space or Enter to toggle)\n- Clear focus indicators for keyboard navigation\n- Proper ARIA attributes for screen readers\n- Visual state changes are also communicated to assistive technologies\n- Disabled state is properly announced to screen readers\n- Follows WCAG guidelines for interactive elements\n\n## Common Use Cases\n\n### Settings Toggle\n\n```jsx\n<div>\n  <label>\n    Dark mode\n    <Switch defaultPressed={false} />\n  </label>\n</div>\n```\n\n### Feature Enablement\n\n```jsx\n<div>\n  <Switch \n    pressed={feature.enabled}\n    onPressedChange={(enabled) => updateFeature({ enabled })}\n  />\n  <span>Advanced features</span>\n</div>\n```\n\n### Notification Preferences\n\n```jsx\n<div>\n  <Switch \n    pressed={settings.emailNotifications}\n    onPressedChange={(enabled) => \n      updateSettings({ emailNotifications: enabled })\n    }\n  />\n  <span>Email notifications</span>\n</div>\n```\n\n### Multiple Settings\n\n```jsx\nfunction NotificationSettings() {\n  const [settings, setSettings] = useState({\n    email: true,\n    push: false,\n    sms: false\n  });\n\n  const updateSetting = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  return (\n    <div>\n      <div>\n        <Switch \n          pressed={settings.email}\n          onPressedChange={(value) => updateSetting('email', value)}\n        />\n        <span>Email notifications</span>\n      </div>\n      <div>\n        <Switch \n          pressed={settings.push}\n          onPressedChange={(value) => updateSetting('push', value)}\n        />\n        <span>Push notifications</span>\n      </div>\n      <div>\n        <Switch \n          pressed={settings.sms}\n          onPressedChange={(value) => updateSetting('sms', value)}\n        />\n        <span>SMS notifications</span>\n      </div>\n    </div>\n  );\n}\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe Switch uses the following design token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-border-radius-full` | Rounded corners for switch track and thumb |\n| `--t-color-fill-brand-secondary` | Default track background |\n| `--t-color-fill-brand-secondary-hover` | Hover state background |\n| `--t-color-blue-1300` | Pressed state background |\n| `--t-color-blue-1200` | Pressed hover state background |\n| `--t-color-gray-700` | Disabled state background |\n| `--t-color-gray-100` | Thumb background color |\n| `--t-shadow-popover` | Thumb shadow |\n| `--t-border-width-50` | Focus outline width |\n| `--t-size-100` | Focus outline offset |\n\n### Animation\n\nThe switch includes smooth transitions that match the design specifications:\n\n- **Background color transition**: 100ms ease-in-out for state changes\n- **Hover transitions**: 200ms linear for interactive feedback\n- **Thumb movement**: 100ms ease-in-out for position changes\n- **Enhanced hover effects**: Subtle shadow changes on thumb\n\n### Architecture\n\nThe component is built on Radix UI's Switch component, which provides:\n\n1. Accessibility features and keyboard navigation\n2. State management for controlled and uncontrolled modes\n3. Proper ARIA attributes and roles\n4. Cross-browser compatibility\n\nThe custom implementation adds:\n\n1. Design system styling through CSS modules\n2. RTL support with proper directional animations\n3. Size variants (small and medium)\n4. Hover and focus states\n5. Smooth transitions and animations\n\n### Browser Support\n\nThe Switch component is compatible with all modern browsers and includes proper RTL support for international applications.\n\n### Performance\n\n- Uses CSS transforms for smooth animations\n- Minimal re-renders through proper state management\n- Optimized for both controlled and uncontrolled usage patterns\n- Lightweight implementation with no unnecessary dependencies",
    "componentInfo": {
      "props": {},
      "description": "Switch Component",
      "usage": [
        "import { Switch } from '@tagaddod/react';",
        "<Switch />",
        "<Switch defaultPressed={false} />",
        "<Switch defaultPressed={true} />",
        "<Switch disabled={true} />",
        "<Switch \n  disabled={true} \n  defaultPressed={true} \n/>",
        "<Switch size=\"sm\" />",
        "<Switch size=\"md\" />",
        "function ToggleExample() {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n      <Switch \n        pressed={isPressed} \n        onPressedChange={setIsPressed} \n      />\n      <span>Switch is {isPressed ? 'on' : 'off'}</span>\n    </div>\n  );\n}",
        "<div dir=\"rtl\">\n  <Switch />\n</div>",
        "import { useState } from 'react';\n\nfunction ControlledSwitch() {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  return (\n    <Switch \n      pressed={isPressed}\n      onPressedChange={setIsPressed}\n    />\n  );\n}",
        "function UncontrolledSwitch() {\n  return (\n    <Switch \n      defaultPressed={false}\n      onPressedChange={(pressed) => console.log('Switch is:', pressed ? 'on' : 'off')}\n    />\n  );\n}",
        "<form onSubmit={handleSubmit}>\n  <label htmlFor=\"notifications\">\n    Enable notifications\n    <Switch \n      id=\"notifications\"\n      name=\"notifications\" \n      defaultPressed={true}\n    />\n  </label>\n  <button type=\"submit\">Save Settings</button>\n</form>",
        "<div>\n  <label>\n    Dark mode\n    <Switch defaultPressed={false} />\n  </label>\n</div>",
        "<div>\n  <Switch \n    pressed={feature.enabled}\n    onPressedChange={(enabled) => updateFeature({ enabled })}\n  />\n  <span>Advanced features</span>\n</div>",
        "<div>\n  <Switch \n    pressed={settings.emailNotifications}\n    onPressedChange={(enabled) => \n      updateSettings({ emailNotifications: enabled })\n    }\n  />\n  <span>Email notifications</span>\n</div>",
        "function NotificationSettings() {\n  const [settings, setSettings] = useState({\n    email: true,\n    push: false,\n    sms: false\n  });\n\n  const updateSetting = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  return (\n    <div>\n      <div>\n        <Switch \n          pressed={settings.email}\n          onPressedChange={(value) => updateSetting('email', value)}\n        />\n        <span>Email notifications</span>\n      </div>\n      <div>\n        <Switch \n          pressed={settings.push}\n          onPressedChange={(value) => updateSetting('push', value)}\n        />\n        <span>Push notifications</span>\n      </div>\n      <div>\n        <Switch \n          pressed={settings.sms}\n          onPressedChange={(value) => updateSetting('sms', value)}\n        />\n        <span>SMS notifications</span>\n      </div>\n    </div>\n  );\n}"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Sidebar",
    "stories": [
      {
        "id": "Components/Sidebar--default",
        "name": "Default",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Sidebar--rightposition",
        "name": "RightPosition",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "RightPosition",
        "description": ""
      },
      {
        "id": "Components/Sidebar--alwaysexpanded",
        "name": "AlwaysExpanded",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "AlwaysExpanded",
        "description": ""
      },
      {
        "id": "Components/Sidebar--nohoverexpand",
        "name": "NoHoverExpand",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "NoHoverExpand",
        "description": ""
      },
      {
        "id": "Components/Sidebar--custommenus",
        "name": "CustomMenus",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "CustomMenus",
        "description": ""
      },
      {
        "id": "Components/Sidebar--controlledexpansion",
        "name": "ControlledExpansion",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "ControlledExpansion",
        "description": ""
      },
      {
        "id": "Components/Sidebar--rtlarabic",
        "name": "RTLArabic",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "RTLArabic",
        "description": ""
      },
      {
        "id": "Components/Sidebar--hiddenbottomsection",
        "name": "HiddenBottomSection",
        "title": "Components/Sidebar",
        "importPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sidebar",
        "storyName": "HiddenBottomSection",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Sidebar/Sidebar.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as SidebarStories from './Sidebar.stories';\nimport { Sidebar } from './Sidebar';\n\n<Meta of={SidebarStories} />\n\n# Sidebar Component\n\nThe Sidebar component provides expandable navigation for applications with hierarchical menu structures, RTL support, and flexible layout integration. It supports hover-to-expand behavior, multi-level navigation, and proper content pushing instead of overlaying.\n\n## Overview\n\nThe Sidebar is a primary navigation component that organizes menu items into logical groups with support for parent-child relationships. It integrates naturally with page layouts using flexbox, automatically adjusting content when expanded or collapsed.\n\n## Import\n\n```jsx\nimport { Sidebar } from '@tagaddod-design/react';\n```\n\n## Props\n\n<ArgTypes of={Sidebar} />\n\n## Basic Usage\n\n<Canvas of={SidebarStories.Default} />\n\n```jsx\n// Basic sidebar with default menu items and default active item\n<div style={{ display: 'flex', height: '100vh' }}>\n  <Sidebar \n    selectedItem=\"analytics\"\n    onItemChange={setSelectedItem}\n    // Dashboard is active by default when no selectedItem is provided\n  />\n  <main style={{ flex: 1, padding: '24px' }}>\n    Your main content here\n  </main>\n</div>\n```\n\n### Default Active State\n\nThe Sidebar automatically shows a default active item (`'dashboard'`) when no `selectedItem` is provided, ensuring a consistent visual state on initial load.\n\n```jsx\n// Default active item (dashboard)\n<Sidebar onItemChange={setSelectedItem} />\n\n// Custom default active item\n<Sidebar \n  defaultSelectedItem=\"users\"\n  onItemChange={setSelectedItem} \n/>\n```\n\n## Layout Integration\n\nThe Sidebar component is designed to work with flexbox layouts, pushing content instead of overlaying it.\n\n### Recommended Layout Pattern\n\n```jsx\nfunction AppLayout() {\n  const [selectedItem, setSelectedItem] = useState('dashboard');\n  \n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Sidebar \n        selectedItem={selectedItem}\n        onItemChange={setSelectedItem}\n      />\n      <main style={{ \n        flex: 1, \n        padding: '24px',\n        overflow: 'auto'\n      }}>\n        <AppContent />\n      </main>\n    </div>\n  );\n}\n```\n\n### Right Position\n\n<Canvas of={SidebarStories.RightPosition} />\n\n```jsx\n// For right-positioned sidebar, use flex-direction: row-reverse\n<div style={{ \n  display: 'flex', \n  height: '100vh',\n  flexDirection: 'row-reverse' \n}}>\n  <Sidebar \n    position=\"right\"\n    selectedItem=\"users\"\n    onItemChange={setSelectedItem}\n  />\n  <main style={{ flex: 1 }}>Content</main>\n</div>\n```\n\n## Expansion Behavior\n\n### Hover Expand (Default)\n\nThe sidebar automatically expands when hovered and collapses when the mouse leaves.\n\n<Canvas of={SidebarStories.Default} />\n\n```jsx\n<Sidebar \n  hoverExpand={true} // Default behavior\n  selectedItem=\"electronics\"\n  onItemChange={setSelectedItem}\n/>\n```\n\n### Always Expanded\n\n<Canvas of={SidebarStories.AlwaysExpanded} />\n\n```jsx\n<Sidebar \n  defaultExpanded={true}\n  hoverExpand={false}\n  selectedItem=\"users\"\n  onItemChange={setSelectedItem}\n/>\n```\n\n### Controlled Expansion\n\n<Canvas of={SidebarStories.ControlledExpansion} />\n\n```jsx\nfunction ControlledSidebar() {\n  const [expanded, setExpanded] = useState(false);\n  \n  return (\n    <Sidebar\n      expanded={expanded}\n      onExpandedChange={setExpanded}\n      hoverExpand={false}\n    />\n  );\n}\n```\n\n## Menu Configuration\n\n### Custom Menu Items\n\n<Canvas of={SidebarStories.CustomMenus} />\n\n```jsx\nconst menuItems = [\n  {\n    id: 'products',\n    icon: IconPackage,\n    label: 'Products',\n    hasChildren: true,\n    children: [\n      { id: 'add-product', label: 'Add Product' },\n      { id: 'manage-products', label: 'Manage Products' },\n      { id: 'categories', label: 'Categories' }\n    ]\n  },\n  {\n    id: 'sales',\n    icon: IconChartBar,\n    label: 'Sales'\n  }\n];\n\nconst secondaryItems = [\n  {\n    id: 'customers',\n    icon: IconUsers,\n    label: 'Customers'\n  },\n  {\n    id: 'support',\n    icon: IconBell,\n    label: 'Support',\n    disabled: true // Disabled item example\n  }\n];\n\n<Sidebar\n  menuItems={menuItems}\n  secondaryItems={secondaryItems}\n  bottomItems={[\n    {\n      id: 'help',\n      icon: IconSettings,\n      label: 'Help & Support'\n    }\n  ]}\n/>\n```\n\n### Menu Item Structure\n\n```typescript\ninterface SidebarMenuItem {\n  id: string;                    // Unique identifier\n  icon?: React.ComponentType;    // Icon component (optional)\n  label: string;                 // Display text\n  labelEn?: string;             // English label for i18n\n  labelAr?: string;             // Arabic label for i18n\n  hasChildren?: boolean;        // Has sub-items\n  children?: SidebarMenuItem[]; // Sub-menu items\n  disabled?: boolean;           // Disabled state\n}\n```\n\n## Menu Sections\n\nThe sidebar organizes menu items into three logical sections:\n\n### Main Navigation (`menuItems`)\n\nPrimary navigation items with optional hierarchical children.\n\n```jsx\nconst mainItems = [\n  {\n    id: 'dashboard',\n    icon: IconHome,\n    label: 'Dashboard',\n    hasChildren: true,\n    children: [\n      { id: 'overview', label: 'Overview' },\n      { id: 'analytics', label: 'Analytics' }\n    ]\n  }\n];\n```\n\n### Secondary Navigation (`secondaryItems`)\n\nAdditional navigation items separated by a divider.\n\n```jsx\nconst secondaryItems = [\n  {\n    id: 'settings',\n    icon: IconSettings,\n    label: 'Settings'\n  }\n];\n```\n\n### Bottom Navigation (`bottomItems`)\n\nItems displayed at the bottom, typically for settings and logout. The bottom section can be toggled on or off.\n\n```jsx\nconst bottomItems = [\n  {\n    id: 'settings',\n    icon: IconSettings,\n    label: 'Settings'\n  },\n  {\n    id: 'logout',\n    icon: IconLogout,\n    label: 'Logout'\n  }\n];\n\n// Show bottom section (default)\n<Sidebar bottomItems={bottomItems} showBottomSection={true} />\n\n// Hide bottom section\n<Sidebar bottomItems={bottomItems} showBottomSection={false} />\n```\n\n### Toggle Bottom Section\n\nControl the visibility of the bottom section containing settings and logout items:\n\n```jsx\nfunction ConditionalBottomSection() {\n  const [showBottom, setShowBottom] = useState(true);\n  \n  return (\n    <div>\n      <button onClick={() => setShowBottom(!showBottom)}>\n        {showBottom ? 'Hide' : 'Show'} Bottom Section\n      </button>\n      <Sidebar \n        showBottomSection={showBottom}\n        selectedItem=\"dashboard\"\n        onItemChange={setSelectedItem}\n      />\n    </div>\n  );\n}\n```\n\n## States and Styling\n\n### Active State\n\nThe Sidebar supports different active states for main menu items and sub-menu items:\n\n- **Main menu items**: Show brand secondary background with white text\n- **Sub-menu items**: Show blue text with transparent background\n\n```jsx\n<Sidebar \n  selectedItem=\"analytics\" // Sets active state\n  onItemChange={setSelectedItem}\n/>\n\n// Sub-menu item active styling (blue text, no background)\n<Sidebar \n  selectedItem=\"electronics\" // Child of dashboard\n  onItemChange={setSelectedItem}\n/>\n```\n\n### Disabled Items\n\n```jsx\nconst menuItems = [\n  {\n    id: 'disabled-feature',\n    icon: IconUsers,\n    label: 'Coming Soon',\n    disabled: true // Item appears disabled\n  }\n];\n```\n\n### Parent Active State\n\nWhen a child item is selected, its parent automatically shows an active state.\n\n```jsx\n// If selectedItem is \"electronics\", the \"dashboard\" parent will show active state\n<Sidebar selectedItem=\"electronics\" />\n```\n\n## Internationalization & RTL Support\n\nThe Sidebar component fully supports Right-to-Left (RTL) languages with automatic adjustments:\n\n### RTL Features\n\n1. **Automatic Border Positioning**: Border switches from right to left in RTL mode\n2. **Text Alignment**: Menu labels align to the right for Arabic text\n3. **Font Family Switching**: Automatically uses Arabic font family (`Tajawal`) in RTL mode\n4. **Line Height Adjustments**: Proper line-height for Arabic text rendering\n5. **Icon Positioning**: Icons maintain proper spacing in RTL layouts\n\n### RTL Usage\n\n```jsx\n// The component automatically detects RTL from document direction\n// No additional props needed\n<Sidebar \n  selectedItem=\"analytics\"\n  onItemChange={setSelectedItem}\n  // RTL behavior is automatic based on document.dir or html[dir]\n/>\n```\n\n### Bilingual Menu Items\n\n```jsx\nconst bilingualItems = [\n  {\n    id: 'dashboard',\n    icon: IconHome,\n    label: isRTL ? 'لوحة التحكم' : 'Dashboard',\n    labelEn: 'Dashboard',\n    labelAr: 'لوحة التحكم'\n  }\n];\n```\n\n## Accessibility\n\nThe Sidebar component includes comprehensive accessibility features:\n\n- **Keyboard Navigation**: Full support for Tab, Arrow keys, Enter, and Escape\n- **ARIA Labels**: Proper `aria-label` attributes for screen readers\n- **Focus Management**: Clear focus indicators and logical tab order\n- **Screen Reader Support**: Semantic HTML structure with proper roles\n- **High Contrast**: Support for `prefers-contrast: high`\n- **Reduced Motion**: Respects `prefers-reduced-motion: reduce`\n\n### Accessibility Best Practices\n\n```jsx\n<Sidebar \n  selectedItem=\"dashboard\"\n  onItemChange={setSelectedItem}\n  // Component automatically provides:\n  // - aria-label for menu items\n  // - proper button roles\n  // - keyboard navigation\n  // - focus management\n/>\n```\n\n## Sizing and Dimensions\n\n```jsx\n// Default sizes (customizable via CSS variables)\nconst sizes = {\n  collapsed: '64px',      // 4rem\n  expanded: '240px',      // 15rem\n  height: '100vh'         // Full viewport height\n};\n\n// CSS variable customization\n<Sidebar \n  style={{\n    '--sidebar-width-collapsed': '80px',\n    '--sidebar-width-expanded': '280px'\n  }}\n/>\n```\n\n## Styling Customization\n\n### CSS Variables\n\nThe Sidebar uses design tokens for consistent styling:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-color-surface-primary` | Background color |\n| `--t-color-border-secondary` | Border color |\n| `--t-color-text-primary` | Inactive text color |\n| `--t-color-text-link` | Active text color |\n| `--t-color-fill-brand-secondary` | Active background |\n| `--t-space-200/300/400/1000` | Padding and spacing |\n| `--t-font-family-primary` | English font family |\n| `--t-font-family-arabic` | Arabic font family |\n| `--t-border-radius-200` | Border radius |\n| `--t-duration-300` | Animation duration |\n\n### Custom Styling\n\n```jsx\n<Sidebar \n  className=\"custom-sidebar\"\n  style={{\n    '--sidebar-width-expanded': '320px',\n    '--custom-shadow': '0 4px 12px rgba(0,0,0,0.1)'\n  }}\n/>\n```\n\n## Common Use Cases\n\n### Admin Dashboard\n\n```jsx\nfunction AdminLayout() {\n  const [selectedItem, setSelectedItem] = useState('overview');\n  \n  const adminMenuItems = [\n    {\n      id: 'dashboard',\n      icon: IconHome,\n      label: 'Dashboard',\n      hasChildren: true,\n      children: [\n        { id: 'overview', label: 'Overview' },\n        { id: 'analytics', label: 'Analytics' },\n        { id: 'reports', label: 'Reports' }\n      ]\n    },\n    {\n      id: 'users',\n      icon: IconUsers,\n      label: 'User Management'\n    }\n  ];\n  \n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Sidebar\n        selectedItem={selectedItem}\n        onItemChange={setSelectedItem}\n        menuItems={adminMenuItems}\n        bottomItems={[\n          { id: 'settings', icon: IconSettings, label: 'Settings' },\n          { id: 'logout', icon: IconLogout, label: 'Logout' }\n        ]}\n      />\n      <main style={{ flex: 1, overflow: 'auto' }}>\n        <AdminContent selectedTab={selectedItem} />\n      </main>\n    </div>\n  );\n}\n```\n\n### E-commerce Navigation\n\n```jsx\nconst ecommerceMenu = [\n  {\n    id: 'products',\n    icon: IconPackage,\n    label: 'Products',\n    hasChildren: true,\n    children: [\n      { id: 'all-products', label: 'All Products' },\n      { id: 'add-product', label: 'Add Product' },\n      { id: 'categories', label: 'Categories' },\n      { id: 'inventory', label: 'Inventory' }\n    ]\n  },\n  {\n    id: 'orders',\n    icon: IconShoppingCart,\n    label: 'Orders',\n    hasChildren: true,\n    children: [\n      { id: 'all-orders', label: 'All Orders' },\n      { id: 'pending', label: 'Pending' },\n      { id: 'shipped', label: 'Shipped' }\n    ]\n  }\n];\n```\n\n## Implementation Details\n\n### Component Architecture\n\n1. **Menu Rendering**: Recursive rendering for hierarchical items\n2. **State Management**: Internal state for expansion and group toggles\n3. **RTL Detection**: Automatic detection from document properties\n4. **Layout Integration**: Flexbox-based for natural content flow\n\n### Performance\n\n- **Efficient Re-renders**: Optimized with proper React patterns\n- **CSS Transitions**: Smooth animations for expansion/collapse\n- **Minimal Bundle**: Tree-shakeable with other components\n\n### Browser Support\n\nCompatible with all modern browsers including:\n- Chrome/Chromium 88+\n- Firefox 85+\n- Safari 14+\n- Edge 88+\n\nFull RTL support in all supported browsers.\n\n## Migration from Fixed Layout\n\nIf upgrading from a fixed-position sidebar:\n\n```jsx\n// Old: Fixed overlay pattern\n<div>\n  <Sidebar /> {/* Fixed positioned */}\n  <div style={{ marginLeft: '240px' }}>Content</div>\n</div>\n\n// New: Flexible layout pattern\n<div style={{ display: 'flex' }}>\n  <Sidebar /> {/* Flexible positioned */}\n  <div style={{ flex: 1 }}>Content</div>\n</div>\n```",
    "componentInfo": {
      "props": {},
      "description": "Sidebar Component",
      "usage": [
        "import { Sidebar } from '@tagaddod-design/react';",
        "// Basic sidebar with default menu items and default active item\n<div style={{ display: 'flex', height: '100vh' }}>\n  <Sidebar \n    selectedItem=\"analytics\"\n    onItemChange={setSelectedItem}\n    // Dashboard is active by default when no selectedItem is provided\n  />\n  <main style={{ flex: 1, padding: '24px' }}>\n    Your main content here\n  </main>\n</div>",
        "// Default active item (dashboard)\n<Sidebar onItemChange={setSelectedItem} />\n\n// Custom default active item\n<Sidebar \n  defaultSelectedItem=\"users\"\n  onItemChange={setSelectedItem} \n/>",
        "function AppLayout() {\n  const [selectedItem, setSelectedItem] = useState('dashboard');\n  \n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Sidebar \n        selectedItem={selectedItem}\n        onItemChange={setSelectedItem}\n      />\n      <main style={{ \n        flex: 1, \n        padding: '24px',\n        overflow: 'auto'\n      }}>\n        <AppContent />\n      </main>\n    </div>\n  );\n}",
        "// For right-positioned sidebar, use flex-direction: row-reverse\n<div style={{ \n  display: 'flex', \n  height: '100vh',\n  flexDirection: 'row-reverse' \n}}>\n  <Sidebar \n    position=\"right\"\n    selectedItem=\"users\"\n    onItemChange={setSelectedItem}\n  />\n  <main style={{ flex: 1 }}>Content</main>\n</div>",
        "<Sidebar \n  hoverExpand={true} // Default behavior\n  selectedItem=\"electronics\"\n  onItemChange={setSelectedItem}\n/>",
        "<Sidebar \n  defaultExpanded={true}\n  hoverExpand={false}\n  selectedItem=\"users\"\n  onItemChange={setSelectedItem}\n/>",
        "function ControlledSidebar() {\n  const [expanded, setExpanded] = useState(false);\n  \n  return (\n    <Sidebar\n      expanded={expanded}\n      onExpandedChange={setExpanded}\n      hoverExpand={false}\n    />\n  );\n}",
        "const menuItems = [\n  {\n    id: 'products',\n    icon: IconPackage,\n    label: 'Products',\n    hasChildren: true,\n    children: [\n      { id: 'add-product', label: 'Add Product' },\n      { id: 'manage-products', label: 'Manage Products' },\n      { id: 'categories', label: 'Categories' }\n    ]\n  },\n  {\n    id: 'sales',\n    icon: IconChartBar,\n    label: 'Sales'\n  }\n];\n\nconst secondaryItems = [\n  {\n    id: 'customers',\n    icon: IconUsers,\n    label: 'Customers'\n  },\n  {\n    id: 'support',\n    icon: IconBell,\n    label: 'Support',\n    disabled: true // Disabled item example\n  }\n];\n\n<Sidebar\n  menuItems={menuItems}\n  secondaryItems={secondaryItems}\n  bottomItems={[\n    {\n      id: 'help',\n      icon: IconSettings,\n      label: 'Help & Support'\n    }\n  ]}\n/>",
        "const mainItems = [\n  {\n    id: 'dashboard',\n    icon: IconHome,\n    label: 'Dashboard',\n    hasChildren: true,\n    children: [\n      { id: 'overview', label: 'Overview' },\n      { id: 'analytics', label: 'Analytics' }\n    ]\n  }\n];",
        "const secondaryItems = [\n  {\n    id: 'settings',\n    icon: IconSettings,\n    label: 'Settings'\n  }\n];",
        "const bottomItems = [\n  {\n    id: 'settings',\n    icon: IconSettings,\n    label: 'Settings'\n  },\n  {\n    id: 'logout',\n    icon: IconLogout,\n    label: 'Logout'\n  }\n];\n\n// Show bottom section (default)\n<Sidebar bottomItems={bottomItems} showBottomSection={true} />\n\n// Hide bottom section\n<Sidebar bottomItems={bottomItems} showBottomSection={false} />",
        "function ConditionalBottomSection() {\n  const [showBottom, setShowBottom] = useState(true);\n  \n  return (\n    <div>\n      <button onClick={() => setShowBottom(!showBottom)}>\n        {showBottom ? 'Hide' : 'Show'} Bottom Section\n      </button>\n      <Sidebar \n        showBottomSection={showBottom}\n        selectedItem=\"dashboard\"\n        onItemChange={setSelectedItem}\n      />\n    </div>\n  );\n}",
        "<Sidebar \n  selectedItem=\"analytics\" // Sets active state\n  onItemChange={setSelectedItem}\n/>\n\n// Sub-menu item active styling (blue text, no background)\n<Sidebar \n  selectedItem=\"electronics\" // Child of dashboard\n  onItemChange={setSelectedItem}\n/>",
        "const menuItems = [\n  {\n    id: 'disabled-feature',\n    icon: IconUsers,\n    label: 'Coming Soon',\n    disabled: true // Item appears disabled\n  }\n];",
        "// If selectedItem is \"electronics\", the \"dashboard\" parent will show active state\n<Sidebar selectedItem=\"electronics\" />",
        "// The component automatically detects RTL from document direction\n// No additional props needed\n<Sidebar \n  selectedItem=\"analytics\"\n  onItemChange={setSelectedItem}\n  // RTL behavior is automatic based on document.dir or html[dir]\n/>",
        "const bilingualItems = [\n  {\n    id: 'dashboard',\n    icon: IconHome,\n    label: isRTL ? 'لوحة التحكم' : 'Dashboard',\n    labelEn: 'Dashboard',\n    labelAr: 'لوحة التحكم'\n  }\n];",
        "<Sidebar \n  selectedItem=\"dashboard\"\n  onItemChange={setSelectedItem}\n  // Component automatically provides:\n  // - aria-label for menu items\n  // - proper button roles\n  // - keyboard navigation\n  // - focus management\n/>",
        "// Default sizes (customizable via CSS variables)\nconst sizes = {\n  collapsed: '64px',      // 4rem\n  expanded: '240px',      // 15rem\n  height: '100vh'         // Full viewport height\n};\n\n// CSS variable customization\n<Sidebar \n  style={{\n    '--sidebar-width-collapsed': '80px',\n    '--sidebar-width-expanded': '280px'\n  }}\n/>",
        "<Sidebar \n  className=\"custom-sidebar\"\n  style={{\n    '--sidebar-width-expanded': '320px',\n    '--custom-shadow': '0 4px 12px rgba(0,0,0,0.1)'\n  }}\n/>",
        "function AdminLayout() {\n  const [selectedItem, setSelectedItem] = useState('overview');\n  \n  const adminMenuItems = [\n    {\n      id: 'dashboard',\n      icon: IconHome,\n      label: 'Dashboard',\n      hasChildren: true,\n      children: [\n        { id: 'overview', label: 'Overview' },\n        { id: 'analytics', label: 'Analytics' },\n        { id: 'reports', label: 'Reports' }\n      ]\n    },\n    {\n      id: 'users',\n      icon: IconUsers,\n      label: 'User Management'\n    }\n  ];\n  \n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Sidebar\n        selectedItem={selectedItem}\n        onItemChange={setSelectedItem}\n        menuItems={adminMenuItems}\n        bottomItems={[\n          { id: 'settings', icon: IconSettings, label: 'Settings' },\n          { id: 'logout', icon: IconLogout, label: 'Logout' }\n        ]}\n      />\n      <main style={{ flex: 1, overflow: 'auto' }}>\n        <AdminContent selectedTab={selectedItem} />\n      </main>\n    </div>\n  );\n}",
        "const ecommerceMenu = [\n  {\n    id: 'products',\n    icon: IconPackage,\n    label: 'Products',\n    hasChildren: true,\n    children: [\n      { id: 'all-products', label: 'All Products' },\n      { id: 'add-product', label: 'Add Product' },\n      { id: 'categories', label: 'Categories' },\n      { id: 'inventory', label: 'Inventory' }\n    ]\n  },\n  {\n    id: 'orders',\n    icon: IconShoppingCart,\n    label: 'Orders',\n    hasChildren: true,\n    children: [\n      { id: 'all-orders', label: 'All Orders' },\n      { id: 'pending', label: 'Pending' },\n      { id: 'shipped', label: 'Shipped' }\n    ]\n  }\n];",
        "// Old: Fixed overlay pattern\n<div>\n  <Sidebar /> {/* Fixed positioned */}\n  <div style={{ marginLeft: '240px' }}>Content</div>\n</div>\n\n// New: Flexible layout pattern\n<div style={{ display: 'flex' }}>\n  <Sidebar /> {/* Flexible positioned */}\n  <div style={{ flex: 1 }}>Content</div>\n</div>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Select",
    "stories": [
      {
        "id": "Components/Select--default",
        "name": "Default",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Select--sizes",
        "name": "Sizes",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "Sizes",
        "description": ""
      },
      {
        "id": "Components/Select--states",
        "name": "States",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "States",
        "description": ""
      },
      {
        "id": "Components/Select--prefixandsearch",
        "name": "PrefixAndSearch",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "PrefixAndSearch",
        "description": ""
      },
      {
        "id": "Components/Select--widthcontrol",
        "name": "WidthControl",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "WidthControl",
        "description": ""
      },
      {
        "id": "Components/Select--rtlsupport",
        "name": "RTLSupport",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "RTLSupport",
        "description": ""
      },
      {
        "id": "Components/Select--advancedfeatures",
        "name": "AdvancedFeatures",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "AdvancedFeatures",
        "description": ""
      },
      {
        "id": "Components/Select--contactform",
        "name": "ContactForm",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "ContactForm",
        "description": ""
      },
      {
        "id": "Components/Select--userprofile",
        "name": "UserProfile",
        "title": "Components/Select",
        "importPath": "../packages/react/src/components/Select/Select.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Select",
        "storyName": "UserProfile",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Select/Select.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as SelectStories from './Select.stories';\nimport { Select } from './Select';\n\n<Meta of={SelectStories} />\n\n# Select Component\n\nThe Select component provides a dropdown interface for users to choose one option from a list. It's built on top of Radix UI's Select primitive and follows the Tagaddod Design System conventions for consistency and accessibility.\n\n## Overview\n\nThe Select component is ideal when you have 4 or more options to avoid cluttering the interface with radio buttons. It supports various states (hover, focus, error, disabled), multiple sizes, and full RTL support for Arabic interfaces. Fields are treated as required by default, with optional fields explicitly marked when needed.\n\n**Key Features:**\n- Built with Radix UI Select primitives for accessibility\n- Support for both controlled and uncontrolled modes\n- Multiple size variants (micro, medium, large)\n- Full RTL support with proper text rendering and icon positioning\n- Error states with validation messages\n- Help text support\n- Fields required by default, optional when specified\n- Prefix icon support with proper RTL handling\n- Searchable select functionality with RTL-aware search input\n- Keyboard navigation and screen reader support\n- Theme support for both Tagaddod and GreenPan brands\n- Width control with maxWidth and minWidth props\n- Optimized layout with grouped prefix/value positioning\n\n## Import\n\n```jsx\nimport { Select } from '@tagaddod-design/react';\n```\n\n## Props\n\n<ArgTypes of={Select} />\n\n## Basic Usage\n\n<Canvas of={SelectStories.Default} />\n\n```jsx\n// Basic select with options\nconst options = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n  { value: 'cherry', label: 'Cherry' },\n];\n\n<Select\n  label=\"Favorite Fruit\"\n  placeholder=\"Select a fruit...\"\n  options={options}\n/>\n```\n\n## Usage Examples\n\nThe Select component displays a clean interface with labels above the field. All fields are required by default unless explicitly marked as optional.\n\n<Canvas of={SelectStories.Default} />\n\n```jsx\n<Select\n  label=\"Country\"\n  placeholder=\"Select your country...\"\n  options={countryOptions}\n/>\n```\n\n## Sizes\n\nThe Select component comes in three sizes to match different interface contexts.\n\n### Micro Size\n\n<Canvas of={SelectStories.Sizes} />\n\n```jsx\n<Select\n  size=\"micro\"\n  label=\"Size\"\n  options={options}\n/>\n```\n\n### Medium Size (Default)\n\n<Canvas of={SelectStories.Sizes} />\n\n```jsx\n<Select\n  size=\"medium\"\n  label=\"Size\"\n  options={options}\n/>\n```\n\n### Large Size\n\n<Canvas of={SelectStories.Sizes} />\n\n```jsx\n<Select\n  size=\"large\"\n  label=\"Size\"\n  options={options}\n/>\n```\n\n## States\n\n\n### With Prefix Icon\n\n<Canvas of={SelectStories.PrefixAndSearch} />\n\nThe Select component supports prefix icons that are properly positioned in both LTR and RTL layouts. The icon is grouped with the value text and maintains a consistent 4px gap.\n\n```jsx\nimport { IconUser } from '@tabler/icons-react';\n\n<Select\n  label=\"User Type\"\n  prefix={<IconUser size={18} />}\n  placeholder=\"Select user type...\"\n  options={userTypeOptions}\n/>\n```\n\n**Prefix Icon Features:**\n- Automatically positions correctly in RTL mode (icon appears before text in reading order)\n- Maintains consistent 4px spacing between icon and text\n- Supports any React node as prefix (icons, text, etc.)\n- Properly grouped with value text for optimal layout\n\n### With Help Text\n\n<Canvas of={SelectStories.States} />\n\n```jsx\n<Select\n  label=\"Country\"\n  placeholder=\"Select your country...\"\n  helpText=\"This helps us provide location-specific features.\"\n  options={countryOptions}\n/>\n```\n\n### Component States\n\n<Canvas of={SelectStories.States} />\n\nThe States story demonstrates all component states. Remember that fields are required by default without any visual indicators:\n\n```jsx\n// Default field (required by default - no asterisk needed)\n<Select\n  label=\"Selection\"\n  placeholder=\"Please select an option...\"\n  options={options}\n/>\n\n// Optional field (explicitly marked)\n<Select\n  label=\"Optional Selection\"\n  placeholder=\"Select if you want...\"\n  optional\n  options={options}\n/>\n\n// Error state\n<Select\n  label=\"Field with Error\"\n  placeholder=\"Please select an option...\"\n  errorMessage=\"This field is required.\"\n  options={options}\n/>\n\n// Disabled state\n<Select\n  label=\"Disabled Select\"\n  placeholder=\"Cannot select...\"\n  disabled\n  options={options}\n/>\n\n// With help text\n<Select\n  label=\"Field with Help\"\n  placeholder=\"Select an option...\"\n  helpText=\"This is helpful information about the field.\"\n  options={options}\n/>\n```\n\n## Advanced Features\n\n### Searchable Select\n\n<Canvas of={SelectStories.PrefixAndSearch} />\n\nThe Select component supports searchable functionality for long option lists. The search input automatically adapts to RTL/LTR text direction.\n\n```jsx\nimport { IconSearch } from '@tabler/icons-react';\n\n<Select\n  label=\"Search Countries\"\n  placeholder=\"Search countries...\"\n  searchable\n  searchPlaceholder=\"Type to search...\"\n  options={countryOptions}\n/>\n\n// Searchable with prefix icon\n<Select\n  label=\"Search Users\"\n  prefix={<IconSearch size={16} />}\n  placeholder=\"Search users...\"\n  searchable\n  searchPlaceholder=\"Type to filter users...\"\n  options={userOptions}\n/>\n```\n\n**Searchable Features:**\n- Real-time filtering as you type\n- Search input with proper RTL support (search icon positions correctly)\n- Custom search placeholder text\n- Combines with prefix icons seamlessly\n- Keyboard navigation works with filtered results\n- \"No options found\" message when no matches\n\n### Width Control\n\n<Canvas of={SelectStories.WidthControl} />\n\n```jsx\n// Default width\n<Select\n  label=\"Default Width\"\n  placeholder=\"Default width...\"\n  options={options}\n/>\n\n// Minimum width\n<Select\n  label=\"Min Width (200px)\"\n  placeholder=\"Has minimum width...\"\n  minWidth={200}\n  options={options}\n/>\n\n// Maximum width\n<Select\n  label=\"Max Width (300px)\"\n  placeholder=\"Has maximum width...\"\n  maxWidth={300}\n  options={options}\n/>\n\n// Full width\n<Select\n  label=\"Full Width Select\"\n  placeholder=\"Takes full container width...\"\n  fullWidth\n  options={options}\n/>\n```\n\n### Long Option Lists\n\n<Canvas of={SelectStories.AdvancedFeatures} />\n\n```jsx\n<Select\n  label=\"Many Options\"\n  placeholder=\"Select from many options...\"\n  options={longOptionsList}\n/>\n```\n\n### Disabled Options\n\n<Canvas of={SelectStories.AdvancedFeatures} />\n\n```jsx\nconst optionsWithDisabled = [\n  { value: 'available1', label: 'Available Option 1' },\n  { value: 'disabled1', label: 'Disabled Option 1', disabled: true },\n  { value: 'available2', label: 'Available Option 2' },\n];\n\n<Select\n  label=\"Select with Some Disabled Options\"\n  options={optionsWithDisabled}\n/>\n```\n\n## Real-World Examples\n\n### Contact Form\n\n<Canvas of={SelectStories.ContactForm} />\n\n```jsx\nconst ContactForm = () => (\n  <div style={{ maxWidth: '400px', display: 'flex', flexDirection: 'column', gap: '16px' }}>\n    <Select\n      label=\"How did you hear about us?\"\n      placeholder=\"Select one...\"\n      options={[\n        { value: 'search', label: 'Search Engine' },\n        { value: 'social', label: 'Social Media' },\n        { value: 'friend', label: 'Friend/Colleague' },\n        { value: 'advertisement', label: 'Advertisement' },\n        { value: 'other', label: 'Other' },\n      ]}\n      helpText=\"This helps us understand our reach better.\"\n    />\n    \n    <Select\n      label=\"Priority Level\"\n      options={[\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' },\n      ]}\n      required\n    />\n  </div>\n);\n```\n\n### User Profile Setup\n\n<Canvas of={SelectStories.UserProfile} />\n\n```jsx\nimport { IconSearch } from '@tabler/icons-react';\n\nconst UserProfile = () => (\n  <div style={{ maxWidth: '500px' }}>\n    <Select\n      label=\"Country\"\n      size=\"large\"\n      prefix={<IconSearch size={20} />}\n      placeholder=\"Search and select your country...\"\n      options={countryOptions}\n      fullWidth\n      helpText=\"We'll use this to show relevant content and pricing.\"\n    />\n    \n    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginTop: '20px' }}>\n      <Select\n        label=\"Time Zone\"\n        options={timezoneOptions}\n        optional\n      />\n      \n      <Select\n        label=\"Language\"\n        options={languageOptions}\n        defaultValue=\"en\"\n      />\n    </div>\n  </div>\n);\n```\n\n## Controlled vs Uncontrolled\n\n### Uncontrolled (Default Value)\n\n```jsx\nconst [selectedValue, setSelectedValue] = useState();\n\n<Select\n  label=\"Uncontrolled Select\"\n  defaultValue=\"banana\"\n  options={options}\n  onValueChange={(value) => {\n    console.log('Selected:', value);\n  }}\n/>\n```\n\n### Controlled (Value Prop)\n\n```jsx\nconst [selectedValue, setSelectedValue] = useState('');\n\n<Select\n  label=\"Controlled Select\"\n  value={selectedValue}\n  options={options}\n  onValueChange={setSelectedValue}\n/>\n```\n\n## Accessibility\n\n<Canvas of={SelectStories.States} />\n\nThe Select component is built with accessibility in mind, using Radix UI's Select primitive which provides:\n\n### Keyboard Navigation\n\n- **Space/Enter**: Opens the select dropdown\n- **Arrow Up/Down**: Navigate through options\n- **Escape**: Closes the dropdown\n- **Tab**: Moves focus to next focusable element\n- **Shift+Tab**: Moves focus to previous focusable element\n\n### Screen Reader Support\n\n- Proper ARIA attributes are automatically applied\n- Selected values are announced correctly\n- Error states are properly communicated\n- Required fields are indicated to screen readers\n\n### Best Practices\n\n```jsx\n// Always provide clear labels (fields are required by default)\n<Select\n  label=\"Country of Residence\"\n  options={countryOptions}\n/>\n\n// Mark optional fields explicitly\n<Select\n  label=\"Preferred Contact Method\"\n  helpText=\"How would you like us to reach you?\"\n  options={contactOptions}\n  optional\n/>\n\n// Provide clear error messages\n<Select\n  label=\"Selection Required\"\n  errorMessage=\"Please select an option to continue.\"\n  options={options}\n/>\n\n// Use descriptive option labels\nconst options = [\n  { value: 'email', label: 'Email (Recommended)' },\n  { value: 'phone', label: 'Phone Call' },\n  { value: 'sms', label: 'Text Message' },\n];\n```\n\n### ARIA Attributes Used\n\n- `aria-invalid`: Indicates error states\n- `aria-describedby`: Links to help text and error messages\n- `aria-required`: Indicates required fields\n- `role`: Proper semantic roles for dropdown components\n\n## Internationalization\n\n<Canvas of={SelectStories.RTLSupport} />\n\nThe Select component fully supports Right-to-Left (RTL) languages like Arabic:\n\n### RTL Basic Usage\n\n```jsx\n<div dir=\"rtl\">\n  <Select\n    label=\"اختر الفاكهة المفضلة\"\n    placeholder=\"اختر فاكهة...\"\n    options={[\n      { value: 'apple', label: 'تفاح' },\n      { value: 'banana', label: 'موز' },\n      { value: 'cherry', label: 'كرز' },\n    ]}\n  />\n</div>\n```\n\n### RTL with Prefix Icon\n\n```jsx\nimport { IconUser } from '@tabler/icons-react';\n\n<div dir=\"rtl\">\n  <Select\n    label=\"نوع المستخدم\"\n    prefix={<IconUser size={18} />}\n    placeholder=\"اختر نوع المستخدم...\"\n    options={arabicUserTypes}\n  />\n</div>\n```\n\n### RTL Searchable Select\n\n```jsx\nimport { IconSearch } from '@tabler/icons-react';\n\n<div dir=\"rtl\">\n  <Select\n    label=\"البحث في البلدان\"\n    prefix={<IconSearch size={16} />}\n    placeholder=\"البحث في البلدان...\"\n    searchable\n    searchPlaceholder=\"اكتب للبحث...\"\n    options={arabicCountries}\n  />\n</div>\n```\n\n### RTL with Inside Label\n\n<Canvas of={SelectStories.RTLSupport} />\n\n```jsx\n<div dir=\"rtl\">\n  <Select\n    label=\"اختر الفاكهة المفضلة\"\n    placeholder=\"اختر فاكهة...\"\n    defaultValue=\"banana\"\n    options={arabicOptions}\n  />\n</div>\n```\n\n### RTL with Error Message\n\n<Canvas of={SelectStories.RTLSupport} />\n\n```jsx\n<div dir=\"rtl\">\n  <Select\n    label=\"حقل مطلوب\"\n    placeholder=\"يرجى اختيار خيار...\"\n    errorMessage=\"هذا الحقل مطلوب.\"\n    options={arabicOptions}\n  />\n</div>\n```\n\n**RTL Considerations:**\n- Icons and chevrons automatically flip direction\n- Text alignment adjusts appropriately\n- Line height is optimized for Arabic fonts\n- Dropdown positioning adapts to RTL layout\n- Prefix icons position correctly before text in reading order\n- Search input within dropdown adapts to RTL direction automatically\n- Optional labels display as \"اختياري\" in RTL mode instead of \"(Optional)\"\n- Grouped prefix/value layout maintains proper 4px spacing in RTL\n- All component states work correctly in RTL mode\n\n## Styling and Customization\n\n### CSS Variables\n\nThe Select component uses the following design tokens:\n\n| Variable | Purpose | Default Value |\n|----------|---------|---------------|\n| `--t-color-surface-primary` | Background color | Theme-dependent |\n| `--t-color-border-secondary` | Border color | Theme-dependent |\n| `--t-color-text-primary` | Text color | Theme-dependent |\n| `--t-color-fill-brand` | Focus border color | Theme-dependent |\n| `--t-space-*` | Spacing values | Token values |\n| `--t-font-family-primary` | Font family | Token value |\n| `--t-border-radius-200` | Border radius | Token value |\n\n### Custom Styling\n\n```jsx\n// Using className for additional styling\n<Select\n  className=\"custom-select\"\n  label=\"Custom Styled Select\"\n  options={options}\n/>\n```\n\n```css\n/* Custom CSS */\n.custom-select {\n  /* Custom styles that work with design tokens */\n  --t-color-fill-brand: #custom-brand-color;\n}\n\n/* Target specific parts if needed */\n.custom-select [data-radix-select-trigger] {\n  /* Custom trigger styles */\n}\n```\n\n### Theme Support\n\nThe component automatically adapts to both Tagaddod and GreenPan themes:\n\n```jsx\n// The component will automatically use the correct theme\n<ThemeProvider theme=\"tagaddod\">\n  <Select label=\"Tagaddod Theme\" options={options} />\n</ThemeProvider>\n\n<ThemeProvider theme=\"greenpan\">\n  <Select label=\"GreenPan Theme\" options={options} />\n</ThemeProvider>\n```\n\n## Advanced Usage Patterns\n\n### Form Integration\n\n```jsx\nimport { useForm, Controller } from 'react-hook-form';\n\nconst MyForm = () => {\n  const { control, handleSubmit } = useForm();\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"country\"\n        control={control}\n        rules={{ required: 'Please select a country' }}\n        render={({ field, fieldState }) => (\n          <Select\n            label=\"Country\"\n            value={field.value}\n            onValueChange={field.onChange}\n            options={countryOptions}\n            errorMessage={fieldState.error?.message}\n          />\n        )}\n      />\n    </form>\n  );\n};\n```\n\n### Dynamic Options\n\n```jsx\nconst [options, setOptions] = useState([]);\nconst [loading, setLoading] = useState(false);\n\nconst loadOptions = async () => {\n  setLoading(true);\n  const data = await fetchOptions();\n  setOptions(data);\n  setLoading(false);\n};\n\n<Select\n  label=\"Dynamic Options\"\n  options={options}\n  disabled={loading}\n  placeholder={loading ? 'Loading...' : 'Select an option...'}\n/>\n```\n\n### Grouped Options\n\n```jsx\n// While this component doesn't support groups natively,\n// you can achieve grouping by organizing your options\nconst organizedOptions = [\n  // Fruits group\n  { value: 'fruits-divider', label: '--- Fruits ---', disabled: true },\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n  \n  // Vegetables group  \n  { value: 'vegetables-divider', label: '--- Vegetables ---', disabled: true },\n  { value: 'carrot', label: 'Carrot' },\n  { value: 'lettuce', label: 'Lettuce' },\n];\n```\n\n## Component API Reference\n\n### Select Props\n\n```typescript\ninterface SelectProps {\n  /** Text label for the select */\n  label?: string;\n  \n\n  \n  /** Help text displayed below the select */\n  helpText?: string;\n  \n  /** Error message displayed below the select */\n  errorMessage?: string;\n  \n  /** Size of the select field */\n  size?: 'micro' | 'medium' | 'large';\n  \n  /** Whether the select should take full width of its container */\n  fullWidth?: boolean;\n  \n  /** Whether to hide the label visually (still accessible to screen readers) */\n  hideLabel?: boolean;\n  \n  /** Mark the field as optional, displaying \"(Optional)\" or \"اختياري\" text next to label */\n  optional?: boolean;\n  \n  /** Placeholder text when no option is selected */\n  placeholder?: string;\n  \n  /** Array of options to display in the select */\n  options: SelectOption[];\n  \n  /** Current selected value */\n  value?: string;\n  \n  /** Default selected value (uncontrolled) */\n  defaultValue?: string;\n  \n  /** Callback when selection changes */\n  onValueChange?: (value: string) => void;\n  \n  /** Whether the select is disabled */\n  disabled?: boolean;\n  \n  /** Whether the field is required (true by default) */\n  required?: boolean;\n  \n  /** Maximum width of the select component */\n  maxWidth?: string | number;\n  \n  /** Minimum width of the select component */\n  minWidth?: string | number;\n  \n  /** Content to display before the select value (icon or text) */\n  prefix?: React.ReactNode;\n  \n  /** Whether to show search input for long lists */\n  searchable?: boolean;\n  \n  /** Placeholder text for search input */\n  searchPlaceholder?: string;\n  \n  /** Additional class names */\n  className?: string;\n  \n  /** ID for the select */\n  id?: string;\n  \n  /** Name attribute for form submission */\n  name?: string;\n}\n\ninterface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n```\n\n### Constants\n\n```jsx\nimport { selectSizes } from '@tagaddod-design/react';\n\n// Available sizes: ['micro', 'medium', 'large']\nconsole.log(selectSizes);\n```\n\n## Testing\n\n### Unit Testing Examples\n\n```jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Select } from '@tagaddod-design/react';\n\nconst options = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n];\n\ntest('renders select with label', () => {\n  render(\n    <Select\n      label=\"Favorite Fruit\"\n      options={options}\n    />\n  );\n  \n  expect(screen.getByText('Favorite Fruit')).toBeInTheDocument();\n});\n\ntest('displays placeholder when no value selected', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      placeholder=\"Choose a fruit...\"\n      options={options}\n    />\n  );\n  \n  expect(screen.getByText('Choose a fruit...')).toBeInTheDocument();\n});\n\ntest('calls onValueChange when option is selected', async () => {\n  const handleChange = jest.fn();\n  const user = userEvent.setup();\n  \n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      onValueChange={handleChange}\n    />\n  );\n  \n  // Open dropdown\n  await user.click(screen.getByRole('combobox'));\n  \n  // Select option\n  await user.click(screen.getByText('Apple'));\n  \n  expect(handleChange).toHaveBeenCalledWith('apple');\n});\n\ntest('shows error message when provided', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      errorMessage=\"This is required\"\n    />\n  );\n  \n  expect(screen.getByText('This is required')).toBeInTheDocument();\n});\n\ntest('disables select when disabled prop is true', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      disabled\n    />\n  );\n  \n  expect(screen.getByRole('combobox')).toBeDisabled();\n});\n```\n\n### Integration Testing\n\n```jsx\ntest('works within a form', async () => {\n  const handleSubmit = jest.fn();\n  \n  render(\n    <form onSubmit={handleSubmit}>\n      <Select\n        name=\"fruit\"\n        label=\"Favorite Fruit\"\n        options={options}\n        required\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n  \n  // Submit form without selection should prevent submission\n  fireEvent.click(screen.getByText('Submit'));\n  expect(handleSubmit).not.toHaveBeenCalled();\n  \n  // Select option and submit\n  await userEvent.click(screen.getByRole('combobox'));\n  await userEvent.click(screen.getByText('Apple'));\n  fireEvent.click(screen.getByText('Submit'));\n  \n  expect(handleSubmit).toHaveBeenCalled();\n});\n```\n\n## Performance Considerations\n\n- The component uses Radix UI's Select primitive which is optimized for performance\n- Virtual scrolling is handled automatically for long option lists\n- Re-renders are minimized through proper prop checking\n- CSS-in-JS is avoided in favor of CSS modules for better performance\n\n## Browser Support\n\n- **Chrome**: 88+\n- **Firefox**: 78+\n- **Safari**: 14+\n- **Edge**: 88+\n\n**Features used:**\n- CSS Custom Properties (CSS Variables)\n- CSS Grid and Flexbox\n- Modern JavaScript (ES2020)\n- Radix UI primitives\n\n## Recent Improvements\n\nThis Select component has been enhanced with several key improvements:\n\n### Layout Optimization\n- **Grouped Prefix/Value Layout**: Prefix icons and text are now properly grouped together with consistent 4px spacing\n- **Improved RTL Support**: Prefix icons automatically position correctly in RTL mode (before text in reading order)\n- **Better Text Alignment**: Enhanced text positioning and alignment for both LTR and RTL layouts\n\n### Searchable Functionality\n- **RTL-Aware Search**: Search input within dropdown properly adapts to document direction\n- **Consistent Icon Positioning**: Search icons position correctly (left in LTR, right in RTL)\n- **Seamless Integration**: Search functionality works seamlessly with prefix icons\n\n### Internationalization\n- **Localized Optional Labels**: Shows \"اختياري\" in RTL mode instead of \"(Optional)\"\n- **Enhanced Arabic Support**: Improved font rendering and spacing for Arabic text\n- **Direction-Aware Components**: All sub-components properly inherit text direction\n\n### Technical Improvements\n- **Portal Direction Inheritance**: Dropdown content properly inherits document direction\n- **Re-render Optimization**: Components correctly update when direction changes\n- **Accessibility Enhancements**: Improved screen reader support for RTL layouts\n\n## Migration Guide\n\n### From HTML Select\n\n```jsx\n// HTML select\n<select name=\"fruit\">\n  <option value=\"apple\">Apple</option>\n  <option value=\"banana\">Banana</option>\n</select>\n\n// Tagaddod Select\n<Select\n  name=\"fruit\"\n  options={[\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n  ]}\n/>\n```\n\n### From Other Libraries\n\n**From Ant Design:**\n```jsx\n// Ant Design\n<Select placeholder=\"Select option\" onChange={handleChange}>\n  <Option value=\"apple\">Apple</Option>\n  <Option value=\"banana\">Banana</Option>\n</Select>\n\n// Tagaddod\n<Select\n  placeholder=\"Select option\"\n  onValueChange={handleChange}\n  options={[\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n  ]}\n/>\n```\n\n### Upgrading\n\nWhen upgrading from previous versions:\n1. Update import statements to use the new package name\n2. Replace any deprecated props with their new equivalents\n3. Update option data structure if using object-based options\n4. Test RTL support if supporting Arabic interfaces",
    "componentInfo": {
      "props": {},
      "description": "Select Component",
      "usage": [
        "import { Select } from '@tagaddod-design/react';",
        "// Basic select with options\nconst options = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n  { value: 'cherry', label: 'Cherry' },\n];\n\n<Select\n  label=\"Favorite Fruit\"\n  placeholder=\"Select a fruit...\"\n  options={options}\n/>",
        "<Select\n  label=\"Country\"\n  placeholder=\"Select your country...\"\n  options={countryOptions}\n/>",
        "<Select\n  size=\"micro\"\n  label=\"Size\"\n  options={options}\n/>",
        "<Select\n  size=\"medium\"\n  label=\"Size\"\n  options={options}\n/>",
        "<Select\n  size=\"large\"\n  label=\"Size\"\n  options={options}\n/>",
        "import { IconUser } from '@tabler/icons-react';\n\n<Select\n  label=\"User Type\"\n  prefix={<IconUser size={18} />}\n  placeholder=\"Select user type...\"\n  options={userTypeOptions}\n/>",
        "<Select\n  label=\"Country\"\n  placeholder=\"Select your country...\"\n  helpText=\"This helps us provide location-specific features.\"\n  options={countryOptions}\n/>",
        "// Default field (required by default - no asterisk needed)\n<Select\n  label=\"Selection\"\n  placeholder=\"Please select an option...\"\n  options={options}\n/>\n\n// Optional field (explicitly marked)\n<Select\n  label=\"Optional Selection\"\n  placeholder=\"Select if you want...\"\n  optional\n  options={options}\n/>\n\n// Error state\n<Select\n  label=\"Field with Error\"\n  placeholder=\"Please select an option...\"\n  errorMessage=\"This field is required.\"\n  options={options}\n/>\n\n// Disabled state\n<Select\n  label=\"Disabled Select\"\n  placeholder=\"Cannot select...\"\n  disabled\n  options={options}\n/>\n\n// With help text\n<Select\n  label=\"Field with Help\"\n  placeholder=\"Select an option...\"\n  helpText=\"This is helpful information about the field.\"\n  options={options}\n/>",
        "import { IconSearch } from '@tabler/icons-react';\n\n<Select\n  label=\"Search Countries\"\n  placeholder=\"Search countries...\"\n  searchable\n  searchPlaceholder=\"Type to search...\"\n  options={countryOptions}\n/>\n\n// Searchable with prefix icon\n<Select\n  label=\"Search Users\"\n  prefix={<IconSearch size={16} />}\n  placeholder=\"Search users...\"\n  searchable\n  searchPlaceholder=\"Type to filter users...\"\n  options={userOptions}\n/>",
        "// Default width\n<Select\n  label=\"Default Width\"\n  placeholder=\"Default width...\"\n  options={options}\n/>\n\n// Minimum width\n<Select\n  label=\"Min Width (200px)\"\n  placeholder=\"Has minimum width...\"\n  minWidth={200}\n  options={options}\n/>\n\n// Maximum width\n<Select\n  label=\"Max Width (300px)\"\n  placeholder=\"Has maximum width...\"\n  maxWidth={300}\n  options={options}\n/>\n\n// Full width\n<Select\n  label=\"Full Width Select\"\n  placeholder=\"Takes full container width...\"\n  fullWidth\n  options={options}\n/>",
        "<Select\n  label=\"Many Options\"\n  placeholder=\"Select from many options...\"\n  options={longOptionsList}\n/>",
        "const optionsWithDisabled = [\n  { value: 'available1', label: 'Available Option 1' },\n  { value: 'disabled1', label: 'Disabled Option 1', disabled: true },\n  { value: 'available2', label: 'Available Option 2' },\n];\n\n<Select\n  label=\"Select with Some Disabled Options\"\n  options={optionsWithDisabled}\n/>",
        "const ContactForm = () => (\n  <div style={{ maxWidth: '400px', display: 'flex', flexDirection: 'column', gap: '16px' }}>\n    <Select\n      label=\"How did you hear about us?\"\n      placeholder=\"Select one...\"\n      options={[\n        { value: 'search', label: 'Search Engine' },\n        { value: 'social', label: 'Social Media' },\n        { value: 'friend', label: 'Friend/Colleague' },\n        { value: 'advertisement', label: 'Advertisement' },\n        { value: 'other', label: 'Other' },\n      ]}\n      helpText=\"This helps us understand our reach better.\"\n    />\n    \n    <Select\n      label=\"Priority Level\"\n      options={[\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' },\n      ]}\n      required\n    />\n  </div>\n);",
        "import { IconSearch } from '@tabler/icons-react';\n\nconst UserProfile = () => (\n  <div style={{ maxWidth: '500px' }}>\n    <Select\n      label=\"Country\"\n      size=\"large\"\n      prefix={<IconSearch size={20} />}\n      placeholder=\"Search and select your country...\"\n      options={countryOptions}\n      fullWidth\n      helpText=\"We'll use this to show relevant content and pricing.\"\n    />\n    \n    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginTop: '20px' }}>\n      <Select\n        label=\"Time Zone\"\n        options={timezoneOptions}\n        optional\n      />\n      \n      <Select\n        label=\"Language\"\n        options={languageOptions}\n        defaultValue=\"en\"\n      />\n    </div>\n  </div>\n);",
        "const [selectedValue, setSelectedValue] = useState();\n\n<Select\n  label=\"Uncontrolled Select\"\n  defaultValue=\"banana\"\n  options={options}\n  onValueChange={(value) => {\n    console.log('Selected:', value);\n  }}\n/>",
        "const [selectedValue, setSelectedValue] = useState('');\n\n<Select\n  label=\"Controlled Select\"\n  value={selectedValue}\n  options={options}\n  onValueChange={setSelectedValue}\n/>",
        "// Always provide clear labels (fields are required by default)\n<Select\n  label=\"Country of Residence\"\n  options={countryOptions}\n/>\n\n// Mark optional fields explicitly\n<Select\n  label=\"Preferred Contact Method\"\n  helpText=\"How would you like us to reach you?\"\n  options={contactOptions}\n  optional\n/>\n\n// Provide clear error messages\n<Select\n  label=\"Selection Required\"\n  errorMessage=\"Please select an option to continue.\"\n  options={options}\n/>\n\n// Use descriptive option labels\nconst options = [\n  { value: 'email', label: 'Email (Recommended)' },\n  { value: 'phone', label: 'Phone Call' },\n  { value: 'sms', label: 'Text Message' },\n];",
        "<div dir=\"rtl\">\n  <Select\n    label=\"اختر الفاكهة المفضلة\"\n    placeholder=\"اختر فاكهة...\"\n    options={[\n      { value: 'apple', label: 'تفاح' },\n      { value: 'banana', label: 'موز' },\n      { value: 'cherry', label: 'كرز' },\n    ]}\n  />\n</div>",
        "import { IconUser } from '@tabler/icons-react';\n\n<div dir=\"rtl\">\n  <Select\n    label=\"نوع المستخدم\"\n    prefix={<IconUser size={18} />}\n    placeholder=\"اختر نوع المستخدم...\"\n    options={arabicUserTypes}\n  />\n</div>",
        "import { IconSearch } from '@tabler/icons-react';\n\n<div dir=\"rtl\">\n  <Select\n    label=\"البحث في البلدان\"\n    prefix={<IconSearch size={16} />}\n    placeholder=\"البحث في البلدان...\"\n    searchable\n    searchPlaceholder=\"اكتب للبحث...\"\n    options={arabicCountries}\n  />\n</div>",
        "<div dir=\"rtl\">\n  <Select\n    label=\"اختر الفاكهة المفضلة\"\n    placeholder=\"اختر فاكهة...\"\n    defaultValue=\"banana\"\n    options={arabicOptions}\n  />\n</div>",
        "<div dir=\"rtl\">\n  <Select\n    label=\"حقل مطلوب\"\n    placeholder=\"يرجى اختيار خيار...\"\n    errorMessage=\"هذا الحقل مطلوب.\"\n    options={arabicOptions}\n  />\n</div>",
        "// Using className for additional styling\n<Select\n  className=\"custom-select\"\n  label=\"Custom Styled Select\"\n  options={options}\n/>",
        "// The component will automatically use the correct theme\n<ThemeProvider theme=\"tagaddod\">\n  <Select label=\"Tagaddod Theme\" options={options} />\n</ThemeProvider>\n\n<ThemeProvider theme=\"greenpan\">\n  <Select label=\"GreenPan Theme\" options={options} />\n</ThemeProvider>",
        "import { useForm, Controller } from 'react-hook-form';\n\nconst MyForm = () => {\n  const { control, handleSubmit } = useForm();\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"country\"\n        control={control}\n        rules={{ required: 'Please select a country' }}\n        render={({ field, fieldState }) => (\n          <Select\n            label=\"Country\"\n            value={field.value}\n            onValueChange={field.onChange}\n            options={countryOptions}\n            errorMessage={fieldState.error?.message}\n          />\n        )}\n      />\n    </form>\n  );\n};",
        "const [options, setOptions] = useState([]);\nconst [loading, setLoading] = useState(false);\n\nconst loadOptions = async () => {\n  setLoading(true);\n  const data = await fetchOptions();\n  setOptions(data);\n  setLoading(false);\n};\n\n<Select\n  label=\"Dynamic Options\"\n  options={options}\n  disabled={loading}\n  placeholder={loading ? 'Loading...' : 'Select an option...'}\n/>",
        "// While this component doesn't support groups natively,\n// you can achieve grouping by organizing your options\nconst organizedOptions = [\n  // Fruits group\n  { value: 'fruits-divider', label: '--- Fruits ---', disabled: true },\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n  \n  // Vegetables group  \n  { value: 'vegetables-divider', label: '--- Vegetables ---', disabled: true },\n  { value: 'carrot', label: 'Carrot' },\n  { value: 'lettuce', label: 'Lettuce' },\n];",
        "import { selectSizes } from '@tagaddod-design/react';\n\n// Available sizes: ['micro', 'medium', 'large']\nconsole.log(selectSizes);",
        "import { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Select } from '@tagaddod-design/react';\n\nconst options = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n];\n\ntest('renders select with label', () => {\n  render(\n    <Select\n      label=\"Favorite Fruit\"\n      options={options}\n    />\n  );\n  \n  expect(screen.getByText('Favorite Fruit')).toBeInTheDocument();\n});\n\ntest('displays placeholder when no value selected', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      placeholder=\"Choose a fruit...\"\n      options={options}\n    />\n  );\n  \n  expect(screen.getByText('Choose a fruit...')).toBeInTheDocument();\n});\n\ntest('calls onValueChange when option is selected', async () => {\n  const handleChange = jest.fn();\n  const user = userEvent.setup();\n  \n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      onValueChange={handleChange}\n    />\n  );\n  \n  // Open dropdown\n  await user.click(screen.getByRole('combobox'));\n  \n  // Select option\n  await user.click(screen.getByText('Apple'));\n  \n  expect(handleChange).toHaveBeenCalledWith('apple');\n});\n\ntest('shows error message when provided', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      errorMessage=\"This is required\"\n    />\n  );\n  \n  expect(screen.getByText('This is required')).toBeInTheDocument();\n});\n\ntest('disables select when disabled prop is true', () => {\n  render(\n    <Select\n      label=\"Fruit\"\n      options={options}\n      disabled\n    />\n  );\n  \n  expect(screen.getByRole('combobox')).toBeDisabled();\n});",
        "test('works within a form', async () => {\n  const handleSubmit = jest.fn();\n  \n  render(\n    <form onSubmit={handleSubmit}>\n      <Select\n        name=\"fruit\"\n        label=\"Favorite Fruit\"\n        options={options}\n        required\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n  \n  // Submit form without selection should prevent submission\n  fireEvent.click(screen.getByText('Submit'));\n  expect(handleSubmit).not.toHaveBeenCalled();\n  \n  // Select option and submit\n  await userEvent.click(screen.getByRole('combobox'));\n  await userEvent.click(screen.getByText('Apple'));\n  fireEvent.click(screen.getByText('Submit'));\n  \n  expect(handleSubmit).toHaveBeenCalled();\n});",
        "// HTML select\n<select name=\"fruit\">\n  <option value=\"apple\">Apple</option>\n  <option value=\"banana\">Banana</option>\n</select>\n\n// Tagaddod Select\n<Select\n  name=\"fruit\"\n  options={[\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n  ]}\n/>",
        "// Ant Design\n<Select placeholder=\"Select option\" onChange={handleChange}>\n  <Option value=\"apple\">Apple</Option>\n  <Option value=\"banana\">Banana</Option>\n</Select>\n\n// Tagaddod\n<Select\n  placeholder=\"Select option\"\n  onValueChange={handleChange}\n  options={[\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n  ]}\n/>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Separator",
    "stories": [
      {
        "id": "Components/Separator--default",
        "name": "Default",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Separator--horizontal",
        "name": "Horizontal",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "Horizontal",
        "description": ""
      },
      {
        "id": "Components/Separator--vertical",
        "name": "Vertical",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "Vertical",
        "description": ""
      },
      {
        "id": "Components/Separator--decorative",
        "name": "Decorative",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "Decorative",
        "description": ""
      },
      {
        "id": "Components/Separator--semantic",
        "name": "Semantic",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "Semantic",
        "description": ""
      },
      {
        "id": "Components/Separator--navigationexample",
        "name": "NavigationExample",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "NavigationExample",
        "description": ""
      },
      {
        "id": "Components/Separator--contentsectionexample",
        "name": "ContentSectionExample",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "ContentSectionExample",
        "description": ""
      },
      {
        "id": "Components/Separator--orientationcomparison",
        "name": "OrientationComparison",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "OrientationComparison",
        "description": ""
      },
      {
        "id": "Components/Separator--rtlexample",
        "name": "RTLExample",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "RTLExample",
        "description": ""
      },
      {
        "id": "Components/Separator--complexlayoutexample",
        "name": "ComplexLayoutExample",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "ComplexLayoutExample",
        "description": ""
      },
      {
        "id": "Components/Separator--spacingoptions",
        "name": "SpacingOptions",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "SpacingOptions",
        "description": ""
      },
      {
        "id": "Components/Separator--accessibilityshowcase",
        "name": "AccessibilityShowcase",
        "title": "Components/Separator",
        "importPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Separator",
        "storyName": "AccessibilityShowcase",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Separator/Separator.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as SeparatorStories from './Separator.stories';\nimport { Separator } from './Separator';\n\n<Meta of={SeparatorStories} />\n\n# Separator Component\n\nThe Separator component is a versatile UI element that provides visual or semantic separation between content sections. It supports both horizontal and vertical orientations and can be configured as either decorative or semantic for accessibility purposes.\n\n## Overview\n\nSeparators are essential layout elements that help organize content by creating visual boundaries between different sections, menu items, or content blocks. The Tagaddod Design System provides a comprehensive Separator component that maintains consistent styling and proper accessibility attributes across different contexts.\n\n## Import\n\n```jsx\nimport { Separator } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Separator} />\n\n## Basic Usage\n\n<Canvas of={SeparatorStories.Default} />\n\n```jsx\n// Default horizontal separator\n<Separator />\n\n// With custom props\n<Separator orientation=\"horizontal\" decorative={false} />\n```\n\n## Orientations\n\nThe Separator supports two orientations to accommodate different layout needs.\n\n<Canvas of={SeparatorStories.OrientationComparison} />\n\n### Horizontal (Default)\n\nHorizontal separators span the full width of their container and are ideal for separating content vertically.\n\n<Canvas of={SeparatorStories.Horizontal} />\n\n```jsx\n<div>\n  <h3>Section Title</h3>\n  <p>Content above the separator</p>\n  <Separator orientation=\"horizontal\" />\n  <p>Content below the separator</p>\n</div>\n```\n\n### Vertical\n\nVertical separators span the full height of their container and are perfect for separating content horizontally, such as in navigation bars or sidebars.\n\n<Canvas of={SeparatorStories.Vertical} />\n\n```jsx\n<div style={{ display: 'flex', alignItems: 'center' }}>\n  <span>Left content</span>\n  <Separator orientation=\"vertical\" />\n  <span>Right content</span>\n</div>\n```\n\n## Accessibility Modes\n\nThe Separator component provides two accessibility modes to accommodate different use cases.\n\n### Semantic Separator\n\nWhen `decorative={false}` (default), the separator has semantic meaning and will be announced by screen readers.\n\n<Canvas of={SeparatorStories.Semantic} />\n\n```jsx\n<div>\n  <section>Main content section</section>\n  <Separator decorative={false} />\n  <section>Secondary content section</section>\n</div>\n```\n\n**Accessibility attributes:**\n- `role=\"separator\"`\n- `aria-orientation=\"horizontal\"` or `aria-orientation=\"vertical\"`\n\n### Decorative Separator\n\nWhen `decorative={true}`, the separator is purely visual and will be ignored by screen readers.\n\n<Canvas of={SeparatorStories.Decorative} />\n\n```jsx\n<div>\n  <div>Visually separated content</div>\n  <Separator decorative={true} />\n  <div>More visually separated content</div>\n</div>\n```\n\n**Accessibility attributes:**\n- `role=\"presentation\"`\n\n## Spacing Control\n\nThe Separator component supports custom spacing control to accommodate different layout needs, especially useful in constrained spaces like lists or menus.\n\n<Canvas of={SeparatorStories.SpacingOptions} />\n\n### Spacing Options\n\n```jsx\n// Default spacing - standard margins (12px top/bottom)\n<Separator spacing=\"default\" />\n\n// Compact spacing - reduced margins (8px top/bottom)\n<Separator spacing=\"compact\" />\n\n// No spacing - perfect for tight layouts\n<Separator spacing=\"none\" />\n\n// Custom spacing - specify exact pixels\n<Separator spacing={16} />\n```\n\n**Use Cases:**\n- `spacing=\"none\"`: Perfect for list items, menus, or tight layouts\n- `spacing=\"compact\"`: Good for dense content areas\n- `spacing=\"default\"`: Standard content sections (default behavior)\n- `spacing={number}`: Custom spacing for specific design requirements\n\n## Real-World Examples\n\n### Navigation Menu\n\nSeparators are commonly used in navigation menus to separate menu items.\n\n<Canvas of={SeparatorStories.NavigationExample} />\n\n```jsx\n<nav style={{ display: 'flex', alignItems: 'center' }}>\n  <a href=\"#\">Home</a>\n  <Separator orientation=\"vertical\" decorative />\n  <a href=\"#\">About</a>\n  <Separator orientation=\"vertical\" decorative />\n  <a href=\"#\">Contact</a>\n</nav>\n```\n\n### Content Sections\n\nUse separators to structure article content and distinguish different sections.\n\n<Canvas of={SeparatorStories.ContentSectionExample} />\n\n```jsx\n<article>\n  <header>\n    <h2>Article Title</h2>\n    <p>Published on January 15, 2024</p>\n  </header>\n  \n  <Separator decorative={false} />\n  \n  <main>\n    <p>Article content goes here...</p>\n  </main>\n  \n  <Separator decorative={false} />\n  \n  <footer>\n    <p>Tags: React, TypeScript, Design System</p>\n  </footer>\n</article>\n```\n\n### Complex Layouts\n\nSeparators work well in dashboard-style layouts to create distinct sections.\n\n<Canvas of={SeparatorStories.ComplexLayoutExample} />\n\n```jsx\n<div className=\"dashboard\">\n  <header>\n    <h2>Dashboard</h2>\n    <p>Welcome back, User!</p>\n  </header>\n  \n  <Separator />\n  \n  <main style={{ display: 'flex' }}>\n    <aside>\n      <h3>Navigation</h3>\n      <nav>/* Navigation items */</nav>\n    </aside>\n    \n    <Separator orientation=\"vertical\" />\n    \n    <section>\n      <h3>Recent Activity</h3>\n      <div>/* Activity content */</div>\n    </section>\n  </main>\n  \n  <Separator />\n  \n  <footer>\n    <p>Last updated: 2 hours ago</p>\n  </footer>\n</div>\n```\n\n## Accessibility Best Practices\n\n<Canvas of={SeparatorStories.AccessibilityShowcase} />\n\n### When to Use Semantic vs Decorative\n\n**Use Semantic (`decorative={false}`) when:**\n- The separator logically divides content sections\n- Screen reader users need to understand the content structure\n- The separation has meaning for navigation or content understanding\n\n**Use Decorative (`decorative={true}`) when:**\n- The separator is purely visual styling\n- Content would make sense without the separator\n- Used in navigation menus or visual lists\n\n```jsx\n// Semantic - meaningful content separation\n<div>\n  <section aria-labelledby=\"intro\">\n    <h2 id=\"intro\">Introduction</h2>\n    <p>Introduction content...</p>\n  </section>\n  <Separator decorative={false} />\n  <section aria-labelledby=\"details\">\n    <h2 id=\"details\">Details</h2>\n    <p>Detailed content...</p>\n  </section>\n</div>\n\n// Decorative - visual menu separation\n<nav>\n  <a href=\"#\">Item 1</a>\n  <Separator orientation=\"vertical\" decorative={true} />\n  <a href=\"#\">Item 2</a>\n  <Separator orientation=\"vertical\" decorative={true} />\n  <a href=\"#\">Item 3</a>\n</nav>\n```\n\n## Internationalization\n\nThe Separator component works seamlessly with Right-to-Left (RTL) languages:\n\n<Canvas of={SeparatorStories.RTLExample} />\n\n```jsx\n// The separator will maintain proper spacing in RTL mode\n<div dir=\"rtl\">\n  <div>محتوى عربي أعلى</div>\n  <Separator />\n  <div>محتوى عربي أسفل</div>\n</div>\n```\n\n**RTL Considerations:**\n- Horizontal separators work identically in RTL mode\n- Vertical separators maintain consistent spacing\n- CSS logical properties ensure proper behavior\n\n## Styling and Customization\n\n### CSS Variables\n\nThe Separator uses the following design tokens:\n\n| Variable | Purpose | Default Value |\n|----------|---------|---------------|\n| `--t-color-border-primary` | Main separator color | Theme-dependent |\n| `--t-color-border-secondary` | Subtle separator color | Theme-dependent |\n| `--t-color-border-strong` | Bold separator color | Theme-dependent |\n| `--t-color-border-hover` | Hover state color | Theme-dependent |\n| `--t-space-200` | Mobile spacing | `8px` |\n| `--t-space-300` | Default spacing | `12px` |\n\n### Custom Styling\n\nYou can customize the separator appearance using CSS classes:\n\n```jsx\n// Custom class for styling\n<Separator className=\"custom-separator\" />\n\n// Inline styles (not recommended for production)\n<Separator style={{ backgroundColor: '#custom-color' }} />\n```\n\n```css\n/* Custom separator styles */\n.custom-separator {\n  background-color: var(--t-color-brand-primary);\n  opacity: 0.5;\n}\n\n.custom-separator.horizontal {\n  height: 2px;\n  margin: var(--t-space-400) 0;\n}\n\n.custom-separator.vertical {\n  width: 2px;\n  margin: 0 var(--t-space-400);\n}\n```\n\n## Advanced Usage Patterns\n\n### Conditional Separators\n\n```jsx\nconst items = ['Item 1', 'Item 2', 'Item 3'];\n\n<div style={{ display: 'flex' }}>\n  {items.map((item, index) => (\n    <React.Fragment key={item}>\n      <span>{item}</span>\n      {index < items.length - 1 && (\n        <Separator orientation=\"vertical\" decorative />\n      )}\n    </React.Fragment>\n  ))}\n</div>\n```\n\n### Responsive Separators\n\n```jsx\n// Different orientations based on screen size\nconst useResponsiveSeparator = () => {\n  const [orientation, setOrientation] = useState('horizontal');\n  \n  useEffect(() => {\n    const updateOrientation = () => {\n      setOrientation(window.innerWidth < 768 ? 'horizontal' : 'vertical');\n    };\n    \n    updateOrientation();\n    window.addEventListener('resize', updateOrientation);\n    return () => window.removeEventListener('resize', updateOrientation);\n  }, []);\n  \n  return orientation;\n};\n\nfunction ResponsiveSeparator() {\n  const orientation = useResponsiveSeparator();\n  return <Separator orientation={orientation} />;\n}\n```\n\n### Interactive Separators\n\n```jsx\n// Separator that responds to hover states\n<Separator \n  className=\"interactive-separator\"\n  onMouseEnter={() => console.log('Separator hovered')}\n  onMouseLeave={() => console.log('Separator unhovered')}\n/>\n```\n\n## Component API Reference\n\n### Separator Props\n\n```typescript\ninterface SeparatorProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** The orientation of the separator */\n  orientation?: 'horizontal' | 'vertical';\n  \n  /** Whether the separator is decorative or semantic */\n  decorative?: boolean;\n  \n  /** Additional CSS classes */\n  className?: string;\n  \n  // Inherits all standard HTML div attributes\n  onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseEnter?: (event: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement>) => void;\n  style?: React.CSSProperties;\n  'data-testid'?: string;\n  id?: string;\n  // ... and more\n}\n```\n\n### Constants\n\n```jsx\nimport { separatorOrientations } from '@tagaddod/react';\n\n// Available orientations: ['horizontal', 'vertical']\nconsole.log(separatorOrientations);\n```\n\n## Testing\n\n### Unit Testing Examples\n\n```jsx\nimport { render, screen } from '@testing-library/react';\nimport { Separator } from '@tagaddod/react';\n\n// Test semantic separator\ntest('renders semantic separator with proper ARIA attributes', () => {\n  render(<Separator decorative={false} orientation=\"horizontal\" />);\n  \n  const separator = screen.getByRole('separator');\n  expect(separator).toHaveAttribute('aria-orientation', 'horizontal');\n});\n\n// Test decorative separator\ntest('renders decorative separator with presentation role', () => {\n  render(<Separator decorative={true} data-testid=\"decorative-sep\" />);\n  \n  const separator = screen.getByTestId('decorative-sep');\n  expect(separator).toHaveAttribute('role', 'presentation');\n});\n\n// Test custom class\ntest('applies custom class name', () => {\n  render(<Separator className=\"custom-class\" data-testid=\"separator\" />);\n  \n  const separator = screen.getByTestId('separator');\n  expect(separator).toHaveClass('custom-class');\n});\n```\n\n### Integration Testing\n\n```jsx\n// Test in navigation context\ntest('separator works in navigation menu', () => {\n  render(\n    <nav>\n      <a href=\"#\">Home</a>\n      <Separator orientation=\"vertical\" decorative />\n      <a href=\"#\">About</a>\n    </nav>\n  );\n  \n  const links = screen.getAllByRole('link');\n  expect(links).toHaveLength(2);\n  \n  // Decorative separator should not be announced\n  expect(screen.queryByRole('separator')).not.toBeInTheDocument();\n});\n```\n\n## Performance Considerations\n\n- The Separator component is lightweight with minimal DOM footprint\n- Uses CSS-only styling for optimal rendering performance\n- No JavaScript calculations or state management\n- Supports CSS containment for improved browser optimization\n\n## Browser Support\n\nThe Separator component works in all modern browsers:\n\n- **Chrome**: 60+\n- **Firefox**: 60+\n- **Safari**: 12+\n- **Edge**: 79+\n- **Mobile browsers**: iOS Safari 12+, Chrome Mobile 60+\n\n**Features used:**\n- CSS Flexbox (for layout)\n- CSS Custom Properties (for theming)\n- ARIA attributes (for accessibility)\n\n## Migration Guide\n\n### From Other Libraries\n\n**From Material-UI Divider:**\n```jsx\n// Material-UI\n<Divider />\n<Divider orientation=\"vertical\" />\n\n// Tagaddod Separator\n<Separator />\n<Separator orientation=\"vertical\" />\n```\n\n**From Ant Design Divider:**\n```jsx\n// Ant Design\n<Divider />\n<Divider type=\"vertical\" />\n\n// Tagaddod Separator\n<Separator />\n<Separator orientation=\"vertical\" />\n```\n\n### Upgrading\n\nWhen upgrading from previous versions, ensure:\n1. Update import paths if changed\n2. Review accessibility settings (`decorative` prop)\n3. Check custom CSS classes for compatibility\n4. Test in RTL contexts if applicable\n",
    "componentInfo": {
      "props": {},
      "description": "Separator Component",
      "usage": [
        "import { Separator } from '@tagaddod/react';",
        "// Default horizontal separator\n<Separator />\n\n// With custom props\n<Separator orientation=\"horizontal\" decorative={false} />",
        "<div>\n  <h3>Section Title</h3>\n  <p>Content above the separator</p>\n  <Separator orientation=\"horizontal\" />\n  <p>Content below the separator</p>\n</div>",
        "<div style={{ display: 'flex', alignItems: 'center' }}>\n  <span>Left content</span>\n  <Separator orientation=\"vertical\" />\n  <span>Right content</span>\n</div>",
        "<div>\n  <section>Main content section</section>\n  <Separator decorative={false} />\n  <section>Secondary content section</section>\n</div>",
        "<div>\n  <div>Visually separated content</div>\n  <Separator decorative={true} />\n  <div>More visually separated content</div>\n</div>",
        "// Default spacing - standard margins (12px top/bottom)\n<Separator spacing=\"default\" />\n\n// Compact spacing - reduced margins (8px top/bottom)\n<Separator spacing=\"compact\" />\n\n// No spacing - perfect for tight layouts\n<Separator spacing=\"none\" />\n\n// Custom spacing - specify exact pixels\n<Separator spacing={16} />",
        "<nav style={{ display: 'flex', alignItems: 'center' }}>\n  <a href=\"#\">Home</a>\n  <Separator orientation=\"vertical\" decorative />\n  <a href=\"#\">About</a>\n  <Separator orientation=\"vertical\" decorative />\n  <a href=\"#\">Contact</a>\n</nav>",
        "<article>\n  <header>\n    <h2>Article Title</h2>\n    <p>Published on January 15, 2024</p>\n  </header>\n  \n  <Separator decorative={false} />\n  \n  <main>\n    <p>Article content goes here...</p>\n  </main>\n  \n  <Separator decorative={false} />\n  \n  <footer>\n    <p>Tags: React, TypeScript, Design System</p>\n  </footer>\n</article>",
        "<div className=\"dashboard\">\n  <header>\n    <h2>Dashboard</h2>\n    <p>Welcome back, User!</p>\n  </header>\n  \n  <Separator />\n  \n  <main style={{ display: 'flex' }}>\n    <aside>\n      <h3>Navigation</h3>\n      <nav>/* Navigation items */</nav>\n    </aside>\n    \n    <Separator orientation=\"vertical\" />\n    \n    <section>\n      <h3>Recent Activity</h3>\n      <div>/* Activity content */</div>\n    </section>\n  </main>\n  \n  <Separator />\n  \n  <footer>\n    <p>Last updated: 2 hours ago</p>\n  </footer>\n</div>",
        "// Semantic - meaningful content separation\n<div>\n  <section aria-labelledby=\"intro\">\n    <h2 id=\"intro\">Introduction</h2>\n    <p>Introduction content...</p>\n  </section>\n  <Separator decorative={false} />\n  <section aria-labelledby=\"details\">\n    <h2 id=\"details\">Details</h2>\n    <p>Detailed content...</p>\n  </section>\n</div>\n\n// Decorative - visual menu separation\n<nav>\n  <a href=\"#\">Item 1</a>\n  <Separator orientation=\"vertical\" decorative={true} />\n  <a href=\"#\">Item 2</a>\n  <Separator orientation=\"vertical\" decorative={true} />\n  <a href=\"#\">Item 3</a>\n</nav>",
        "// The separator will maintain proper spacing in RTL mode\n<div dir=\"rtl\">\n  <div>محتوى عربي أعلى</div>\n  <Separator />\n  <div>محتوى عربي أسفل</div>\n</div>",
        "// Custom class for styling\n<Separator className=\"custom-separator\" />\n\n// Inline styles (not recommended for production)\n<Separator style={{ backgroundColor: '#custom-color' }} />",
        "const items = ['Item 1', 'Item 2', 'Item 3'];\n\n<div style={{ display: 'flex' }}>\n  {items.map((item, index) => (\n    <React.Fragment key={item}>\n      <span>{item}</span>\n      {index < items.length - 1 && (\n        <Separator orientation=\"vertical\" decorative />\n      )}\n    </React.Fragment>\n  ))}\n</div>",
        "// Different orientations based on screen size\nconst useResponsiveSeparator = () => {\n  const [orientation, setOrientation] = useState('horizontal');\n  \n  useEffect(() => {\n    const updateOrientation = () => {\n      setOrientation(window.innerWidth < 768 ? 'horizontal' : 'vertical');\n    };\n    \n    updateOrientation();\n    window.addEventListener('resize', updateOrientation);\n    return () => window.removeEventListener('resize', updateOrientation);\n  }, []);\n  \n  return orientation;\n};\n\nfunction ResponsiveSeparator() {\n  const orientation = useResponsiveSeparator();\n  return <Separator orientation={orientation} />;\n}",
        "// Separator that responds to hover states\n<Separator \n  className=\"interactive-separator\"\n  onMouseEnter={() => console.log('Separator hovered')}\n  onMouseLeave={() => console.log('Separator unhovered')}\n/>",
        "import { separatorOrientations } from '@tagaddod/react';\n\n// Available orientations: ['horizontal', 'vertical']\nconsole.log(separatorOrientations);",
        "import { render, screen } from '@testing-library/react';\nimport { Separator } from '@tagaddod/react';\n\n// Test semantic separator\ntest('renders semantic separator with proper ARIA attributes', () => {\n  render(<Separator decorative={false} orientation=\"horizontal\" />);\n  \n  const separator = screen.getByRole('separator');\n  expect(separator).toHaveAttribute('aria-orientation', 'horizontal');\n});\n\n// Test decorative separator\ntest('renders decorative separator with presentation role', () => {\n  render(<Separator decorative={true} data-testid=\"decorative-sep\" />);\n  \n  const separator = screen.getByTestId('decorative-sep');\n  expect(separator).toHaveAttribute('role', 'presentation');\n});\n\n// Test custom class\ntest('applies custom class name', () => {\n  render(<Separator className=\"custom-class\" data-testid=\"separator\" />);\n  \n  const separator = screen.getByTestId('separator');\n  expect(separator).toHaveClass('custom-class');\n});",
        "// Test in navigation context\ntest('separator works in navigation menu', () => {\n  render(\n    <nav>\n      <a href=\"#\">Home</a>\n      <Separator orientation=\"vertical\" decorative />\n      <a href=\"#\">About</a>\n    </nav>\n  );\n  \n  const links = screen.getAllByRole('link');\n  expect(links).toHaveLength(2);\n  \n  // Decorative separator should not be announced\n  expect(screen.queryByRole('separator')).not.toBeInTheDocument();\n});",
        "// Material-UI\n<Divider />\n<Divider orientation=\"vertical\" />\n\n// Tagaddod Separator\n<Separator />\n<Separator orientation=\"vertical\" />",
        "// Ant Design\n<Divider />\n<Divider type=\"vertical\" />\n\n// Tagaddod Separator\n<Separator />\n<Separator orientation=\"vertical\" />"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Sonner",
    "stories": [
      {
        "id": "Components/Sonner--default",
        "name": "Default",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Sonner--toasttypes",
        "name": "ToastTypes",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "ToastTypes",
        "description": ""
      },
      {
        "id": "Components/Sonner--withactions",
        "name": "WithActions",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "WithActions",
        "description": ""
      },
      {
        "id": "Components/Sonner--rtlsupport",
        "name": "RTLSupport",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "RTLSupport",
        "description": ""
      },
      {
        "id": "Components/Sonner--iconbackgroundvariants",
        "name": "IconBackgroundVariants",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "IconBackgroundVariants",
        "description": ""
      },
      {
        "id": "Components/Sonner--customicon",
        "name": "CustomIcon",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "CustomIcon",
        "description": ""
      },
      {
        "id": "Components/Sonner--longcontent",
        "name": "LongContent",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "LongContent",
        "description": ""
      },
      {
        "id": "Components/Sonner--multipletoasts",
        "name": "MultipleToasts",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "MultipleToasts",
        "description": ""
      },
      {
        "id": "Components/Sonner--differentpositions",
        "name": "DifferentPositions",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "DifferentPositions",
        "description": ""
      },
      {
        "id": "Components/Sonner--withclosebutton",
        "name": "WithCloseButton",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "WithCloseButton",
        "description": ""
      },
      {
        "id": "Components/Sonner--alwaysvisible",
        "name": "AlwaysVisible",
        "title": "Components/Sonner",
        "importPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Sonner",
        "storyName": "AlwaysVisible",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Sonner/Sonner.stories.tsx",
    "mdxContent": "import { Meta, Canvas, Story, ArgTypes, Source } from '@storybook/blocks';\nimport { Sonner, showSonner } from './Sonner';\nimport * as SonnerStories from './Sonner.stories';\n\n<Meta of={SonnerStories} />\n\n# Sonner\n\nThe Sonner component is a modern toast notification system that follows our Figma design specifications exactly. It provides three distinct toast types (Error, Success, Default) with consistent typography, spacing, and comprehensive RTL/LTR support.\n\n## Overview\n\nSonner offers a powerful toast notification system with:\n\n- **Design System Aligned**: Matches Figma specifications with exact colors, typography, and spacing\n- **Three Toast Types**: Error (red #d51e25), Success (green #00ae61), and Default (white) variants\n- **Icon Background Options**: Icons can be displayed with or without background containers\n- **Built-in Close Button**: Always-visible close button with proper RTL/LTR positioning\n- **RTL/LTR Support**: Complete layout mirroring and text alignment for different directions\n- **Outfit Typography**: Uses Outfit font family with proper weights (Medium 500, Regular 400)\n- **Accessibility**: Full keyboard navigation and screen reader support\n- **Stacking Behavior**: Proper toast stacking with Sonner 2.0+ features\n\n## Installation & Setup\n\nFirst, add the Sonner component to your application root:\n\n<Source\n  language=\"tsx\"\n  code={`\nimport { Sonner } from '@tagaddod-design/react';\n\nfunction App() {\n  return (\n    <div>\n      {/* Your app content */}\n      <Sonner position=\"bottom-right\" />\n    </div>\n  );\n}\n`}\n/>\n\nThen use the toast functions anywhere in your application:\n\n<Source\n  language=\"tsx\"\n  code={`\nimport { showSonner } from '@tagaddod-design/react';\n\nfunction MyComponent() {\n  const handleSuccess = () => {\n    showSonner.success({\n      title: 'Success!',\n      description: 'Your action was completed successfully.'\n    });\n  };\n\n  return <button onClick={handleSuccess}>Show Success Toast</button>;\n}\n`}\n/>\n\n## Basic Usage\n\n<Canvas of={SonnerStories.Default} />\n\n## Toast Types\n\nOur design system includes three main toast types based on the Figma specifications:\n\n<Canvas of={SonnerStories.ToastTypes} />\n\n### Available Types\n\n- **Error**: Red background (#d51e25) with white text - for error messages and failures\n- **Success**: Green background (#00ae61) with white text - for completed actions and positive feedback  \n- **Default**: White background (#ffffff) with dark text - for general information and neutral messages\n\n### Icon Background Options\n\nIcons can be displayed with or without background containers:\n\n<Canvas of={SonnerStories.IconBackgroundVariants} />\n\n- **With Background**: Icons get a rounded background container (20% white opacity for colored toasts, #f9f9fa for default)\n- **Without Background**: Icons are displayed directly without any background container\n\n## Toast with Actions\n\nAdd interactive buttons to your toasts for better user engagement:\n\n<Canvas of={SonnerStories.WithActions} />\n\n<Source\n  language=\"tsx\"\n  code={`\n// Toast with single action\nshowSonner.info({\n  title: 'New Message',\n  description: 'You have a new message from John.',\n  action: {\n    label: 'View',\n    onClick: () => console.log('Viewing message')\n  }\n});\n\n// Toast with action and cancel\nshowSonner.warning({\n  title: 'Unsaved Changes',\n  description: 'You have unsaved changes.',\n  action: {\n    label: 'Save',\n    onClick: () => console.log('Saving')\n  },\n  cancel: {\n    label: 'Discard',\n    onClick: () => console.log('Discarding')\n  }\n});\n`}\n/>\n\n## RTL/LTR Support\n\nThe toast component automatically adapts to different text directions as specified in the Figma design:\n\n<Canvas of={SonnerStories.RTLSupport} />\n\nIn RTL mode:\n- Icon and close button positions are mirrored\n- Text alignment changes to right-aligned\n- Layout flows from right to left\n- Proper Arabic text rendering with Outfit font\n\n## Custom Icons\n\nReplace the default type icons with your own custom icons:\n\n<Canvas of={SonnerStories.CustomIcon} />\n\n<Source\n  language=\"tsx\"\n  code={`\nimport { IconHeart } from '@tabler/icons-react';\n\nshowSonner.info({\n  title: 'Liked!',\n  description: 'You liked this post.',\n  icon: <IconHeart size={16} style={{ color: '#e74c3c' }} />,\n  iconBackground: true // or false to show without background\n});\n`}\n/>\n\n## Long Content\n\nSonner handles long content gracefully with proper text wrapping:\n\n<Canvas of={SonnerStories.LongContent} />\n\n## Multiple Toasts\n\nShow multiple toasts and manage them collectively:\n\n<Canvas of={SonnerStories.MultipleToasts} />\n\n<Source\n  language=\"tsx\"\n  code={`\n// Show multiple toasts\nshowSonner.success({ title: 'First', description: 'First toast' });\nshowSonner.info({ title: 'Second', description: 'Second toast' });\nshowSonner.warning({ title: 'Third', description: 'Third toast' });\n\n// Dismiss all toasts\nshowSonner.dismissAll();\n\n// Dismiss specific toast\nconst toastId = showSonner.info({ title: 'Toast', description: 'Message' });\nshowSonner.dismiss(toastId);\n`}\n/>\n\n## Different Positions\n\nPosition toasts in different areas of the screen:\n\n<Canvas of={SonnerStories.DifferentPositions} />\n\n## Close Button\n\nEnable a close button for manual dismissal:\n\n<Canvas of={SonnerStories.WithCloseButton} />\n\n## API Reference\n\n### Sonner Component Props\n\n<ArgTypes of={SonnerStories} />\n\n### showSonner Methods\n\n| Method | Description | Parameters |\n|--------|-------------|------------|\n| `showSonner.success(options)` | Show success toast | `SonnerToastOptions` |\n| `showSonner.error(options)` | Show error toast | `SonnerToastOptions` |\n| `showSonner.warning(options)` | Show warning toast | `SonnerToastOptions` |\n| `showSonner.info(options)` | Show info toast | `SonnerToastOptions` |\n| `showSonner.loading(options)` | Show loading toast | `SonnerToastOptions` |\n| `showSonner.custom(options)` | Show custom toast | `SonnerToastOptions` |\n| `showSonner.dismiss(id?)` | Dismiss specific toast | `string \\| number` (optional) |\n| `showSonner.dismissAll()` | Dismiss all toasts | - |\n\n### SonnerToastOptions\n\n| Property | Type | Default | Description |\n|----------|------|---------|-------------|\n| `id` | `string \\| number` | - | Unique identifier for the toast |\n| `title` | `string` | - | The main title text of the toast |\n| `description` | `string` | - | The description text below the title |\n| `duration` | `number` | `4000` | How long the toast should be visible (in milliseconds) |\n| `icon` | `React.ReactNode` | - | Custom icon to display (overrides default type icon) |\n| `iconBackground` | `boolean` | `true` | Whether to show a background container around the icon |\n| `action` | `{ label: string; onClick: () => void }` | - | Primary action button |\n| `cancel` | `{ label: string; onClick: () => void }` | - | Secondary cancel button |\n| `onDismiss` | `() => void` | - | Callback when toast is manually dismissed |\n| `onAutoClose` | `() => void` | - | Callback when toast auto-closes |\n\n## Design Specifications\n\nBased on the Figma design, the component uses these exact specifications:\n\n### Colors\n- **Error Background**: #d51e25\n- **Success Background**: #00ae61  \n- **Default Background**: #ffffff\n- **Icon Background (colored toasts)**: rgba(255, 255, 255, 0.2)\n- **Icon Background (default toast)**: #f9f9fa\n- **Text on colored backgrounds**: #ffffff\n- **Primary text (default)**: #16161d\n- **Secondary text (default)**: #7d8096\n\n### Typography\n- **Title**: Outfit Medium, 16px, line-height 1.5\n- **Description**: Outfit Regular, 14px, line-height 1.5\n\n### Spacing\n- **Toast padding**: 12px\n- **Gap between content and close button**: 8px\n- **Gap between icon and text**: 3px\n- **Gap between title and description**: 2px\n- **Icon size**: 20px\n- **Icon background padding**: 12px\n\n### Effects\n- **Shadow**: 0px 8px 16px -4px rgba(26, 26, 26, 0.22)\n- **Border radius**: 8px (toast), 4px (icon background) ",
    "componentInfo": {
      "props": {},
      "description": "Sonner",
      "usage": [],
      "variants": {}
    }
  },
  {
    "componentName": "Components/RangeSlider",
    "stories": [
      {
        "id": "Components/RangeSlider--singlethumbrest",
        "name": "SingleThumbRest",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "SingleThumbRest",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--singlethumbfocus",
        "name": "SingleThumbFocus",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "SingleThumbFocus",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--singlethumbactive",
        "name": "SingleThumbActive",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "SingleThumbActive",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--singlethumbdisabled",
        "name": "SingleThumbDisabled",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "SingleThumbDisabled",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--singlethumberror",
        "name": "SingleThumbError",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "SingleThumbError",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--dualthumbrest",
        "name": "DualThumbRest",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "DualThumbRest",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--dualthumbfocus",
        "name": "DualThumbFocus",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "DualThumbFocus",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--dualthumbactive",
        "name": "DualThumbActive",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "DualThumbActive",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--dualthumbdisabled",
        "name": "DualThumbDisabled",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "DualThumbDisabled",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--dualthumberror",
        "name": "DualThumbError",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "DualThumbError",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--withprefix",
        "name": "WithPrefix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "WithPrefix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--withsuffix",
        "name": "WithSuffix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "WithSuffix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--withprefixandsuffix",
        "name": "WithPrefixAndSuffix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "WithPrefixAndSuffix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--interactivedemo",
        "name": "InteractiveDemo",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "InteractiveDemo",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlexample",
        "name": "RTLExample",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLExample",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlpositioningdemo",
        "name": "RTLPositioningDemo",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLPositioningDemo",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlwithsuffix",
        "name": "RTLWithSuffix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLWithSuffix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlwithprefix",
        "name": "RTLWithPrefix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLWithPrefix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlwithprefixandsuffix",
        "name": "RTLWithPrefixAndSuffix",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLWithPrefixAndSuffix",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlactivestate",
        "name": "RTLActiveState",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLActiveState",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlerrorstate",
        "name": "RTLErrorState",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLErrorState",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlmoneyrangeexample",
        "name": "RTLMoneyRangeExample",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLMoneyRangeExample",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlcomprehensivedemo",
        "name": "RTLComprehensiveDemo",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLComprehensiveDemo",
        "description": ""
      },
      {
        "id": "Components/RangeSlider--rtlvsltrcomparison",
        "name": "RTLVsLTRComparison",
        "title": "Components/RangeSlider",
        "importPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RangeSlider",
        "storyName": "RTLVsLTRComparison",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/RangeSlider/RangeSlider.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as RangeSliderStories from './RangeSlider.stories';\nimport { RangeSlider } from './RangeSlider';\n\n<Meta of={RangeSliderStories} />\n\n# RangeSlider Component\n\nThe RangeSlider component provides an intuitive input control for selecting single values or ranges within a specified domain. Built on Radix UI primitives, it follows the Tagaddod Design System patterns and matches the specifications from Figma design documentation.\n\n## Overview\n\nThe RangeSlider is ideal for scenarios where users need to select numerical values within a range, such as price filters, quantity selectors, or any continuous value selection. It supports both single-thumb and dual-thumb modes with comprehensive state management and accessibility features.\n\n**Key Features:**\n- Single thumb and dual thumb selection modes\n- Multiple state variants (rest, focus, active, disabled, error)\n- Tooltip display on active state\n- Prefix and suffix support for icons or text\n- Error message display with validation\n- Full keyboard accessibility\n- RTL language support\n- Mobile-friendly touch targets\n\n## Import\n\n```jsx\nimport { RangeSlider } from '@tagaddod-design/react';\n```\n\n## Props\n\n<ArgTypes of={RangeSlider} />\n\n## Basic Usage\n\n<Canvas of={RangeSliderStories.Default} />\n\n```jsx\nimport { useState } from 'react';\nimport { RangeSlider } from '@tagaddod-design/react';\n\nconst BasicSlider = () => {\n  const [value, setValue] = useState([50]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Volume\"\n      value={value}\n      onValueChange={setValue}\n      min={0}\n      max={100}\n      step={1}\n      aria-label=\"Volume control\"\n    />\n  );\n};\n```\n\n## Dual Thumb Range Mode\n\nUse dual thumb mode to create a range selector:\n\n<Canvas of={RangeSliderStories.DualThumbRest} />\n\n```jsx\nconst [priceRange, setPriceRange] = useState([25, 75]);\n\n<RangeSlider\n  type=\"dual thumb\"\n  label=\"Price Range\"\n  value={priceRange}\n  onValueChange={setPriceRange}\n  min={0}\n  max={100}\n  aria-label=\"Price range\"\n/>\n```\n\n## State Variants\n\nThe RangeSlider supports multiple states that reflect different interaction modes:\n\n### Rest State\n<Canvas of={RangeSliderStories.SingleThumbRest} />\n\n### Focus State  \n<Canvas of={RangeSliderStories.SingleThumbFocus} />\n\n### Active State (with Tooltip)\n<Canvas of={RangeSliderStories.SingleThumbActive} />\n\n### Disabled State\n<Canvas of={RangeSliderStories.SingleThumbDisabled} />\n\n### Error State\n<Canvas of={RangeSliderStories.SingleThumbError} />\n\n## Prefix and Suffix Support\n\nAdd icons or text before and after the slider:\n\n### With Prefix\n<Canvas of={RangeSliderStories.WithPrefix} />\n\n### With Suffix\n<Canvas of={RangeSliderStories.WithSuffix} />\n\n### With Both Prefix and Suffix\n<Canvas of={RangeSliderStories.WithPrefixAndSuffix} />\n\n```jsx\n<RangeSlider\n  type=\"single thumb\"\n  label=\"Price\"\n  prefix=\"$\"\n  suffix=\"USD\"\n  value={[50]}\n/>\n```\n\n## Interactive Demo\n\n<Canvas of={RangeSliderStories.InteractiveDemo} />\n\n## RTL Language Support\n\nThe RangeSlider component provides comprehensive Right-to-Left (RTL) language support using Radix UI's native direction handling for optimal performance and user experience.\n\n### Basic RTL Support\n\n<Canvas of={RangeSliderStories.RTLExample} />\n\n```jsx\n// Basic RTL support with Arabic content\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"dual thumb\"\n    label=\"شريط التمرير للنطاق\"\n    value={[30, 70]}\n    formatValue={(value) => `${value}%`}\n    aria-label=\"نسبة التقدم\"\n  />\n</div>\n```\n\n### RTL with Prefix Support\n\n<Canvas of={RangeSliderStories.RTLWithPrefix} />\n\n```jsx\n// RTL slider with currency prefix\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"dual thumb\"\n    label=\"نطاق الراتب الشهري\"\n    prefix=\"ر.س\"\n    value={[3000, 8000]}\n    min={1000}\n    max={10000}\n    aria-label=\"نطاق الراتب\"\n  />\n</div>\n```\n\n### RTL with Suffix Support\n\n<Canvas of={RangeSliderStories.RTLWithSuffix} />\n\n```jsx\n// RTL slider with percentage suffix\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"single thumb\"\n    label=\"مستوى الصوت\"\n    suffix=\"%\"\n    value={[75]}\n    min={0}\n    max={100}\n    aria-label=\"التحكم في مستوى الصوت\"\n  />\n</div>\n```\n\n### Comprehensive RTL Implementation\n\n<Canvas of={RangeSliderStories.RTLComprehensiveDemo} />\n\nThis demonstrates the complete RTL implementation with proper range fill direction, intuitive mouse interaction, and correct prefix/suffix positioning.\n\n### RTL vs LTR Comparison\n\n<Canvas of={RangeSliderStories.RTLVsLTRComparison} />\n\n**RTL Implementation Features:**\n\n#### **✅ Native Radix UI Direction Support**\n- Uses Radix UI's built-in `dir=\"rtl\"` prop for optimal performance\n- Proper range fill direction (right-to-left)\n- Intuitive mouse interaction (moving right increases value)\n\n#### **🎯 Correct Layout Behavior**\n- **RTL Layout**: Suffix → Slider → Prefix\n- **LTR Layout**: Prefix → Slider → Suffix\n- Automatic layout switching based on `dir` attribute\n\n#### **🔧 Technical Implementation**\n```tsx\n// Component automatically detects RTL context\n<Slider.Root\n  dir={isRTL ? 'rtl' : 'ltr'}  // Native Radix UI direction support\n  // ... other props\n>\n```\n\n```css\n/* CSS handles prefix/suffix positioning */\n:global([dir=\"rtl\"]) .sliderContainer {\n  flex-direction: row; /* Maintains proper order in RTL */\n}\n```\n\n**RTL Considerations:**\n- **Automatic Layout**: Proper text alignment and component positioning\n- **Arabic Font Optimization**: Uses `Tajawal` font with optimized line-height (1.2 vs 1.5 for English)\n- **Range Fill Direction**: Fills from right-to-left in RTL contexts\n- **Mouse Interaction**: Natural interaction patterns (right = increase, left = decrease)\n- **Performance**: Leverages native browser RTL behavior for optimal rendering\n\n### RTL Best Practices\n\n```jsx\n// Recommended RTL implementation\nconst RTLSliderExample = () => {\n  const [priceRange, setPriceRange] = useState([500, 1500]);\n  \n  return (\n    <div dir=\"rtl\">\n      <RangeSlider\n        type=\"dual thumb\"\n        label=\"نطاق السعر\"\n        prefix=\"ر.س\"\n        suffix=\"SAR\"\n        value={priceRange}\n        onValueChange={setPriceRange}\n        min={100}\n        max={2000}\n        step={50}\n        formatValue={(value) => value.toLocaleString('ar-SA')}\n        aria-label=\"نطاق الأسعار بالريال السعودي\"\n      />\n    </div>\n  );\n};\n```\n\n### RTL Accessibility\n\nThe RTL implementation maintains full accessibility compliance:\n\n```jsx\n// RTL with proper accessibility\n<RangeSlider\n  type=\"dual thumb\"\n  label=\"نطاق الراتب\"\n  prefix=\"ر.س\"\n  value={[3000, 7000]}\n  aria-label=\"اختيار نطاق الراتب الشهري\"\n  aria-describedby=\"salary-help\"\n  dir=\"rtl\"\n/>\n<div id=\"salary-help\" style={{ textAlign: 'right' }}>\n  استخدم الأسهم أو اسحب لتحديد النطاق المطلوب\n</div>\n```\n\n**RTL Accessibility Features:**\n- Proper ARIA labels in Arabic\n- Right-to-left text alignment for labels and descriptions\n- Maintained keyboard navigation (arrows work intuitively)\n- Screen reader support with Arabic content\n- Consistent focus management in RTL layouts\n\n## Error Handling\n\nDisplay validation errors with proper messaging:\n\n```jsx\n<RangeSlider\n  type=\"single thumb\"\n  state=\"error\"\n  label=\"Invalid Range\"\n  errorMessage=\"Value must be between 10 and 90\"\n  value={[95]}\n/>\n```\n\n## Tooltip Functionality\n\nTooltips automatically appear during active state to show current values:\n\n```jsx\n<RangeSlider\n  type=\"single thumb\"\n  state=\"active\"\n  label=\"Volume\"\n  value={[75]}\n  formatValue={(value) => `${value}%`}\n  showTooltip={true}\n/>\n```\n\n## Accessibility\n\nThe RangeSlider component implements comprehensive accessibility features:\n\n### Keyboard Navigation\n- **Arrow Keys**: Increment/decrement by step value\n- **Home**: Move to minimum value\n- **End**: Move to maximum value\n- **Page Up/Page Down**: Increment/decrement by larger steps\n\n### Screen Reader Support\n- Proper ARIA labels and roles\n- Value announcements on change\n- Range descriptions for dual-thumb sliders\n\n### Best Practices\n\n```jsx\n// Single value slider\n<RangeSlider\n  type=\"single thumb\"\n  aria-label=\"Volume level\"\n  label=\"Volume\"\n  value={[65]}\n  onValueChange={setVolume}\n  formatValue={(value) => `${value}%`}\n/>\n\n// Range slider with descriptive labels\n<RangeSlider\n  type=\"dual thumb\"\n  aria-label=\"Price range\"\n  label=\"Price Range\"\n  value={[40, 90]}\n  onValueChange={setPriceRange}\n  formatValue={(value) => `$${value}`}\n/>\n```\n\n### ARIA Implementation\n- `aria-label`: Describes the slider's purpose\n- `role=\"slider\"`: Identifies the control type\n- `aria-valuemin/aria-valuemax`: Communicates the value range\n- `aria-valuenow`: Current value for screen readers\n\n## Styling and Customization\n\n### Design Token Integration\n\nThe component uses the following design tokens for consistent brand appearance:\n\n| Variable | Purpose | Default Value |\n|----------|---------|---------------|\n| `--t-color-fill-brand-primary` | Thumb and range fill | #3959fe |\n| `--t-color-border-secondary` | Track background | #e0e2e6 |\n| `--t-color-text-primary` | Label text | #16161d |\n| `--t-color-text-disabled` | Disabled text | #adafbd |\n| `--t-color-fill-critical` | Error state | #d51e25 |\n| `--t-space-*` | Spacing and padding | Layout spacing |\n\n### Custom Styling\n\n```jsx\n// Apply custom class for styling\n<RangeSlider \n  className=\"custom-slider\"\n  type=\"single thumb\"\n  label=\"Custom Styled\"\n  value={[45]}\n/>\n```\n\n```css\n/* Custom CSS overrides */\n.custom-slider {\n  /* Customize container */\n}\n\n.custom-slider .root {\n  /* Customize slider root */\n}\n\n.custom-slider .thumb {\n  /* Customize thumb appearance */\n}\n```\n\n## Advanced Usage Patterns\n\n### Controlled vs Uncontrolled\n\n```jsx\n// Controlled (recommended for forms)\nconst ControlledSlider = () => {\n  const [value, setValue] = useState([50]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Controlled\"\n      value={value}\n      onValueChange={setValue}\n      aria-label=\"Controlled slider\"\n    />\n  );\n};\n\n// Uncontrolled (simple cases)\nconst UncontrolledSlider = () => (\n  <RangeSlider\n    type=\"single thumb\"\n    label=\"Uncontrolled\"\n    defaultValue={[25]}\n    onValueChange={(value) => console.log('Value:', value)}\n    aria-label=\"Uncontrolled slider\"\n  />\n);\n```\n\n### Form Integration\n\n```jsx\nconst SettingsForm = () => {\n  const [settings, setSettings] = useState({\n    volume: [75],\n    priceRange: [100, 500]\n  });\n  \n  const updateSetting = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n  \n  return (\n    <form>\n      <RangeSlider\n        type=\"single thumb\"\n        label=\"Volume\"\n        value={settings.volume}\n        onValueChange={(value) => updateSetting('volume', value)}\n        formatValue={(value) => `${value}%`}\n        aria-label=\"Volume level\"\n      />\n      \n      <RangeSlider\n        type=\"dual thumb\"\n        label=\"Price Range\"\n        value={settings.priceRange}\n        onValueChange={(value) => updateSetting('priceRange', value)}\n        min={0}\n        max={1000}\n        formatValue={(value) => `$${value}`}\n        aria-label=\"Price filter range\"\n      />\n    </form>\n  );\n};\n```\n\n### Event Handling\n\n```jsx\nconst EventHandlingExample = () => {\n  const [value, setValue] = useState([50]);\n  const [isChanging, setIsChanging] = useState(false);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Event Handling\"\n      value={value}\n      onValueChange={(newValue) => {\n        setValue(newValue);\n        setIsChanging(true);\n      }}\n      onValueCommit={(finalValue) => {\n        setIsChanging(false);\n        // Save to server, trigger analytics, etc.\n        console.log('Final value:', finalValue);\n      }}\n      aria-label=\"Event handling example\"\n    />\n  );\n};\n```\n\n### RTL Detection and Handling\n\n```jsx\nconst RTLAwareSlider = () => {\n  const [value, setValue] = useState([25, 75]);\n  const [isRTL, setIsRTL] = useState(false);\n  \n  // Detect RTL context\n  useEffect(() => {\n    const detectRTL = () => {\n      if (typeof document === 'undefined') return false;\n      \n      // Check dir attribute on html, body, or closest parent\n      const htmlDir = document.documentElement.dir;\n      const bodyDir = document.body.dir;\n      \n      return htmlDir === 'rtl' || bodyDir === 'rtl';\n    };\n    \n    setIsRTL(detectRTL());\n    \n    // Listen for direction changes\n    const observer = new MutationObserver(() => {\n      setIsRTL(detectRTL());\n    });\n    \n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['dir']\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n  \n  return (\n    <div dir={isRTL ? 'rtl' : 'ltr'}>\n      <RangeSlider\n        type=\"dual thumb\"\n        label={isRTL ? \"نطاق السعر\" : \"Price Range\"}\n        prefix={isRTL ? \"ر.س\" : \"$\"}\n        suffix={isRTL ? \"SAR\" : \"USD\"}\n        value={value}\n        onValueChange={setValue}\n        formatValue={(val) => \n          isRTL ? val.toLocaleString('ar-SA') : val.toLocaleString('en-US')\n        }\n        aria-label={isRTL ? \"نطاق الأسعار\" : \"Price range selector\"}\n      />\n    </div>\n  );\n};\n```\n\n## Component API Reference\n\n### RangeSlider Props\n\n```typescript\ninterface RangeSliderProps {\n  /** The controlled value of the slider */\n  value?: number[];\n  \n  /** The default value when initially rendered */\n  defaultValue?: number[];\n  \n  /** Event handler called when the value changes */\n  onValueChange?: (value: number[]) => void;\n  \n  /** Event handler called when interaction ends */\n  onValueCommit?: (value: number[]) => void;\n  \n  /** Minimum value (default: 0) */\n  min?: number;\n  \n  /** Maximum value (default: 100) */\n  max?: number;\n  \n  /** Step increment (default: 1) */\n  step?: number;\n  \n  /** Type of slider - single or dual thumb */\n  type?: 'single thumb' | 'dual thumb';\n  \n  /** Current state of the slider */\n  state?: 'rest' | 'focus' | 'active' | 'disabled' | 'error';\n  \n  /** Whether the slider is disabled */\n  disabled?: boolean;\n  \n  /** Text label displayed above the slider */\n  label?: string;\n  \n  /** Content to display before the slider */\n  prefix?: React.ReactNode;\n  \n  /** Content to display after the slider */\n  suffix?: React.ReactNode;\n  \n  /** Error message to display below the slider */\n  errorMessage?: string;\n  \n  /** Custom formatter for displaying values in tooltip */\n  formatValue?: (value: number) => string;\n  \n  /** Aria label for accessibility */\n  'aria-label'?: string;\n  \n  /** Whether to show tooltip on active state */\n  showTooltip?: boolean;\n  \n  /** Additional class names */\n  className?: string;\n}\n```\n\n### Common Value Formatters\n\n```jsx\n// Percentage\nformatValue={(value) => `${value}%`}\n\n// Currency\nformatValue={(value) => `$${value.toLocaleString()}`}\n\n// Temperature\nformatValue={(value) => `${value}°C`}\n\n// Time duration\nformatValue={(value) => `${Math.floor(value / 60)}:${(value % 60).toString().padStart(2, '0')}`}\n\n// File size\nformatValue={(value) => `${(value / 1024).toFixed(1)} KB`}\n```\n\n## Testing\n\n### Unit Testing Examples\n\n```jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { RangeSlider } from '@tagaddod-design/react';\n\ntest('renders slider with correct initial value', () => {\n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      defaultValue={[25]} \n      aria-label=\"Test slider\" \n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  expect(slider).toHaveAttribute('aria-valuenow', '25');\n});\n\ntest('calls onValueChange when slider moves', () => {\n  const handleChange = jest.fn();\n  \n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      defaultValue={[50]} \n      onValueChange={handleChange}\n      aria-label=\"Test slider\"\n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  fireEvent.keyDown(slider, { key: 'ArrowRight' });\n  \n  expect(handleChange).toHaveBeenCalledWith([51]);\n});\n\ntest('respects min and max boundaries', () => {\n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      min={10}\n      max={90}\n      defaultValue={[50]}\n      aria-label=\"Bounded slider\"\n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  expect(slider).toHaveAttribute('aria-valuemin', '10');\n  expect(slider).toHaveAttribute('aria-valuemax', '90');\n});\n```\n\n### Integration Testing\n\n```jsx\ntest('dual thumb slider with proper ranges', () => {\n  const handleChange = jest.fn();\n  \n  render(\n    <RangeSlider \n      type=\"dual thumb\"\n      defaultValue={[25, 75]} \n      onValueChange={handleChange}\n      aria-label=\"Range slider\"\n    />\n  );\n  \n  const sliders = screen.getAllByRole('slider');\n  expect(sliders).toHaveLength(2);\n  \n  // Test range constraints\n  fireEvent.keyDown(sliders[0], { key: 'ArrowRight' });\n  expect(handleChange).toHaveBeenCalledWith([26, 75]);\n});\n```\n\n## Performance Considerations\n\n- **Controlled Updates**: Use `onValueCommit` for expensive operations instead of `onValueChange`\n- **Debouncing**: Consider debouncing API calls triggered by slider changes\n- **Value Formatting**: Memoize complex `formatValue` functions to prevent unnecessary re-renders\n\n```jsx\n// Efficient pattern for API integration\nconst OptimizedSlider = () => {\n  const [value, setValue] = useState([50]);\n  const [debouncedValue, setDebouncedValue] = useState([50]);\n  \n  // Debounce API calls\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [value]);\n  \n  // Only trigger API call on debounced value\n  useEffect(() => {\n    // API call with debouncedValue\n  }, [debouncedValue]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Optimized\"\n      value={value}\n      onValueChange={setValue}\n      aria-label=\"Optimized slider\"\n    />\n  );\n};\n```\n\n## Browser Support\n\n- **Chrome**: 88+\n- **Firefox**: 85+\n- **Safari**: 14+\n- **Edge**: 88+\n\n**Features used:**\n- CSS Grid and Flexbox for layout\n- CSS custom properties for theming\n- Touch events for mobile interaction\n- Modern JavaScript features (optional chaining, nullish coalescing)\n\n## Troubleshooting\n\n### Common Issues\n\n**Slider not responding to keyboard input:**\n- Ensure the slider has focus (click on it first)\n- Verify `aria-label` is provided for proper accessibility\n- Check that `disabled` prop is not set to `true`\n\n**Values not updating correctly:**\n- Use controlled pattern with `value` and `onValueChange`\n- Ensure state updates are not being blocked\n- Check for conflicts with `defaultValue` when using controlled mode\n\n**State not reflecting correctly:**\n- Verify the `state` prop matches expected values\n- Check that `disabled` prop is properly coordinated with state\n- Ensure error messages are displayed when `state=\"error\"`\n\n**Styling inconsistencies:**\n- Verify all required design tokens are available\n- Check for CSS specificity conflicts\n- Ensure proper theme context is provided\n\n**RTL layout issues:**\n- Confirm `dir=\"rtl\"` is set on appropriate parent element\n- Verify the component uses Radix UI's native `dir` prop (not CSS-only solutions)\n- Check that range fill direction flows right-to-left correctly\n- Ensure prefix/suffix positioning follows RTL layout (suffix → slider → prefix)\n- Verify mouse interaction is intuitive (moving right increases value)\n- Confirm text content uses appropriate fonts for Arabic/RTL languages\n\n**RTL range fill not working correctly:**\n- Ensure you're using the native Radix UI `dir` prop implementation\n- Avoid conflicting CSS `direction: rtl` rules that can interfere with Radix UI\n- Check that `flex-direction: row` is used for the slider container in RTL\n- Verify the component properly detects RTL context through `dir` attribute detection\n\n**RTL prefix/suffix positioning wrong:**\n- Confirm the CSS uses `flex-direction: row` (not `row-reverse`) for RTL contexts\n- Check that the `dir=\"rtl\"` attribute is properly set on parent container\n- Verify no conflicting CSS is overriding the RTL layout rules\n",
    "componentInfo": {
      "props": {},
      "description": "RangeSlider Component",
      "usage": [
        "import { RangeSlider } from '@tagaddod-design/react';",
        "import { useState } from 'react';\nimport { RangeSlider } from '@tagaddod-design/react';\n\nconst BasicSlider = () => {\n  const [value, setValue] = useState([50]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Volume\"\n      value={value}\n      onValueChange={setValue}\n      min={0}\n      max={100}\n      step={1}\n      aria-label=\"Volume control\"\n    />\n  );\n};",
        "const [priceRange, setPriceRange] = useState([25, 75]);\n\n<RangeSlider\n  type=\"dual thumb\"\n  label=\"Price Range\"\n  value={priceRange}\n  onValueChange={setPriceRange}\n  min={0}\n  max={100}\n  aria-label=\"Price range\"\n/>",
        "<RangeSlider\n  type=\"single thumb\"\n  label=\"Price\"\n  prefix=\"$\"\n  suffix=\"USD\"\n  value={[50]}\n/>",
        "// Basic RTL support with Arabic content\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"dual thumb\"\n    label=\"شريط التمرير للنطاق\"\n    value={[30, 70]}\n    formatValue={(value) => `${value}%`}\n    aria-label=\"نسبة التقدم\"\n  />\n</div>",
        "// RTL slider with currency prefix\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"dual thumb\"\n    label=\"نطاق الراتب الشهري\"\n    prefix=\"ر.س\"\n    value={[3000, 8000]}\n    min={1000}\n    max={10000}\n    aria-label=\"نطاق الراتب\"\n  />\n</div>",
        "// RTL slider with percentage suffix\n<div dir=\"rtl\">\n  <RangeSlider\n    type=\"single thumb\"\n    label=\"مستوى الصوت\"\n    suffix=\"%\"\n    value={[75]}\n    min={0}\n    max={100}\n    aria-label=\"التحكم في مستوى الصوت\"\n  />\n</div>",
        "// Component automatically detects RTL context\n<Slider.Root\n  dir={isRTL ? 'rtl' : 'ltr'}  // Native Radix UI direction support\n  // ... other props\n>",
        "// Recommended RTL implementation\nconst RTLSliderExample = () => {\n  const [priceRange, setPriceRange] = useState([500, 1500]);\n  \n  return (\n    <div dir=\"rtl\">\n      <RangeSlider\n        type=\"dual thumb\"\n        label=\"نطاق السعر\"\n        prefix=\"ر.س\"\n        suffix=\"SAR\"\n        value={priceRange}\n        onValueChange={setPriceRange}\n        min={100}\n        max={2000}\n        step={50}\n        formatValue={(value) => value.toLocaleString('ar-SA')}\n        aria-label=\"نطاق الأسعار بالريال السعودي\"\n      />\n    </div>\n  );\n};",
        "// RTL with proper accessibility\n<RangeSlider\n  type=\"dual thumb\"\n  label=\"نطاق الراتب\"\n  prefix=\"ر.س\"\n  value={[3000, 7000]}\n  aria-label=\"اختيار نطاق الراتب الشهري\"\n  aria-describedby=\"salary-help\"\n  dir=\"rtl\"\n/>\n<div id=\"salary-help\" style={{ textAlign: 'right' }}>\n  استخدم الأسهم أو اسحب لتحديد النطاق المطلوب\n</div>",
        "<RangeSlider\n  type=\"single thumb\"\n  state=\"error\"\n  label=\"Invalid Range\"\n  errorMessage=\"Value must be between 10 and 90\"\n  value={[95]}\n/>",
        "<RangeSlider\n  type=\"single thumb\"\n  state=\"active\"\n  label=\"Volume\"\n  value={[75]}\n  formatValue={(value) => `${value}%`}\n  showTooltip={true}\n/>",
        "// Single value slider\n<RangeSlider\n  type=\"single thumb\"\n  aria-label=\"Volume level\"\n  label=\"Volume\"\n  value={[65]}\n  onValueChange={setVolume}\n  formatValue={(value) => `${value}%`}\n/>\n\n// Range slider with descriptive labels\n<RangeSlider\n  type=\"dual thumb\"\n  aria-label=\"Price range\"\n  label=\"Price Range\"\n  value={[40, 90]}\n  onValueChange={setPriceRange}\n  formatValue={(value) => `$${value}`}\n/>",
        "// Apply custom class for styling\n<RangeSlider \n  className=\"custom-slider\"\n  type=\"single thumb\"\n  label=\"Custom Styled\"\n  value={[45]}\n/>",
        "// Controlled (recommended for forms)\nconst ControlledSlider = () => {\n  const [value, setValue] = useState([50]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Controlled\"\n      value={value}\n      onValueChange={setValue}\n      aria-label=\"Controlled slider\"\n    />\n  );\n};\n\n// Uncontrolled (simple cases)\nconst UncontrolledSlider = () => (\n  <RangeSlider\n    type=\"single thumb\"\n    label=\"Uncontrolled\"\n    defaultValue={[25]}\n    onValueChange={(value) => console.log('Value:', value)}\n    aria-label=\"Uncontrolled slider\"\n  />\n);",
        "const SettingsForm = () => {\n  const [settings, setSettings] = useState({\n    volume: [75],\n    priceRange: [100, 500]\n  });\n  \n  const updateSetting = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n  \n  return (\n    <form>\n      <RangeSlider\n        type=\"single thumb\"\n        label=\"Volume\"\n        value={settings.volume}\n        onValueChange={(value) => updateSetting('volume', value)}\n        formatValue={(value) => `${value}%`}\n        aria-label=\"Volume level\"\n      />\n      \n      <RangeSlider\n        type=\"dual thumb\"\n        label=\"Price Range\"\n        value={settings.priceRange}\n        onValueChange={(value) => updateSetting('priceRange', value)}\n        min={0}\n        max={1000}\n        formatValue={(value) => `$${value}`}\n        aria-label=\"Price filter range\"\n      />\n    </form>\n  );\n};",
        "const EventHandlingExample = () => {\n  const [value, setValue] = useState([50]);\n  const [isChanging, setIsChanging] = useState(false);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Event Handling\"\n      value={value}\n      onValueChange={(newValue) => {\n        setValue(newValue);\n        setIsChanging(true);\n      }}\n      onValueCommit={(finalValue) => {\n        setIsChanging(false);\n        // Save to server, trigger analytics, etc.\n        console.log('Final value:', finalValue);\n      }}\n      aria-label=\"Event handling example\"\n    />\n  );\n};",
        "const RTLAwareSlider = () => {\n  const [value, setValue] = useState([25, 75]);\n  const [isRTL, setIsRTL] = useState(false);\n  \n  // Detect RTL context\n  useEffect(() => {\n    const detectRTL = () => {\n      if (typeof document === 'undefined') return false;\n      \n      // Check dir attribute on html, body, or closest parent\n      const htmlDir = document.documentElement.dir;\n      const bodyDir = document.body.dir;\n      \n      return htmlDir === 'rtl' || bodyDir === 'rtl';\n    };\n    \n    setIsRTL(detectRTL());\n    \n    // Listen for direction changes\n    const observer = new MutationObserver(() => {\n      setIsRTL(detectRTL());\n    });\n    \n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['dir']\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n  \n  return (\n    <div dir={isRTL ? 'rtl' : 'ltr'}>\n      <RangeSlider\n        type=\"dual thumb\"\n        label={isRTL ? \"نطاق السعر\" : \"Price Range\"}\n        prefix={isRTL ? \"ر.س\" : \"$\"}\n        suffix={isRTL ? \"SAR\" : \"USD\"}\n        value={value}\n        onValueChange={setValue}\n        formatValue={(val) => \n          isRTL ? val.toLocaleString('ar-SA') : val.toLocaleString('en-US')\n        }\n        aria-label={isRTL ? \"نطاق الأسعار\" : \"Price range selector\"}\n      />\n    </div>\n  );\n};",
        "// Percentage\nformatValue={(value) => `${value}%`}\n\n// Currency\nformatValue={(value) => `$${value.toLocaleString()}`}\n\n// Temperature\nformatValue={(value) => `${value}°C`}\n\n// Time duration\nformatValue={(value) => `${Math.floor(value / 60)}:${(value % 60).toString().padStart(2, '0')}`}\n\n// File size\nformatValue={(value) => `${(value / 1024).toFixed(1)} KB`}",
        "import { render, screen, fireEvent } from '@testing-library/react';\nimport { RangeSlider } from '@tagaddod-design/react';\n\ntest('renders slider with correct initial value', () => {\n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      defaultValue={[25]} \n      aria-label=\"Test slider\" \n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  expect(slider).toHaveAttribute('aria-valuenow', '25');\n});\n\ntest('calls onValueChange when slider moves', () => {\n  const handleChange = jest.fn();\n  \n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      defaultValue={[50]} \n      onValueChange={handleChange}\n      aria-label=\"Test slider\"\n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  fireEvent.keyDown(slider, { key: 'ArrowRight' });\n  \n  expect(handleChange).toHaveBeenCalledWith([51]);\n});\n\ntest('respects min and max boundaries', () => {\n  render(\n    <RangeSlider \n      type=\"single thumb\"\n      min={10}\n      max={90}\n      defaultValue={[50]}\n      aria-label=\"Bounded slider\"\n    />\n  );\n  \n  const slider = screen.getByRole('slider');\n  expect(slider).toHaveAttribute('aria-valuemin', '10');\n  expect(slider).toHaveAttribute('aria-valuemax', '90');\n});",
        "test('dual thumb slider with proper ranges', () => {\n  const handleChange = jest.fn();\n  \n  render(\n    <RangeSlider \n      type=\"dual thumb\"\n      defaultValue={[25, 75]} \n      onValueChange={handleChange}\n      aria-label=\"Range slider\"\n    />\n  );\n  \n  const sliders = screen.getAllByRole('slider');\n  expect(sliders).toHaveLength(2);\n  \n  // Test range constraints\n  fireEvent.keyDown(sliders[0], { key: 'ArrowRight' });\n  expect(handleChange).toHaveBeenCalledWith([26, 75]);\n});",
        "// Efficient pattern for API integration\nconst OptimizedSlider = () => {\n  const [value, setValue] = useState([50]);\n  const [debouncedValue, setDebouncedValue] = useState([50]);\n  \n  // Debounce API calls\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [value]);\n  \n  // Only trigger API call on debounced value\n  useEffect(() => {\n    // API call with debouncedValue\n  }, [debouncedValue]);\n  \n  return (\n    <RangeSlider\n      type=\"single thumb\"\n      label=\"Optimized\"\n      value={value}\n      onValueChange={setValue}\n      aria-label=\"Optimized slider\"\n    />\n  );\n};"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/RadioButton",
    "stories": [
      {
        "id": "Components/RadioButton--singleradiobutton",
        "name": "SingleRadioButton",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "SingleRadioButton",
        "description": ""
      },
      {
        "id": "Components/RadioButton--default",
        "name": "Default",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/RadioButton--withhelptext",
        "name": "WithHelpText",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "WithHelpText",
        "description": ""
      },
      {
        "id": "Components/RadioButton--disabled",
        "name": "Disabled",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/RadioButton--hiddenlabel",
        "name": "HiddenLabel",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "HiddenLabel",
        "description": ""
      },
      {
        "id": "Components/RadioButton--rtl",
        "name": "RTL",
        "title": "Components/RadioButton",
        "importPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "RadioGroup",
        "storyName": "RTL",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/RadioButton/RadioButton.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as RadioButtonStories from './RadioButton.stories';\nimport { RadioGroup, RadioButtonItem } from './RadioButton';\n\n<Meta of={RadioButtonStories} />\n\n# RadioButton Component\n\nThe RadioButton component allows users to select a single option from a set of mutually exclusive choices. This component is built on Radix UI's RadioGroup primitive and follows Tagaddod's design system specifications.\n\n## Overview\n\nRadioButtons are used when users need to select exactly one option from a list of related options. They're organized in groups where only one option can be selected at a time. When a user selects a new option, the previously selected option is automatically deselected.\n\nRadioButtons should be used when:\n- Only one choice can be selected from a list of options\n- All options need to be visible to help users make an informed decision\n- There are 2-7 options (use a dropdown for more options)\n\n## Import\n\n```jsx\nimport { RadioGroup, RadioButtonItem } from '@tagaddod/react';\n```\n\n## Component Structure\n\nThe RadioButton component consists of two parts:\n\n1. **RadioGroup**: Container that manages the state and grouping of radio buttons\n2. **RadioButtonItem**: Individual radio button with label and optional help text\n\n## Props\n\n### RadioGroup Props\n\n<ArgTypes of={RadioGroup} />\n\n### RadioButtonItem Props\n\n<ArgTypes of={RadioButtonItem} />\n\n## Basic Usage\n\nThe most common implementation of RadioButton with a default selected value:\n\n<Canvas of={RadioButtonStories.Default} />\n\n```jsx\nimport { RadioGroup, RadioButtonItem } from '@tagaddod/react';\n\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"option1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"option2\" label=\"Option 2\" />\n  <RadioButtonItem value=\"option3\" id=\"option3\" label=\"Option 3\" />\n</RadioGroup>\n```\n\n## Single Radio Button\n\nAn individual RadioButtonItem can be used with all available props:\n\n<Canvas of={RadioButtonStories.SingleRadioButton} />\n\n```jsx\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem \n    value=\"option1\" \n    id=\"radio1\" \n    label=\"Radio option\" \n    helpText=\"This is help text for the radio button\"\n  />\n</RadioGroup>\n```\n\n## RadioButton with Help Text\n\nAdd descriptive help text to provide more context for each option:\n\n<Canvas of={RadioButtonStories.WithHelpText} />\n\n```jsx\n<RadioGroup defaultValue=\"notification1\">\n  <RadioButtonItem \n    value=\"notification1\" \n    id=\"notification1\" \n    label=\"All new messages\" \n    helpText=\"Get notified about all messages\" \n    showHelpText={true}\n  />\n  <RadioButtonItem \n    value=\"notification2\" \n    id=\"notification2\" \n    label=\"Direct messages and mentions\" \n    helpText=\"Only get notified when you're mentioned\" \n    showHelpText={true}\n  />\n  <RadioButtonItem \n    value=\"notification3\" \n    id=\"notification3\" \n    label=\"Nothing\" \n    helpText=\"Don't receive any notifications\" \n    showHelpText={true}\n  />\n</RadioGroup>\n```\n\n## States\n\n### Disabled State\n\nDisable individual radio buttons or the entire group:\n\n<Canvas of={RadioButtonStories.Disabled} />\n\n```jsx\n// Disable individual radio button\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"disabled1\" label=\"Enabled option\" />\n  <RadioButtonItem value=\"option2\" id=\"disabled2\" label=\"Disabled option\" disabled />\n</RadioGroup>\n\n// Disable entire group\n<RadioGroup defaultValue=\"option1\" disabled>\n  <RadioButtonItem value=\"option1\" id=\"groupDisabled1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"groupDisabled2\" label=\"Option 2\" />\n</RadioGroup>\n```\n\n### Hidden Label\n\nVisually hide the label while keeping it accessible for screen readers:\n\n<Canvas of={RadioButtonStories.HiddenLabel} />\n\n```jsx\n<RadioGroup defaultValue=\"hidden1\">\n  <RadioButtonItem \n    value=\"hidden1\" \n    id=\"hidden1\" \n    label=\"Visible label\" \n    hideLabel={false}\n  />\n  <RadioButtonItem \n    value=\"hidden2\" \n    id=\"hidden2\" \n    label=\"Hidden label (still accessible)\" \n    hideLabel={true}\n  />\n</RadioGroup>\n```\n\n## Controlled vs Uncontrolled\n\n### Uncontrolled Mode\n\nUse `defaultValue` to set an initial selection without managing state:\n\n```jsx\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"uncontrolled1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"uncontrolled2\" label=\"Option 2\" />\n</RadioGroup>\n```\n\n### Controlled Mode\n\nManage the selection with React state:\n\n```jsx\nimport { useState } from 'react';\n\nfunction ControlledRadioGroup() {\n  const [selectedValue, setSelectedValue] = useState('option1');\n  \n  return (\n    <div>\n      <RadioGroup \n        value={selectedValue} \n        onValueChange={setSelectedValue}\n      >\n        <RadioButtonItem value=\"option1\" id=\"controlled1\" label=\"Option 1\" />\n        <RadioButtonItem value=\"option2\" id=\"controlled2\" label=\"Option 2\" />\n        <RadioButtonItem value=\"option3\" id=\"controlled3\" label=\"Option 3\" />\n      </RadioGroup>\n      \n      <div style={{ marginTop: '1rem' }}>\n        Selected value: {selectedValue}\n      </div>\n    </div>\n  );\n}\n```\n\n## Event Handling\n\nHandle selection changes using the `onValueChange` callback:\n\n```jsx\n<RadioGroup \n  defaultValue=\"option1\"\n  onValueChange={(value) => {\n    console.log(`Selected value: ${value}`);\n    // Perform actions based on selection\n  }}\n>\n  <RadioButtonItem value=\"option1\" id=\"event1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"event2\" label=\"Option 2\" />\n</RadioGroup>\n```\n\n## Form Integration\n\nRadioButton components work well with form libraries and the native HTML form API:\n\n```jsx\n// With React Hook Form\nimport { useForm } from 'react-hook-form';\n\nfunction FormExample() {\n  const { register, handleSubmit, watch } = useForm({\n    defaultValues: { subscription: 'monthly' }\n  });\n  \n  const subscription = watch('subscription');\n  \n  return (\n    <form onSubmit={handleSubmit(data => console.log(data))}>\n      <RadioGroup \n        value={subscription} \n        onValueChange={(value) => {\n          // Update the form value\n          register('subscription').onChange({ target: { name: 'subscription', value } });\n        }}\n      >\n        <RadioButtonItem value=\"monthly\" id=\"sub1\" label=\"Monthly\" />\n        <RadioButtonItem value=\"yearly\" id=\"sub2\" label=\"Yearly\" helpText=\"Save 16%\" />\n      </RadioGroup>\n      \n      <button type=\"submit\">Subscribe</button>\n    </form>\n  );\n}\n\n// With native HTML form\n<form onSubmit={(e) => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  console.log(formData.get('plan'));\n}}>\n  <RadioGroup name=\"plan\" defaultValue=\"basic\">\n    <RadioButtonItem value=\"basic\" id=\"plan1\" label=\"Basic Plan\" />\n    <RadioButtonItem value=\"pro\" id=\"plan2\" label=\"Pro Plan\" />\n    <RadioButtonItem value=\"enterprise\" id=\"plan3\" label=\"Enterprise Plan\" />\n  </RadioGroup>\n  \n  <button type=\"submit\">Continue</button>\n</form>\n```\n\n## Internationalization\n\nThe RadioButton component properly handles Right-to-Left (RTL) languages by:\n\n1. Adjusting layout direction for RTL text flow\n2. Placing the radio button on the right side in RTL mode\n3. Applying appropriate line height for Arabic text\n4. Correctly aligning help text in RTL contexts\n\n<Canvas of={RadioButtonStories.RTL} />\n\n```jsx\n<div dir=\"rtl\">\n  <RadioGroup defaultValue=\"rtl1\">\n    <RadioButtonItem \n      value=\"rtl1\" \n      id=\"rtl1\" \n      label=\"عربي\" \n    />\n    <RadioButtonItem \n      value=\"rtl2\" \n      id=\"rtl2\" \n      label=\"رسالة مساعدة\" \n      helpText=\"تيكست مساعد\"\n      showHelpText={true} \n    />\n  </RadioGroup>\n</div>\n```\n\n## Common Use Cases\n\n### Settings Options\n\nUse RadioButtons for mutually exclusive settings:\n\n```jsx\n<RadioGroup defaultValue=\"privacy2\">\n  <RadioButtonItem \n    value=\"privacy1\" \n    id=\"privacy1\" \n    label=\"Public\" \n    helpText=\"Anyone can see this content\" \n  />\n  <RadioButtonItem \n    value=\"privacy2\" \n    id=\"privacy2\" \n    label=\"Private\" \n    helpText=\"Only you can see this content\" \n  />\n  <RadioButtonItem \n    value=\"privacy3\" \n    id=\"privacy3\" \n    label=\"Shared\" \n    helpText=\"Only you and people you choose can see this content\" \n  />\n</RadioGroup>\n```\n\n### Checkout Form Options\n\nSelect shipping or payment methods:\n\n```jsx\n<form onSubmit={handleSubmit}>\n  <fieldset>\n    <legend>Shipping Method</legend>\n    <RadioGroup defaultValue=\"standard\" name=\"shipping\">\n      <RadioButtonItem \n        value=\"standard\" \n        id=\"shipping1\" \n        label=\"Standard Shipping\" \n        helpText=\"3-5 business days (Free)\" \n      />\n      <RadioButtonItem \n        value=\"expedited\" \n        id=\"shipping2\" \n        label=\"Expedited Shipping\" \n        helpText=\"2 business days ($9.99)\" \n      />\n      <RadioButtonItem \n        value=\"overnight\" \n        id=\"shipping3\" \n        label=\"Overnight Shipping\" \n        helpText=\"Next business day ($19.99)\" \n      />\n    </RadioGroup>\n  </fieldset>\n  <button type=\"submit\">Continue</button>\n</form>\n```\n\n### Survey Questions\n\nGather feedback with a single selection from a range of options:\n\n```jsx\n<div>\n  <h3>How would you rate your experience?</h3>\n  <RadioGroup defaultValue=\"satisfied\" name=\"satisfaction\">\n    <RadioButtonItem \n      value=\"very-satisfied\" \n      id=\"rating1\" \n      label=\"Very Satisfied\" \n    />\n    <RadioButtonItem \n      value=\"satisfied\" \n      id=\"rating2\" \n      label=\"Satisfied\" \n    />\n    <RadioButtonItem \n      value=\"neutral\" \n      id=\"rating3\" \n      label=\"Neutral\" \n    />\n    <RadioButtonItem \n      value=\"dissatisfied\" \n      id=\"rating4\" \n      label=\"Dissatisfied\" \n    />\n    <RadioButtonItem \n      value=\"very-dissatisfied\" \n      id=\"rating5\" \n      label=\"Very Dissatisfied\" \n    />\n  </RadioGroup>\n</div>\n```\n\n## Best Practices\n\n1. **Provide clear labels**: Each radio button should have a concise, descriptive label\n2. **Use help text for clarification**: Add help text when options need more explanation\n3. **Default selection**: When appropriate, set a default value to help users make decisions\n4. **Logical ordering**: Arrange options in a meaningful order (alphabetical, numerical, etc.)\n5. **Visual consistency**: Maintain consistent spacing between radio button items\n6. **Limit options**: If you have more than 7 options, consider using a dropdown instead\n7. **Group related options**: Use fieldset and legend for semantic grouping in forms\n\n## Accessibility\n\nThe RadioButton component follows accessibility best practices:\n\n- Uses proper ARIA roles and states (`role=\"radiogroup\"`, `aria-checked`)\n- Each radio button has a unique ID that connects it to its label\n- Visual states have sufficient color contrast (WCAG AA compliance)\n- Supports keyboard navigation:\n  - `Tab`: Move focus to the radio group\n  - `Space`: Select the focused radio button\n  - `Arrow keys`: Navigate between radio buttons in a group\n- Help text is properly associated with radio buttons\n- Hidden labels are visually hidden but still accessible to screen readers\n- Focus states are clearly visible for keyboard navigation\n\n## Implementation Details\n\n### CSS Variables\n\nThe RadioButton component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-size-*` | Radio button dimensions |\n| `--t-border-width-25` | Border width |\n| `--t-color-border-*` | Border colors |\n| `--t-color-fill-*` | Background colors |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-text-*` | Text colors |\n| `--t-font-family-primary` | Font family |\n| `--t-font-size-*` | Font sizes |\n| `--t-font-weight-*` | Font weights |\n| `--t-duration-fast` | Animation duration |\n| `--t-easing-in-out` | Animation timing function |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Customizing Style\n\nYou can customize the appearance of RadioButtons using CSS:\n\n```css\n/* Target the radio button */\n.your-class .RadioButtonItem {\n  /* Custom styles */\n}\n\n/* Target the label */\n.your-class .Label {\n  /* Custom styles */\n}\n\n/* Target the help text */\n.your-class .HelpText {\n  /* Custom styles */\n}\n```\n\nOr use the className prop for specific component instances:\n\n```jsx\n<RadioGroup className=\"custom-radio-group\">\n  <RadioButtonItem \n    value=\"option1\" \n    className=\"custom-radio-item\"\n    label=\"Customized Radio\" \n  />\n</RadioGroup>\n```\n\n### Technical Architecture\n\nThe RadioButton component is built on Radix UI's RadioGroup primitive, providing:\n\n- Proper keyboard navigation\n- ARIA attribute management\n- Focus handling\n- Selection state management\n\nThe Tagaddod implementation extends this with:\n\n- Design system token integration\n- Help text support\n- RTL language support\n- Hidden label support\n- Disabled state styling\n- Dynamic line-height adjustment for different languages\n\n### Performance Considerations\n\n- The component uses CSS transitions for smooth state changes\n- DOM structure is minimal to ensure good performance\n- State changes are efficiently handled by React's state management\n- RTL detection happens once per render\n\n### Browser Support\n\nThe RadioButton component is compatible with all modern browsers:\n\n- Chrome (latest)\n- Firefox (latest)\n- Safari (latest)\n- Edge (latest)\n- Mobile browsers (iOS Safari, Android Chrome)\n\nRTL language support works across all supported browsers.\n\n## Related Components\n\n- **Checkbox**: Use when multiple selections are allowed\n- **Switch**: Use for single toggle options (on/off)\n- **Select/Dropdown**: Use when there are many options or limited space\n- **SegmentedControl**: Use for immediate visual selection between a few options\n",
    "componentInfo": {
      "props": {},
      "description": "RadioButton Component",
      "usage": [
        "import { RadioGroup, RadioButtonItem } from '@tagaddod/react';",
        "import { RadioGroup, RadioButtonItem } from '@tagaddod/react';\n\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"option1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"option2\" label=\"Option 2\" />\n  <RadioButtonItem value=\"option3\" id=\"option3\" label=\"Option 3\" />\n</RadioGroup>",
        "<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem \n    value=\"option1\" \n    id=\"radio1\" \n    label=\"Radio option\" \n    helpText=\"This is help text for the radio button\"\n  />\n</RadioGroup>",
        "<RadioGroup defaultValue=\"notification1\">\n  <RadioButtonItem \n    value=\"notification1\" \n    id=\"notification1\" \n    label=\"All new messages\" \n    helpText=\"Get notified about all messages\" \n    showHelpText={true}\n  />\n  <RadioButtonItem \n    value=\"notification2\" \n    id=\"notification2\" \n    label=\"Direct messages and mentions\" \n    helpText=\"Only get notified when you're mentioned\" \n    showHelpText={true}\n  />\n  <RadioButtonItem \n    value=\"notification3\" \n    id=\"notification3\" \n    label=\"Nothing\" \n    helpText=\"Don't receive any notifications\" \n    showHelpText={true}\n  />\n</RadioGroup>",
        "// Disable individual radio button\n<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"disabled1\" label=\"Enabled option\" />\n  <RadioButtonItem value=\"option2\" id=\"disabled2\" label=\"Disabled option\" disabled />\n</RadioGroup>\n\n// Disable entire group\n<RadioGroup defaultValue=\"option1\" disabled>\n  <RadioButtonItem value=\"option1\" id=\"groupDisabled1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"groupDisabled2\" label=\"Option 2\" />\n</RadioGroup>",
        "<RadioGroup defaultValue=\"hidden1\">\n  <RadioButtonItem \n    value=\"hidden1\" \n    id=\"hidden1\" \n    label=\"Visible label\" \n    hideLabel={false}\n  />\n  <RadioButtonItem \n    value=\"hidden2\" \n    id=\"hidden2\" \n    label=\"Hidden label (still accessible)\" \n    hideLabel={true}\n  />\n</RadioGroup>",
        "<RadioGroup defaultValue=\"option1\">\n  <RadioButtonItem value=\"option1\" id=\"uncontrolled1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"uncontrolled2\" label=\"Option 2\" />\n</RadioGroup>",
        "import { useState } from 'react';\n\nfunction ControlledRadioGroup() {\n  const [selectedValue, setSelectedValue] = useState('option1');\n  \n  return (\n    <div>\n      <RadioGroup \n        value={selectedValue} \n        onValueChange={setSelectedValue}\n      >\n        <RadioButtonItem value=\"option1\" id=\"controlled1\" label=\"Option 1\" />\n        <RadioButtonItem value=\"option2\" id=\"controlled2\" label=\"Option 2\" />\n        <RadioButtonItem value=\"option3\" id=\"controlled3\" label=\"Option 3\" />\n      </RadioGroup>\n      \n      <div style={{ marginTop: '1rem' }}>\n        Selected value: {selectedValue}\n      </div>\n    </div>\n  );\n}",
        "<RadioGroup \n  defaultValue=\"option1\"\n  onValueChange={(value) => {\n    console.log(`Selected value: ${value}`);\n    // Perform actions based on selection\n  }}\n>\n  <RadioButtonItem value=\"option1\" id=\"event1\" label=\"Option 1\" />\n  <RadioButtonItem value=\"option2\" id=\"event2\" label=\"Option 2\" />\n</RadioGroup>",
        "// With React Hook Form\nimport { useForm } from 'react-hook-form';\n\nfunction FormExample() {\n  const { register, handleSubmit, watch } = useForm({\n    defaultValues: { subscription: 'monthly' }\n  });\n  \n  const subscription = watch('subscription');\n  \n  return (\n    <form onSubmit={handleSubmit(data => console.log(data))}>\n      <RadioGroup \n        value={subscription} \n        onValueChange={(value) => {\n          // Update the form value\n          register('subscription').onChange({ target: { name: 'subscription', value } });\n        }}\n      >\n        <RadioButtonItem value=\"monthly\" id=\"sub1\" label=\"Monthly\" />\n        <RadioButtonItem value=\"yearly\" id=\"sub2\" label=\"Yearly\" helpText=\"Save 16%\" />\n      </RadioGroup>\n      \n      <button type=\"submit\">Subscribe</button>\n    </form>\n  );\n}\n\n// With native HTML form\n<form onSubmit={(e) => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  console.log(formData.get('plan'));\n}}>\n  <RadioGroup name=\"plan\" defaultValue=\"basic\">\n    <RadioButtonItem value=\"basic\" id=\"plan1\" label=\"Basic Plan\" />\n    <RadioButtonItem value=\"pro\" id=\"plan2\" label=\"Pro Plan\" />\n    <RadioButtonItem value=\"enterprise\" id=\"plan3\" label=\"Enterprise Plan\" />\n  </RadioGroup>\n  \n  <button type=\"submit\">Continue</button>\n</form>",
        "<div dir=\"rtl\">\n  <RadioGroup defaultValue=\"rtl1\">\n    <RadioButtonItem \n      value=\"rtl1\" \n      id=\"rtl1\" \n      label=\"عربي\" \n    />\n    <RadioButtonItem \n      value=\"rtl2\" \n      id=\"rtl2\" \n      label=\"رسالة مساعدة\" \n      helpText=\"تيكست مساعد\"\n      showHelpText={true} \n    />\n  </RadioGroup>\n</div>",
        "<RadioGroup defaultValue=\"privacy2\">\n  <RadioButtonItem \n    value=\"privacy1\" \n    id=\"privacy1\" \n    label=\"Public\" \n    helpText=\"Anyone can see this content\" \n  />\n  <RadioButtonItem \n    value=\"privacy2\" \n    id=\"privacy2\" \n    label=\"Private\" \n    helpText=\"Only you can see this content\" \n  />\n  <RadioButtonItem \n    value=\"privacy3\" \n    id=\"privacy3\" \n    label=\"Shared\" \n    helpText=\"Only you and people you choose can see this content\" \n  />\n</RadioGroup>",
        "<form onSubmit={handleSubmit}>\n  <fieldset>\n    <legend>Shipping Method</legend>\n    <RadioGroup defaultValue=\"standard\" name=\"shipping\">\n      <RadioButtonItem \n        value=\"standard\" \n        id=\"shipping1\" \n        label=\"Standard Shipping\" \n        helpText=\"3-5 business days (Free)\" \n      />\n      <RadioButtonItem \n        value=\"expedited\" \n        id=\"shipping2\" \n        label=\"Expedited Shipping\" \n        helpText=\"2 business days ($9.99)\" \n      />\n      <RadioButtonItem \n        value=\"overnight\" \n        id=\"shipping3\" \n        label=\"Overnight Shipping\" \n        helpText=\"Next business day ($19.99)\" \n      />\n    </RadioGroup>\n  </fieldset>\n  <button type=\"submit\">Continue</button>\n</form>",
        "<div>\n  <h3>How would you rate your experience?</h3>\n  <RadioGroup defaultValue=\"satisfied\" name=\"satisfaction\">\n    <RadioButtonItem \n      value=\"very-satisfied\" \n      id=\"rating1\" \n      label=\"Very Satisfied\" \n    />\n    <RadioButtonItem \n      value=\"satisfied\" \n      id=\"rating2\" \n      label=\"Satisfied\" \n    />\n    <RadioButtonItem \n      value=\"neutral\" \n      id=\"rating3\" \n      label=\"Neutral\" \n    />\n    <RadioButtonItem \n      value=\"dissatisfied\" \n      id=\"rating4\" \n      label=\"Dissatisfied\" \n    />\n    <RadioButtonItem \n      value=\"very-dissatisfied\" \n      id=\"rating5\" \n      label=\"Very Dissatisfied\" \n    />\n  </RadioGroup>\n</div>",
        "<RadioGroup className=\"custom-radio-group\">\n  <RadioButtonItem \n    value=\"option1\" \n    className=\"custom-radio-item\"\n    label=\"Customized Radio\" \n  />\n</RadioGroup>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Popover",
    "stories": [
      {
        "id": "Components/Popover--default",
        "name": "Default",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Popover--withscrollbar",
        "name": "WithScrollbar",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithScrollbar",
        "description": ""
      },
      {
        "id": "Components/Popover--withlistbox",
        "name": "WithListbox",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithListbox",
        "description": ""
      },
      {
        "id": "Components/Popover--withlistboxicons",
        "name": "WithListboxIcons",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithListboxIcons",
        "description": ""
      },
      {
        "id": "Components/Popover--withmixedicons",
        "name": "WithMixedIcons",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithMixedIcons",
        "description": ""
      },
      {
        "id": "Components/Popover--withscrollablelistbox",
        "name": "WithScrollableListbox",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithScrollableListbox",
        "description": ""
      },
      {
        "id": "Components/Popover--enhancedscrollabledropdown",
        "name": "EnhancedScrollableDropdown",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "EnhancedScrollableDropdown",
        "description": ""
      },
      {
        "id": "Components/Popover--withmultipleselection",
        "name": "WithMultipleSelection",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "WithMultipleSelection",
        "description": ""
      },
      {
        "id": "Components/Popover--custommargins",
        "name": "CustomMargins",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "CustomMargins",
        "description": ""
      },
      {
        "id": "Components/Popover--listboxwithcustommargins",
        "name": "ListboxWithCustomMargins",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "ListboxWithCustomMargins",
        "description": ""
      },
      {
        "id": "Components/Popover--listboxwithcustompadding",
        "name": "ListboxWithCustomPadding",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "ListboxWithCustomPadding",
        "description": ""
      },
      {
        "id": "Components/Popover--different_positions",
        "name": "Different_Positions",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "Different_Positions",
        "description": ""
      },
      {
        "id": "Components/Popover--compositions",
        "name": "Compositions",
        "title": "Components/Popover",
        "importPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Popover",
        "storyName": "Compositions",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Popover/Popover.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as PopoverStories from './Popover.stories';\nimport { Popover, PopoverRoot, PopoverTrigger, PopoverContent, PopoverArrow, PopoverClose } from './Popover';\nimport { Button } from '../Button/Button';\n\n<Meta of={PopoverStories} />\n\n# Popover Component\n\nThe Popover component displays floating content that appears when a user interacts with a trigger element.\n\n## Overview\n\nPopovers are used to display additional information or actions related to an element on the page without navigating away from the current context. They're commonly used for tooltips, dropdowns, menus, and other contextual information displays.\n\n## Import\n\n```jsx\nimport { Popover } from '@tagaddod/react';\n```\n\nFor advanced usage with more control over the composition:\n\n```jsx\nimport { \n  PopoverRoot, \n  PopoverTrigger, \n  PopoverContent, \n  PopoverArrow, \n  PopoverClose \n} from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Popover} />\n\n## Basic Usage\n\n<Canvas of={PopoverStories.Default} />\n\n```jsx\nimport { Popover, Button } from '@tagaddod/react';\n\n<Popover\n  content=\"This is a basic popover content\"\n  side=\"bottom\"\n  align=\"center\"\n  showArrow={true}\n>\n  <Button>Click me</Button>\n</Popover>\n```\n\n## Types\n\n### Default\n\n<Canvas of={PopoverStories.Default} />\n\n```jsx\n<Popover\n  content=\"This is a basic popover content\"\n  type=\"default\"\n>\n  <Button>Default Popover</Button>\n</Popover>\n```\n\n### With Scrollbar\n\nFor popover content that might exceed the maximum height, use the `with-scrollbar` type to display a scrollbar.\n\n<Canvas of={PopoverStories.WithScrollbar} />\n\n```jsx\n<Popover\n  content={\n    <div>\n      <p>This popover has a lot of content that might require scrolling.</p>\n      <p>You can see how the scrollbar appears when the content exceeds the maximum height.</p>\n      <p>This is useful for displaying larger amounts of information without taking up too much screen space.</p>\n      <p>The popover will automatically handle overflow content.</p>\n      <p>This is line 5 of the content.</p>\n      <p>This is line 6 of the content.</p>\n      <p>This is line 7 of the content.</p>\n      <p>This is line 8 of the content.</p>\n    </div>\n  }\n  type=\"with-scrollbar\"\n>\n  <Button>Scrollable Popover</Button>\n</Popover>\n```\n\n## Positions\n\nYou can position the popover relative to the trigger using the `side` and `align` props.\n\n<Canvas of={PopoverStories.Different_Positions} />\n\n```jsx\n// Top position\n<Popover\n  content=\"This popover appears on top\"\n  side=\"top\"\n  align=\"center\"\n>\n  <Button>Top</Button>\n</Popover>\n\n// Right position\n<Popover\n  content=\"This popover appears on the right\"\n  side=\"right\"\n  align=\"center\"\n>\n  <Button>Right</Button>\n</Popover>\n\n// Bottom position\n<Popover\n  content=\"This popover appears on the bottom\"\n  side=\"bottom\"\n  align=\"center\"\n>\n  <Button>Bottom</Button>\n</Popover>\n\n// Left position\n<Popover\n  content=\"This popover appears on the left\"\n  side=\"left\"\n  align=\"center\"\n>\n  <Button>Left</Button>\n</Popover>\n```\n\n## Arrow\n\nYou can show or hide the arrow pointing to the trigger using the `showArrow` prop.\n\n```jsx\n// With arrow\n<Popover\n  content=\"This popover has an arrow\"\n  showArrow={true}\n>\n  <Button>With Arrow</Button>\n</Popover>\n\n// Without arrow\n<Popover\n  content=\"This popover has no arrow\"\n  showArrow={false}\n>\n  <Button>Without Arrow</Button>\n</Popover>\n```\n\n## Animation\n\nThe popover has a default animation duration of 200ms. You can customize this with the `animationDuration` prop.\n\n```jsx\n// Faster animation\n<Popover\n  content=\"This popover animates quickly\"\n  animationDuration={100}\n>\n  <Button>Fast Animation</Button>\n</Popover>\n\n// Slower animation\n<Popover\n  content=\"This popover animates slowly\"\n  animationDuration={400}\n>\n  <Button>Slow Animation</Button>\n</Popover>\n```\n\n## Advanced Composition\n\nFor more complex scenarios, you can use the individual popover components to create custom compositions.\n\n<Canvas of={PopoverStories.Compositions} />\n\n```jsx\nimport { \n  PopoverRoot, \n  PopoverTrigger, \n  PopoverContent, \n  PopoverArrow, \n  PopoverClose, \n  Button \n} from '@tagaddod/react';\n\n// With buttons\n<Popover\n  content={\n    <div>\n      <h4 style={{ margin: '0 0 0.5rem' }}>Popover Title</h4>\n      <p style={{ margin: '0 0 1rem' }}>This popover contains a title and action buttons.</p>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '0.5rem' }}>\n        <PopoverClose asChild>\n          <Button variant=\"secondary\" size=\"micro\">Cancel</Button>\n        </PopoverClose>\n        <PopoverClose asChild>\n          <Button size=\"micro\">Confirm</Button>\n        </PopoverClose>\n      </div>\n    </div>\n  }\n>\n  <Button>With Buttons</Button>\n</Popover>\n\n// Custom composition\n<PopoverRoot>\n  <PopoverTrigger asChild>\n    <Button>Custom Composition</Button>\n  </PopoverTrigger>\n  <PopoverContent sideOffset={5}>\n    <div style={{ padding: '0.5rem' }}>\n      <h4>Custom Components</h4>\n      <p>Using PopoverRoot, PopoverTrigger, and PopoverContent for more control.</p>\n      <PopoverArrow />\n    </div>\n  </PopoverContent>\n</PopoverRoot>\n```\n\n## Listbox Integration\n\nThe Popover component now includes powerful listbox integration for creating dropdown menus with rich customization options.\n\n### Basic Listbox\n\n<Canvas of={PopoverStories.WithListbox} />\n\n```jsx\n<Popover\n  useListbox\n  listboxOptions={[\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Select Option</Button>\n</Popover>\n```\n\n### Listbox with Icons\n\n<Canvas of={PopoverStories.WithListboxIcons} />\n\n```jsx\n<Popover\n  useListbox\n  listboxShowIcons\n  listboxDefaultIcon=\"📄\"\n  listboxOptions={[\n    { label: 'Documents', value: 'docs' },\n    { label: 'Images', value: 'images', icon: '🖼️' },\n    { label: 'Videos', value: 'videos', icon: '🎥' },\n    { label: 'Music', value: 'music', icon: '🎵' },\n    { label: 'Downloads', value: 'downloads' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>File Types</Button>\n</Popover>\n```\n\n### Mixed Icon Configuration\n\n<Canvas of={PopoverStories.WithMixedIcons} />\n\n```jsx\n<Popover\n  useListbox\n  listboxShowIcons={false} // Global setting is off\n  listboxOptions={[\n    { label: 'Home', value: 'home', showIcon: true, icon: '🏠' },\n    { label: 'Profile', value: 'profile' }, // No icon\n    { label: 'Settings', value: 'settings', showIcon: true, icon: '⚙️' },\n    { label: 'Help', value: 'help' }, // No icon\n    { label: 'Logout', value: 'logout', showIcon: true, icon: '🚪' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Navigation</Button>\n</Popover>\n```\n\n### Scrollable Listbox\n\n<Canvas of={PopoverStories.WithScrollableListbox} />\n\n```jsx\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxOptions={Array.from({ length: 15 }, (_, i) => ({\n    label: `Option ${i + 1}`,\n    value: `option-${i + 1}`,\n    helpText: i % 3 === 0 ? `This is help text for option ${i + 1}` : undefined,\n  }))}\n  listboxMaxItems={6}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Long List</Button>\n</Popover>\n```\n\n### Enhanced Scrollable Dropdown\n\n<Canvas of={PopoverStories.EnhancedScrollableDropdown} />\n\n```jsx\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxShowIcons\n  listboxMaxItems={8}\n  margin=\"small\"\n  listboxOptions={[\n    // Recent Files Section\n    { label: 'Document.pdf', value: 'doc1', icon: '📄', helpText: 'Modified 2 hours ago' },\n    { label: 'Presentation.pptx', value: 'pres1', icon: '📊', helpText: 'Modified 1 day ago' },\n    { label: 'Spreadsheet.xlsx', value: 'sheet1', icon: '📈', helpText: 'Modified 3 days ago' },\n    \n    // Favorites Section  \n    { label: 'Project Plans', value: 'fav1', icon: '⭐', divider: true },\n    { label: 'Team Photos', value: 'fav2', icon: '⭐' },\n    { label: 'Budget 2024', value: 'fav3', icon: '⭐' },\n    \n    // Applications Section\n    { label: 'Calculator', value: 'app1', icon: '🧮', divider: true },\n    { label: 'Calendar', value: 'app2', icon: '📅' },\n    { label: 'Notes', value: 'app3', icon: '📝' },\n    // ... more options\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Application Launcher</Button>\n</Popover>\n```\n\n### Multiple Selection\n\n<Canvas of={PopoverStories.WithMultipleSelection} />\n\n```jsx\n<Popover\n  useListbox\n  listboxMultiple\n  listboxSelectedValue={['1', '3']}\n  listboxOptions={[\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ]}\n  onListboxMultiSelect={(values) => console.log('Selected values:', values)}\n>\n  <Button>Multi-Select</Button>\n</Popover>\n```\n\n## Margin Customization\n\nYou can customize the spacing inside the popover using the `margin` prop.\n\n<Canvas of={PopoverStories.CustomMargins} />\n\n```jsx\n// No margin\n<Popover\n  content=\"No margin\"\n  margin=\"none\"\n>\n  <Button>No Margin</Button>\n</Popover>\n\n// Predefined margins\n<Popover\n  content=\"Small margin\"\n  margin=\"small\"\n>\n  <Button>Small</Button>\n</Popover>\n\n<Popover\n  content=\"Medium margin (default)\"\n  margin=\"medium\"\n>\n  <Button>Medium</Button>\n</Popover>\n\n<Popover\n  content=\"Large margin\"\n  margin=\"large\"\n>\n  <Button>Large</Button>\n</Popover>\n\n// Custom pixel value\n<Popover\n  content=\"Custom 20px margin\"\n  margin={20}\n>\n  <Button>Custom (20px)</Button>\n</Popover>\n```\n\n### Listbox with Custom Margins\n\n<Canvas of={PopoverStories.ListboxWithCustomMargins} />\n\n```jsx\n<Popover\n  useListbox\n  margin=\"none\"\n  listboxOptions={[\n    { label: 'Compact Option 1', value: '1' },\n    { label: 'Compact Option 2', value: '2' },\n    { label: 'Compact Option 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>No Margin Listbox</Button>\n</Popover>\n```\n\n## Listbox Item Padding Customization\n\nYou can customize the padding of individual listbox items using the `listboxItemPaddingVertical` and `listboxItemPaddingHorizontal` props.\n\n<Canvas of={PopoverStories.ListboxWithCustomPadding} />\n\n```jsx\n// Compact padding\n<Popover\n  useListbox\n  listboxItemPaddingVertical={8}\n  listboxItemPaddingHorizontal={12}\n  listboxOptions={[\n    { label: 'Compact Item 1', value: '1' },\n    { label: 'Compact Item 2', value: '2' },\n    { label: 'Compact Item 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Compact Padding</Button>\n</Popover>\n\n// Spacious padding\n<Popover\n  useListbox\n  listboxItemPaddingVertical={20}\n  listboxItemPaddingHorizontal={24}\n  listboxShowIcons\n  listboxDefaultIcon=\"📄\"\n  listboxOptions={[\n    { label: 'Spacious Item 1', value: '1' },\n    { label: 'Spacious Item 2', value: '2' },\n    { label: 'Spacious Item 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Spacious Padding</Button>\n</Popover>\n\n// Custom shape (narrow height, wide sides)\n<Popover\n  useListbox\n  listboxItemPaddingVertical={4}\n  listboxItemPaddingHorizontal={32}\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'Narrow Height', value: '1', icon: '🔥' },\n    { label: 'Wide Sides', value: '2', icon: '⚡' },\n    { label: 'Custom Shape', value: '3', icon: '🎯' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Custom Shape</Button>\n</Popover>\n\n// Scrollable list with custom padding\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxItemPaddingVertical={16}\n  listboxItemPaddingHorizontal={20}\n  listboxMaxItems={5}\n  listboxShowIcons\n  listboxOptions={Array.from({ length: 12 }, (_, i) => ({\n    label: `Padded Option ${i + 1}`,\n    value: `option-${i + 1}`,\n    icon: i % 3 === 0 ? '📁' : i % 3 === 1 ? '📄' : '🖼️',\n    helpText: i % 4 === 0 ? `Help text for option ${i + 1}` : undefined,\n  }))}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Scrollable Custom Padding</Button>\n</Popover>\n```\n\n## Controlled Mode\n\nYou can control the open state of the popover using the `open` and `onOpenChange` props.\n\n```jsx\nimport { useState } from 'react';\n\nfunction ControlledPopover() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <div>\n      <Button onClick={() => setOpen(!open)}>\n        {open ? 'Close Popover' : 'Open Popover'}\n      </Button>\n      \n      <Popover\n        content=\"This is a controlled popover\"\n        open={open}\n        onOpenChange={setOpen}\n      >\n        <Button>Trigger</Button>\n      </Popover>\n    </div>\n  );\n}\n```\n\n## Use Cases\n\n### Tooltips\n\n```jsx\n<Popover\n  content=\"This is additional information about the action\"\n  side=\"top\"\n  showArrow={true}\n>\n  <Button>Hover for Info</Button>\n</Popover>\n```\n\n### Dropdown Menus\n\n```jsx\n// Traditional content approach\n<Popover\n  content={\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Edit</button>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Duplicate</button>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Delete</button>\n    </div>\n  }\n>\n  <Button>Menu</Button>\n</Popover>\n\n// Using listbox for better accessibility and features\n<Popover\n  useListbox\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'Edit', value: 'edit', icon: '✏️' },\n    { label: 'Duplicate', value: 'duplicate', icon: '📋' },\n    { label: 'Delete', value: 'delete', icon: '🗑️' },\n  ]}\n  onListboxSelect={(value) => console.log('Action:', value)}\n>\n  <Button>Actions</Button>\n</Popover>\n```\n\n### Information Cards\n\n```jsx\n<Popover\n  content={\n    <div>\n      <h4>Item Details</h4>\n      <p>Status: Active</p>\n      <p>Created: June 1, 2023</p>\n      <p>Owner: John Doe</p>\n    </div>\n  }\n  side=\"right\"\n>\n  <Button>View Details</Button>\n</Popover>\n```\n\n### Color Picker\n\n```jsx\n<Popover\n  content={\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '8px' }}>\n      {['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'teal'].map(color => (\n        <div\n          key={color}\n          style={{\n            width: '24px',\n            height: '24px',\n            backgroundColor: color,\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n          onClick={() => console.log(`Selected color: ${color}`)}\n        />\n      ))}\n    </div>\n  }\n>\n  <Button>Pick a Color</Button>\n</Popover>\n```\n\n### File Manager Dropdown\n\n```jsx\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxShowIcons\n  listboxMaxItems={8}\n  listboxOptions={[\n    { label: 'New Folder', value: 'new-folder', icon: '📁' },\n    { label: 'New Document', value: 'new-doc', icon: '📄', divider: true },\n    { label: 'Upload Files', value: 'upload', icon: '📤' },\n    { label: 'Download Selected', value: 'download', icon: '📥', divider: true },\n    { label: 'Copy', value: 'copy', icon: '📋' },\n    { label: 'Cut', value: 'cut', icon: '✂️' },\n    { label: 'Paste', value: 'paste', icon: '📌', divider: true },\n    { label: 'Properties', value: 'properties', icon: 'ℹ️' },\n  ]}\n  onListboxSelect={(value) => console.log('File action:', value)}\n>\n  <Button>File Options</Button>\n</Popover>\n```\n\n### User Profile Menu\n\n```jsx\n<Popover\n  useListbox\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'John Doe', value: 'profile', icon: '👤', helpText: 'john.doe@company.com' },\n    { label: 'Account Settings', value: 'settings', icon: '⚙️', divider: true },\n    { label: 'Billing', value: 'billing', icon: '💳' },\n    { label: 'Help & Support', value: 'help', icon: '❓', divider: true },\n    { label: 'Sign Out', value: 'signout', icon: '🚪' },\n  ]}\n  onListboxSelect={(value) => console.log('Profile action:', value)}\n  side=\"bottom\"\n  align=\"end\"\n>\n  <Button>Profile</Button>\n</Popover>\n```\n\n### Language Selector\n\n```jsx\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxMaxItems={6}\n  listboxSelectedValue=\"en\"\n  listboxOptions={[\n    { label: 'English', value: 'en', icon: '🇺🇸' },\n    { label: 'العربية', value: 'ar', icon: '🇸🇦' },\n    { label: 'Français', value: 'fr', icon: '🇫🇷' },\n    { label: 'Español', value: 'es', icon: '🇪🇸' },\n    { label: 'Deutsch', value: 'de', icon: '🇩🇪' },\n    { label: '中文', value: 'zh', icon: '🇨🇳' },\n    { label: '日本語', value: 'ja', icon: '🇯🇵' },\n    { label: '한국어', value: 'ko', icon: '🇰🇷' },\n  ]}\n  onListboxSelect={(value) => console.log('Language:', value)}\n>\n  <Button>Language</Button>\n</Popover>\n```\n\n## Internationalization\n\nThe Popover component properly handles Right-to-Left (RTL) languages by:\n\n1. Adjusting the layout and positioning for RTL text flow\n2. Applying appropriate line height for Arabic text\n3. Supporting RTL content alignment\n\n```jsx\n<div dir=\"rtl\">\n  <Popover\n    content=\"محتوى منبثق باللغة العربية\"\n    side=\"bottom\"\n    align=\"start\"\n  >\n    <Button>افتح المنبثقة</Button>\n  </Popover>\n</div>\n```\n\n## Accessibility\n\nThe Popover component follows accessibility best practices:\n\n- Built on Radix UI's Popover primitive for robust accessibility\n- Properly manages focus when opened and closed\n- Uses appropriate ARIA attributes for screen readers\n- Supports keyboard navigation with Tab and Escape keys\n- Ensures sufficient color contrast\n- Properly positions content to avoid clipping and ensure visibility\n- Handles animations with respect for reduced motion preferences\n\n## Implementation Details\n\n### CSS Variables\n\nThe Popover component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-border-radius-300` | Border radius for the popover |\n| `--t-space-300` | Padding inside the popover |\n| `--t-color-surface-primary` | Background color |\n| `--t-shadow-popover` | Shadow for depth and elevation |\n| `--t-width-350` | Maximum width constraint |\n| `--t-height-350` | Maximum height for scrollable popovers |\n| `--t-z-index-popover` | Z-index for proper stacking |\n| `--t-color-border-subtle` | Border color |\n| `--t-color-fill-primary` | Arrow fill color |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Architecture\n\nThe Popover component is built on Radix UI's Popover primitive, which provides:\n\n1. Focus management\n2. Proper positioning\n3. Collision detection\n4. Keyboard navigation\n5. Animation support\n\nThe Tagaddod implementation extends this with:\n\n1. Design system integration with tokens\n2. RTL language support\n3. Scrollable content option\n4. Animation customization\n5. Simplified API for common cases\n\n### Browser Support\n\nThe Popover component is compatible with all modern browsers and includes RTL language support. The animation performance is optimized using CSS properties like `will-change` and `transform-origin`.\n",
    "componentInfo": {
      "props": {},
      "description": "Popover Component",
      "usage": [
        "import { Popover } from '@tagaddod/react';",
        "import { \n  PopoverRoot, \n  PopoverTrigger, \n  PopoverContent, \n  PopoverArrow, \n  PopoverClose \n} from '@tagaddod/react';",
        "import { Popover, Button } from '@tagaddod/react';\n\n<Popover\n  content=\"This is a basic popover content\"\n  side=\"bottom\"\n  align=\"center\"\n  showArrow={true}\n>\n  <Button>Click me</Button>\n</Popover>",
        "<Popover\n  content=\"This is a basic popover content\"\n  type=\"default\"\n>\n  <Button>Default Popover</Button>\n</Popover>",
        "<Popover\n  content={\n    <div>\n      <p>This popover has a lot of content that might require scrolling.</p>\n      <p>You can see how the scrollbar appears when the content exceeds the maximum height.</p>\n      <p>This is useful for displaying larger amounts of information without taking up too much screen space.</p>\n      <p>The popover will automatically handle overflow content.</p>\n      <p>This is line 5 of the content.</p>\n      <p>This is line 6 of the content.</p>\n      <p>This is line 7 of the content.</p>\n      <p>This is line 8 of the content.</p>\n    </div>\n  }\n  type=\"with-scrollbar\"\n>\n  <Button>Scrollable Popover</Button>\n</Popover>",
        "// Top position\n<Popover\n  content=\"This popover appears on top\"\n  side=\"top\"\n  align=\"center\"\n>\n  <Button>Top</Button>\n</Popover>\n\n// Right position\n<Popover\n  content=\"This popover appears on the right\"\n  side=\"right\"\n  align=\"center\"\n>\n  <Button>Right</Button>\n</Popover>\n\n// Bottom position\n<Popover\n  content=\"This popover appears on the bottom\"\n  side=\"bottom\"\n  align=\"center\"\n>\n  <Button>Bottom</Button>\n</Popover>\n\n// Left position\n<Popover\n  content=\"This popover appears on the left\"\n  side=\"left\"\n  align=\"center\"\n>\n  <Button>Left</Button>\n</Popover>",
        "// With arrow\n<Popover\n  content=\"This popover has an arrow\"\n  showArrow={true}\n>\n  <Button>With Arrow</Button>\n</Popover>\n\n// Without arrow\n<Popover\n  content=\"This popover has no arrow\"\n  showArrow={false}\n>\n  <Button>Without Arrow</Button>\n</Popover>",
        "// Faster animation\n<Popover\n  content=\"This popover animates quickly\"\n  animationDuration={100}\n>\n  <Button>Fast Animation</Button>\n</Popover>\n\n// Slower animation\n<Popover\n  content=\"This popover animates slowly\"\n  animationDuration={400}\n>\n  <Button>Slow Animation</Button>\n</Popover>",
        "import { \n  PopoverRoot, \n  PopoverTrigger, \n  PopoverContent, \n  PopoverArrow, \n  PopoverClose, \n  Button \n} from '@tagaddod/react';\n\n// With buttons\n<Popover\n  content={\n    <div>\n      <h4 style={{ margin: '0 0 0.5rem' }}>Popover Title</h4>\n      <p style={{ margin: '0 0 1rem' }}>This popover contains a title and action buttons.</p>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '0.5rem' }}>\n        <PopoverClose asChild>\n          <Button variant=\"secondary\" size=\"micro\">Cancel</Button>\n        </PopoverClose>\n        <PopoverClose asChild>\n          <Button size=\"micro\">Confirm</Button>\n        </PopoverClose>\n      </div>\n    </div>\n  }\n>\n  <Button>With Buttons</Button>\n</Popover>\n\n// Custom composition\n<PopoverRoot>\n  <PopoverTrigger asChild>\n    <Button>Custom Composition</Button>\n  </PopoverTrigger>\n  <PopoverContent sideOffset={5}>\n    <div style={{ padding: '0.5rem' }}>\n      <h4>Custom Components</h4>\n      <p>Using PopoverRoot, PopoverTrigger, and PopoverContent for more control.</p>\n      <PopoverArrow />\n    </div>\n  </PopoverContent>\n</PopoverRoot>",
        "<Popover\n  useListbox\n  listboxOptions={[\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Select Option</Button>\n</Popover>",
        "<Popover\n  useListbox\n  listboxShowIcons\n  listboxDefaultIcon=\"📄\"\n  listboxOptions={[\n    { label: 'Documents', value: 'docs' },\n    { label: 'Images', value: 'images', icon: '🖼️' },\n    { label: 'Videos', value: 'videos', icon: '🎥' },\n    { label: 'Music', value: 'music', icon: '🎵' },\n    { label: 'Downloads', value: 'downloads' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>File Types</Button>\n</Popover>",
        "<Popover\n  useListbox\n  listboxShowIcons={false} // Global setting is off\n  listboxOptions={[\n    { label: 'Home', value: 'home', showIcon: true, icon: '🏠' },\n    { label: 'Profile', value: 'profile' }, // No icon\n    { label: 'Settings', value: 'settings', showIcon: true, icon: '⚙️' },\n    { label: 'Help', value: 'help' }, // No icon\n    { label: 'Logout', value: 'logout', showIcon: true, icon: '🚪' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Navigation</Button>\n</Popover>",
        "<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxOptions={Array.from({ length: 15 }, (_, i) => ({\n    label: `Option ${i + 1}`,\n    value: `option-${i + 1}`,\n    helpText: i % 3 === 0 ? `This is help text for option ${i + 1}` : undefined,\n  }))}\n  listboxMaxItems={6}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Long List</Button>\n</Popover>",
        "<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxShowIcons\n  listboxMaxItems={8}\n  margin=\"small\"\n  listboxOptions={[\n    // Recent Files Section\n    { label: 'Document.pdf', value: 'doc1', icon: '📄', helpText: 'Modified 2 hours ago' },\n    { label: 'Presentation.pptx', value: 'pres1', icon: '📊', helpText: 'Modified 1 day ago' },\n    { label: 'Spreadsheet.xlsx', value: 'sheet1', icon: '📈', helpText: 'Modified 3 days ago' },\n    \n    // Favorites Section  \n    { label: 'Project Plans', value: 'fav1', icon: '⭐', divider: true },\n    { label: 'Team Photos', value: 'fav2', icon: '⭐' },\n    { label: 'Budget 2024', value: 'fav3', icon: '⭐' },\n    \n    // Applications Section\n    { label: 'Calculator', value: 'app1', icon: '🧮', divider: true },\n    { label: 'Calendar', value: 'app2', icon: '📅' },\n    { label: 'Notes', value: 'app3', icon: '📝' },\n    // ... more options\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Application Launcher</Button>\n</Popover>",
        "<Popover\n  useListbox\n  listboxMultiple\n  listboxSelectedValue={['1', '3']}\n  listboxOptions={[\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ]}\n  onListboxMultiSelect={(values) => console.log('Selected values:', values)}\n>\n  <Button>Multi-Select</Button>\n</Popover>",
        "// No margin\n<Popover\n  content=\"No margin\"\n  margin=\"none\"\n>\n  <Button>No Margin</Button>\n</Popover>\n\n// Predefined margins\n<Popover\n  content=\"Small margin\"\n  margin=\"small\"\n>\n  <Button>Small</Button>\n</Popover>\n\n<Popover\n  content=\"Medium margin (default)\"\n  margin=\"medium\"\n>\n  <Button>Medium</Button>\n</Popover>\n\n<Popover\n  content=\"Large margin\"\n  margin=\"large\"\n>\n  <Button>Large</Button>\n</Popover>\n\n// Custom pixel value\n<Popover\n  content=\"Custom 20px margin\"\n  margin={20}\n>\n  <Button>Custom (20px)</Button>\n</Popover>",
        "<Popover\n  useListbox\n  margin=\"none\"\n  listboxOptions={[\n    { label: 'Compact Option 1', value: '1' },\n    { label: 'Compact Option 2', value: '2' },\n    { label: 'Compact Option 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>No Margin Listbox</Button>\n</Popover>",
        "// Compact padding\n<Popover\n  useListbox\n  listboxItemPaddingVertical={8}\n  listboxItemPaddingHorizontal={12}\n  listboxOptions={[\n    { label: 'Compact Item 1', value: '1' },\n    { label: 'Compact Item 2', value: '2' },\n    { label: 'Compact Item 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Compact Padding</Button>\n</Popover>\n\n// Spacious padding\n<Popover\n  useListbox\n  listboxItemPaddingVertical={20}\n  listboxItemPaddingHorizontal={24}\n  listboxShowIcons\n  listboxDefaultIcon=\"📄\"\n  listboxOptions={[\n    { label: 'Spacious Item 1', value: '1' },\n    { label: 'Spacious Item 2', value: '2' },\n    { label: 'Spacious Item 3', value: '3' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Spacious Padding</Button>\n</Popover>\n\n// Custom shape (narrow height, wide sides)\n<Popover\n  useListbox\n  listboxItemPaddingVertical={4}\n  listboxItemPaddingHorizontal={32}\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'Narrow Height', value: '1', icon: '🔥' },\n    { label: 'Wide Sides', value: '2', icon: '⚡' },\n    { label: 'Custom Shape', value: '3', icon: '🎯' },\n  ]}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Custom Shape</Button>\n</Popover>\n\n// Scrollable list with custom padding\n<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxItemPaddingVertical={16}\n  listboxItemPaddingHorizontal={20}\n  listboxMaxItems={5}\n  listboxShowIcons\n  listboxOptions={Array.from({ length: 12 }, (_, i) => ({\n    label: `Padded Option ${i + 1}`,\n    value: `option-${i + 1}`,\n    icon: i % 3 === 0 ? '📁' : i % 3 === 1 ? '📄' : '🖼️',\n    helpText: i % 4 === 0 ? `Help text for option ${i + 1}` : undefined,\n  }))}\n  onListboxSelect={(value) => console.log('Selected:', value)}\n>\n  <Button>Scrollable Custom Padding</Button>\n</Popover>",
        "import { useState } from 'react';\n\nfunction ControlledPopover() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <div>\n      <Button onClick={() => setOpen(!open)}>\n        {open ? 'Close Popover' : 'Open Popover'}\n      </Button>\n      \n      <Popover\n        content=\"This is a controlled popover\"\n        open={open}\n        onOpenChange={setOpen}\n      >\n        <Button>Trigger</Button>\n      </Popover>\n    </div>\n  );\n}",
        "<Popover\n  content=\"This is additional information about the action\"\n  side=\"top\"\n  showArrow={true}\n>\n  <Button>Hover for Info</Button>\n</Popover>",
        "// Traditional content approach\n<Popover\n  content={\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Edit</button>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Duplicate</button>\n      <button style={{ padding: '8px', textAlign: 'left' }}>Delete</button>\n    </div>\n  }\n>\n  <Button>Menu</Button>\n</Popover>\n\n// Using listbox for better accessibility and features\n<Popover\n  useListbox\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'Edit', value: 'edit', icon: '✏️' },\n    { label: 'Duplicate', value: 'duplicate', icon: '📋' },\n    { label: 'Delete', value: 'delete', icon: '🗑️' },\n  ]}\n  onListboxSelect={(value) => console.log('Action:', value)}\n>\n  <Button>Actions</Button>\n</Popover>",
        "<Popover\n  content={\n    <div>\n      <h4>Item Details</h4>\n      <p>Status: Active</p>\n      <p>Created: June 1, 2023</p>\n      <p>Owner: John Doe</p>\n    </div>\n  }\n  side=\"right\"\n>\n  <Button>View Details</Button>\n</Popover>",
        "<Popover\n  content={\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '8px' }}>\n      {['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'teal'].map(color => (\n        <div\n          key={color}\n          style={{\n            width: '24px',\n            height: '24px',\n            backgroundColor: color,\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n          onClick={() => console.log(`Selected color: ${color}`)}\n        />\n      ))}\n    </div>\n  }\n>\n  <Button>Pick a Color</Button>\n</Popover>",
        "<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxShowIcons\n  listboxMaxItems={8}\n  listboxOptions={[\n    { label: 'New Folder', value: 'new-folder', icon: '📁' },\n    { label: 'New Document', value: 'new-doc', icon: '📄', divider: true },\n    { label: 'Upload Files', value: 'upload', icon: '📤' },\n    { label: 'Download Selected', value: 'download', icon: '📥', divider: true },\n    { label: 'Copy', value: 'copy', icon: '📋' },\n    { label: 'Cut', value: 'cut', icon: '✂️' },\n    { label: 'Paste', value: 'paste', icon: '📌', divider: true },\n    { label: 'Properties', value: 'properties', icon: 'ℹ️' },\n  ]}\n  onListboxSelect={(value) => console.log('File action:', value)}\n>\n  <Button>File Options</Button>\n</Popover>",
        "<Popover\n  useListbox\n  listboxShowIcons\n  listboxOptions={[\n    { label: 'John Doe', value: 'profile', icon: '👤', helpText: 'john.doe@company.com' },\n    { label: 'Account Settings', value: 'settings', icon: '⚙️', divider: true },\n    { label: 'Billing', value: 'billing', icon: '💳' },\n    { label: 'Help & Support', value: 'help', icon: '❓', divider: true },\n    { label: 'Sign Out', value: 'signout', icon: '🚪' },\n  ]}\n  onListboxSelect={(value) => console.log('Profile action:', value)}\n  side=\"bottom\"\n  align=\"end\"\n>\n  <Button>Profile</Button>\n</Popover>",
        "<Popover\n  useListbox\n  type=\"with-scrollbar\"\n  listboxMaxItems={6}\n  listboxSelectedValue=\"en\"\n  listboxOptions={[\n    { label: 'English', value: 'en', icon: '🇺🇸' },\n    { label: 'العربية', value: 'ar', icon: '🇸🇦' },\n    { label: 'Français', value: 'fr', icon: '🇫🇷' },\n    { label: 'Español', value: 'es', icon: '🇪🇸' },\n    { label: 'Deutsch', value: 'de', icon: '🇩🇪' },\n    { label: '中文', value: 'zh', icon: '🇨🇳' },\n    { label: '日本語', value: 'ja', icon: '🇯🇵' },\n    { label: '한국어', value: 'ko', icon: '🇰🇷' },\n  ]}\n  onListboxSelect={(value) => console.log('Language:', value)}\n>\n  <Button>Language</Button>\n</Popover>",
        "<div dir=\"rtl\">\n  <Popover\n    content=\"محتوى منبثق باللغة العربية\"\n    side=\"bottom\"\n    align=\"start\"\n  >\n    <Button>افتح المنبثقة</Button>\n  </Popover>\n</div>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Modal",
    "stories": [
      {
        "id": "Components/Modal--default",
        "name": "Default",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Modal--withouttitle",
        "name": "WithoutTitle",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "WithoutTitle",
        "description": ""
      },
      {
        "id": "Components/Modal--withoutfooter",
        "name": "WithoutFooter",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "WithoutFooter",
        "description": ""
      },
      {
        "id": "Components/Modal--arabiccontent",
        "name": "ArabicContent",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "ArabicContent",
        "description": ""
      },
      {
        "id": "Components/Modal--cancelandactions",
        "name": "CancelAndActions",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "CancelAndActions",
        "description": ""
      },
      {
        "id": "Components/Modal--swapandactions",
        "name": "SwapAndActions",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "SwapAndActions",
        "description": ""
      },
      {
        "id": "Components/Modal--actionsonly",
        "name": "ActionsOnly",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "ActionsOnly",
        "description": ""
      },
      {
        "id": "Components/Modal--singlebutton",
        "name": "SingleButton",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "SingleButton",
        "description": ""
      },
      {
        "id": "Components/Modal--customswapcontent",
        "name": "CustomSwapContent",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "CustomSwapContent",
        "description": ""
      },
      {
        "id": "Components/Modal--smallwidth",
        "name": "SmallWidth",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "SmallWidth",
        "description": ""
      },
      {
        "id": "Components/Modal--mediumwidth",
        "name": "MediumWidth",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "MediumWidth",
        "description": ""
      },
      {
        "id": "Components/Modal--largewidth",
        "name": "LargeWidth",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "LargeWidth",
        "description": ""
      },
      {
        "id": "Components/Modal--customwidth",
        "name": "CustomWidth",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "CustomWidth",
        "description": ""
      },
      {
        "id": "Components/Modal--withminmaxwidth",
        "name": "WithMinMaxWidth",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "WithMinMaxWidth",
        "description": ""
      },
      {
        "id": "Components/Modal--customcontentpadding",
        "name": "CustomContentPadding",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "CustomContentPadding",
        "description": ""
      },
      {
        "id": "Components/Modal--nocontentpadding",
        "name": "NoContentPadding",
        "title": "Components/Modal",
        "importPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Modal",
        "storyName": "NoContentPadding",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Modal/Modal.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as ModalStories from './Modal.stories';\nimport { Modal } from './Modal';\nimport { Button } from '../Button/Button';\n\n<Meta of={ModalStories} />\n\n# Modal Component\n\nThe Modal component is a dialog that appears on top of the main content to provide critical information or request user input.\n\n## Overview\n\nModals are used to focus user attention on a specific task or piece of information without navigating away from the current screen. They're ideal for confirmations, alerts, and short forms.\n\n## Import\n\n```jsx\nimport { Modal } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Modal} />\n\n## Basic Usage\n\n<Canvas of={ModalStories.Default} />\n\n```jsx\nimport { Modal, Button } from '@tagaddod/react';\n\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Title\"\n>\n  <div style={{ textAlign: 'center', padding: '16px' }}>\n    Modal content goes here\n  </div>\n</Modal>\n```\n\n## Modal Variants\n\n### Default Modal\n\n<Canvas of={ModalStories.Default} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Title\"\n  showTitle={true}\n  showFooter={true}\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Confirm\"\n  onCancel={() => console.log('Cancelled')}\n  onConfirm={() => console.log('Confirmed')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal content goes here\n  </div>\n</Modal>\n```\n\n## Content Padding\n\nThe Modal content area has customizable padding using design tokens. The default value is `--t-space-500`.\n\n### Default Content Padding\n\n<Canvas of={ModalStories.Default} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Default Padding\"\n  // contentPadding=\"var(--t-space-500)\" (default)\n>\n  <div>\n    Content with default padding (--t-space-500)\n  </div>\n</Modal>\n```\n\n### Custom Content Padding\n\n<Canvas of={ModalStories.CustomContentPadding} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Custom Padding\"\n  contentPadding=\"var(--t-space-700)\"\n>\n  <div>\n    Content with larger padding (--t-space-700)\n  </div>\n</Modal>\n```\n\n### No Content Padding\n\n<Canvas of={ModalStories.NoContentPadding} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"No Padding\"\n  contentPadding=\"0\"\n>\n  <div style={{ padding: '16px', backgroundColor: '#f0f0f0' }}>\n    Content with no default padding - you can apply your own\n  </div>\n</Modal>\n```\n\n## Width Sizes\n\nThe Modal component supports different width sizes to accommodate various content types and use cases.\n\n### Small Width (424px / 26.5rem)\n\nPerfect for simple confirmations and alerts.\n\n<Canvas of={ModalStories.SmallWidth} />\n\n```jsx\n<Modal\n  width=\"small\"\n  trigger={<Button>Open Small Modal</Button>}\n  title=\"Small Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a small modal perfect for confirmations.\n  </div>\n</Modal>\n```\n\n### Medium Width (620px / 38.75rem)\n\nThe default width, ideal for most modal content.\n\n<Canvas of={ModalStories.MediumWidth} />\n\n```jsx\n<Modal\n  width=\"medium\"\n  trigger={<Button>Open Medium Modal</Button>}\n  title=\"Medium Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a medium modal suitable for forms and detailed content.\n  </div>\n</Modal>\n```\n\n### Large Width (980px / 61.25rem)\n\nFor complex forms, data tables, or rich content.\n\n<Canvas of={ModalStories.LargeWidth} />\n\n```jsx\n<Modal\n  width=\"large\"\n  trigger={<Button>Open Large Modal</Button>}\n  title=\"Large Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a large modal perfect for complex content like forms or data tables.\n  </div>\n</Modal>\n```\n\n### Custom Width\n\nUse custom width with specific dimensions or percentages.\n\n<Canvas of={ModalStories.CustomWidth} />\n\n```jsx\n<Modal\n  width=\"custom\"\n  customWidth=\"50rem\"\n  trigger={<Button>Open Custom Width Modal</Button>}\n  title=\"Custom Width Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This modal has a custom width of 50rem.\n  </div>\n</Modal>\n```\n\n### With Min/Max Width Constraints\n\nControl the responsive behavior with minimum and maximum width constraints.\n\n<Canvas of={ModalStories.WithMinMaxWidth} />\n\n```jsx\n<Modal\n  width=\"custom\"\n  customWidth=\"70%\"\n  minWidth=\"20rem\"\n  maxWidth=\"60rem\"\n  trigger={<Button>Open Modal with Min/Max Width</Button>}\n  title=\"Responsive Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This modal has a responsive width of 70% with min/max constraints.\n  </div>\n</Modal>\n```\n\n### Without Title\n\n<Canvas of={ModalStories.WithoutTitle} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  showTitle={false}\n  showFooter={true}\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Confirm\"\n>\n  <div style={{ padding: '16px' }}>\n    Modal without a title bar\n  </div>\n</Modal>\n```\n\n### Without Footer\n\n<Canvas of={ModalStories.WithoutFooter} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Without Footer\"\n  showTitle={true}\n  showFooter={false}\n>\n  <div style={{ padding: '16px' }}>\n    Modal without action buttons in footer\n  </div>\n</Modal>\n```\n\n\n## Footer Variants\n\nThe Modal component supports three footer variants to handle different use cases and layouts.\n\n### Cancel and Actions Footer\n\nThe default variant with a cancel button on the left and action buttons on the right. The cancel button uses a plain variant with neutral tone.\n\n<Canvas of={ModalStories.CancelAndActions} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Cancel & Actions Footer\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onCancel={() => console.log('Cancelled')}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with cancel button and action buttons\n  </div>\n</Modal>\n```\n\n### Swap Area and Actions Footer\n\nA variant with a customizable swap area on the left and action buttons on the right. Perfect for displaying additional information or controls.\n\n<Canvas of={ModalStories.SwapAndActions} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Swap & Actions Footer\"\n  footerVariant=\"swapAndActions\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with swap area and action buttons\n  </div>\n</Modal>\n```\n\n### Actions Only Footer\n\nA minimal variant with only action buttons aligned to the right. No additional elements on the left side.\n\n<Canvas of={ModalStories.ActionsOnly} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Actions Only Footer\"\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with only action buttons\n  </div>\n</Modal>\n```\n\n### Single Button\n\nYou can show or hide individual buttons using the `showPrimaryButton` and `showSecondaryButton` props.\n\n<Canvas of={ModalStories.SingleButton} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Single Button\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save\"\n  showPrimaryButton={true}\n  showSecondaryButton={false}\n  onCancel={() => console.log('Cancelled')}\n  onPrimary={() => console.log('Primary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with single action button\n  </div>\n</Modal>\n```\n\n### Custom Swap Content\n\nWhen using the `swapAndActions` variant, you can provide custom content for the swap area.\n\n<Canvas of={ModalStories.CustomSwapContent} />\n\n```jsx\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Custom Swap Content\"\n  footerVariant=\"swapAndActions\"\n  swapContent={<span style={{ color: 'blue', fontWeight: 'bold' }}>Custom Content</span>}\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with custom swap area content\n  </div>\n</Modal>\n```\n\n\n\n## Internationalization & RTL Support\n\nThe Modal component provides comprehensive Right-to-Left (RTL) support with automatic layout mirroring for Arabic, Hebrew, and other RTL languages. The component adapts both header and footer positioning when the direction changes.\n\n### RTL Layout Behavior\n\n#### Header RTL Positioning\n- **LTR**: [Title] ←→ [Close Button]\n- **RTL**: [Close Button] ←→ [Title]\n\n#### Footer RTL Positioning\n- **Cancel & Actions RTL**: [Primary] [Secondary] ←→ [Cancel]\n- **Swap & Actions RTL**: [Primary] [Secondary] ←→ [Swap Content]\n- **Actions Only RTL**: [Primary] [Secondary] (left-aligned)\n\n### Arabic Content Example\n\n<Canvas of={ModalStories.ArabicContent} />\n\n```jsx\n<Modal\n  trigger={<Button>فتح النافذة</Button>}\n  title=\"العنوان\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"إلغاء\"\n  primaryLabel=\"تأكيد\"\n  secondaryLabel=\"ثانوي\"\n>\n  <div style={{ padding: '16px', textAlign: 'right', direction: 'rtl' }}>\n    محتوى النافذة المنبثقة باللغة العربية. يمكنك تبديل الاتجاه من شريط الأدوات لرؤية التخطيط الصحيح.\n  </div>\n</Modal>\n```\n\n### Using RTL Mode\n\nThe Modal automatically detects RTL direction from:\n\n1. **Storybook Toolbar**: Use the direction toggle in Storybook\n2. **Document Direction**: Set `document.dir = 'rtl'` or `document.documentElement.dir = 'rtl'`\n3. **RTL Prop**: Explicitly pass `rtl={true}` to the component\n\n```jsx\n// Method 1: Automatic detection from document\ndocument.dir = 'rtl';\n\n// Method 2: Explicit prop\n<Modal rtl={true} title=\"العنوان\">\n  {/* Content */}\n</Modal>\n\n// Method 3: Storybook toolbar (development)\n// Use the direction toggle in Storybook's toolbar\n```\n\n### RTL Font and Typography\n\nThe component automatically adjusts line-height and typography settings for RTL languages:\n\n- **Arabic/RTL**: Uses `var(--t-line-height-arabic, 1.2)` for better text rendering\n- **English/LTR**: Uses `var(--t-line-height-english, 1.5)` for optimal readability\n\n### RTL Footer Behavior\n\nIn RTL mode, the Modal automatically adjusts footer layouts:\n\n- **Cancel and Actions**: Cancel button moves to the right, actions to the left\n- **Swap and Actions**: Swap area moves to the right, actions to the left  \n- **Actions Only**: Action buttons align to the left side\n- **Button Order**: Within action groups, button order is reversed (primary becomes leftmost)\n\n## Use Cases\n\n### Confirmation Dialog\n\n```jsx\n<Modal\n  trigger={<Button tone=\"critical\">Delete Item</Button>}\n  title=\"Confirm Deletion\"\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Delete\"\n  onCancel={() => console.log('Cancelled deletion')}\n  onConfirm={() => handleDelete()}\n>\n  <div style={{ padding: '16px' }}>\n    Are you sure you want to delete this item? This action cannot be undone.\n  </div>\n</Modal>\n```\n\n### Form Modal\n\n```jsx\nfunction FormModal() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  \n  const handleSubmit = () => {\n    // Form submission logic\n    console.log({ name, email });\n  };\n  \n  return (\n    <Modal\n      trigger={<Button>Add User</Button>}\n      title=\"Add New User\"\n      cancelLabel=\"Cancel\"\n      confirmLabel=\"Save\"\n      onConfirm={handleSubmit}\n    >\n      <div style={{ padding: '16px' }}>\n        <form>\n          <div style={{ marginBottom: '16px' }}>\n            <label htmlFor=\"name\">Name</label>\n            <input \n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              style={{ display: 'block', width: '100%', marginTop: '4px', padding: '8px' }}\n            />\n          </div>\n          <div style={{ marginBottom: '16px' }}>\n            <label htmlFor=\"email\">Email</label>\n            <input \n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              style={{ display: 'block', width: '100%', marginTop: '4px', padding: '8px' }}\n            />\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}\n```\n\n### Information Display\n\n```jsx\n<Modal\n  trigger={<Button>View Details</Button>}\n  title=\"User Details\"\n  showFooter={false}\n>\n  <div style={{ padding: '16px' }}>\n    <h3>John Doe</h3>\n    <div>\n      <strong>Email:</strong> john.doe@example.com\n    </div>\n    <div>\n      <strong>Role:</strong> Administrator\n    </div>\n    <div>\n      <strong>Joined:</strong> January 15, 2023\n    </div>\n    \n    <div style={{ marginTop: '24px', textAlign: 'right' }}>\n      <Button variant=\"secondary\" onClick={() => console.log('Close')}>Close</Button>\n    </div>\n  </div>\n</Modal>\n```\n\n## Accessibility\n\nThe Modal component follows accessibility best practices:\n\n- Built on Radix UI's Dialog primitive for robust accessibility\n- Properly manages focus when opened and closed\n- Traps focus within the modal\n- Supports keyboard navigation (Tab, Escape)\n- Uses proper ARIA roles and attributes\n- Correctly handles screen reader announcements\n- Supports closing with the Escape key\n- Background scroll is prevented when modal is open\n- Properly labeled close button\n\n## Implementation Details\n\n### CSS Variables\n\nThe Modal component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-color-overlay` | Background overlay color |\n| `--t-color-bg` | Modal background color |\n| `--t-color-border` | Border color for header and footer dividers |\n| `--t-color-text-primary` | Title and primary text color |\n| `--t-color-text-secondary` | Secondary text color |\n| `--t-color-bg-hover` | Hover state for close button |\n| `--t-border-radius-200` | Border radius |\n| `--t-shadow-400` | Shadow for the modal |\n| `--t-font-size-headline-sm` | Title font size |\n| `--t-font-weight-bold` | Title font weight |\n| `--t-line-height-normal` | Line height for text |\n| `--t-space-*` | Padding and spacing |\n| `--t-z-index-modal` | Z-index for the modal |\n| `--t-z-index-modal-overlay` | Z-index for the overlay |\n| `--t-modal-width` | Default modal width |\n\n### Architecture\n\nThe Modal component is built on Radix UI's Dialog component, which provides:\n\n1. Focus management\n2. Keyboard interactions\n3. Focus trapping\n4. Proper ARIA attributes\n5. Animation support\n\nThe Tagaddod implementation extends this with:\n\n1. Multiple footer styles\n2. Size variants (default and fullscreen)\n3. RTL support\n4. Customizable header and footer\n\n### Animations\n\nThe Modal includes smooth animations for:\n\n1. Overlay fade-in and fade-out\n2. Modal scale and fade transitions\n3. RTL-specific animations\n\nThese animations are disabled when the user prefers reduced motion.\n\n### Browser Support\n\nThe Modal component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Modal Component",
      "usage": [
        "import { Modal } from '@tagaddod/react';",
        "import { Modal, Button } from '@tagaddod/react';\n\n<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Title\"\n>\n  <div style={{ textAlign: 'center', padding: '16px' }}>\n    Modal content goes here\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Title\"\n  showTitle={true}\n  showFooter={true}\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Confirm\"\n  onCancel={() => console.log('Cancelled')}\n  onConfirm={() => console.log('Confirmed')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal content goes here\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Default Padding\"\n  // contentPadding=\"var(--t-space-500)\" (default)\n>\n  <div>\n    Content with default padding (--t-space-500)\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Custom Padding\"\n  contentPadding=\"var(--t-space-700)\"\n>\n  <div>\n    Content with larger padding (--t-space-700)\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"No Padding\"\n  contentPadding=\"0\"\n>\n  <div style={{ padding: '16px', backgroundColor: '#f0f0f0' }}>\n    Content with no default padding - you can apply your own\n  </div>\n</Modal>",
        "<Modal\n  width=\"small\"\n  trigger={<Button>Open Small Modal</Button>}\n  title=\"Small Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a small modal perfect for confirmations.\n  </div>\n</Modal>",
        "<Modal\n  width=\"medium\"\n  trigger={<Button>Open Medium Modal</Button>}\n  title=\"Medium Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a medium modal suitable for forms and detailed content.\n  </div>\n</Modal>",
        "<Modal\n  width=\"large\"\n  trigger={<Button>Open Large Modal</Button>}\n  title=\"Large Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This is a large modal perfect for complex content like forms or data tables.\n  </div>\n</Modal>",
        "<Modal\n  width=\"custom\"\n  customWidth=\"50rem\"\n  trigger={<Button>Open Custom Width Modal</Button>}\n  title=\"Custom Width Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This modal has a custom width of 50rem.\n  </div>\n</Modal>",
        "<Modal\n  width=\"custom\"\n  customWidth=\"70%\"\n  minWidth=\"20rem\"\n  maxWidth=\"60rem\"\n  trigger={<Button>Open Modal with Min/Max Width</Button>}\n  title=\"Responsive Modal\"\n>\n  <div style={{ padding: '16px' }}>\n    This modal has a responsive width of 70% with min/max constraints.\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  showTitle={false}\n  showFooter={true}\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Confirm\"\n>\n  <div style={{ padding: '16px' }}>\n    Modal without a title bar\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Modal Without Footer\"\n  showTitle={true}\n  showFooter={false}\n>\n  <div style={{ padding: '16px' }}>\n    Modal without action buttons in footer\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Cancel & Actions Footer\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onCancel={() => console.log('Cancelled')}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with cancel button and action buttons\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Swap & Actions Footer\"\n  footerVariant=\"swapAndActions\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with swap area and action buttons\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Actions Only Footer\"\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n  onPrimary={() => console.log('Primary action')}\n  onSecondary={() => console.log('Secondary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with only action buttons\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Single Button\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save\"\n  showPrimaryButton={true}\n  showSecondaryButton={false}\n  onCancel={() => console.log('Cancelled')}\n  onPrimary={() => console.log('Primary action')}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with single action button\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>Open Modal</Button>}\n  title=\"Custom Swap Content\"\n  footerVariant=\"swapAndActions\"\n  swapContent={<span style={{ color: 'blue', fontWeight: 'bold' }}>Custom Content</span>}\n  primaryLabel=\"Save\"\n  secondaryLabel=\"Draft\"\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  <div style={{ padding: '16px' }}>\n    Modal with custom swap area content\n  </div>\n</Modal>",
        "<Modal\n  trigger={<Button>فتح النافذة</Button>}\n  title=\"العنوان\"\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"إلغاء\"\n  primaryLabel=\"تأكيد\"\n  secondaryLabel=\"ثانوي\"\n>\n  <div style={{ padding: '16px', textAlign: 'right', direction: 'rtl' }}>\n    محتوى النافذة المنبثقة باللغة العربية. يمكنك تبديل الاتجاه من شريط الأدوات لرؤية التخطيط الصحيح.\n  </div>\n</Modal>",
        "// Method 1: Automatic detection from document\ndocument.dir = 'rtl';\n\n// Method 2: Explicit prop\n<Modal rtl={true} title=\"العنوان\">\n  {/* Content */}\n</Modal>\n\n// Method 3: Storybook toolbar (development)\n// Use the direction toggle in Storybook's toolbar",
        "<Modal\n  trigger={<Button tone=\"critical\">Delete Item</Button>}\n  title=\"Confirm Deletion\"\n  cancelLabel=\"Cancel\"\n  confirmLabel=\"Delete\"\n  onCancel={() => console.log('Cancelled deletion')}\n  onConfirm={() => handleDelete()}\n>\n  <div style={{ padding: '16px' }}>\n    Are you sure you want to delete this item? This action cannot be undone.\n  </div>\n</Modal>",
        "function FormModal() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  \n  const handleSubmit = () => {\n    // Form submission logic\n    console.log({ name, email });\n  };\n  \n  return (\n    <Modal\n      trigger={<Button>Add User</Button>}\n      title=\"Add New User\"\n      cancelLabel=\"Cancel\"\n      confirmLabel=\"Save\"\n      onConfirm={handleSubmit}\n    >\n      <div style={{ padding: '16px' }}>\n        <form>\n          <div style={{ marginBottom: '16px' }}>\n            <label htmlFor=\"name\">Name</label>\n            <input \n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              style={{ display: 'block', width: '100%', marginTop: '4px', padding: '8px' }}\n            />\n          </div>\n          <div style={{ marginBottom: '16px' }}>\n            <label htmlFor=\"email\">Email</label>\n            <input \n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              style={{ display: 'block', width: '100%', marginTop: '4px', padding: '8px' }}\n            />\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}",
        "<Modal\n  trigger={<Button>View Details</Button>}\n  title=\"User Details\"\n  showFooter={false}\n>\n  <div style={{ padding: '16px' }}>\n    <h3>John Doe</h3>\n    <div>\n      <strong>Email:</strong> john.doe@example.com\n    </div>\n    <div>\n      <strong>Role:</strong> Administrator\n    </div>\n    <div>\n      <strong>Joined:</strong> January 15, 2023\n    </div>\n    \n    <div style={{ marginTop: '24px', textAlign: 'right' }}>\n      <Button variant=\"secondary\" onClick={() => console.log('Close')}>Close</Button>\n    </div>\n  </div>\n</Modal>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Logo",
    "stories": [
      {
        "id": "Components/Logo--default",
        "name": "Default",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Logo--small",
        "name": "Small",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "Small",
        "description": ""
      },
      {
        "id": "Components/Logo--large",
        "name": "Large",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "Large",
        "description": ""
      },
      {
        "id": "Components/Logo--customsize",
        "name": "CustomSize",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "CustomSize",
        "description": ""
      },
      {
        "id": "Components/Logo--customwidthonly",
        "name": "CustomWidthOnly",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "CustomWidthOnly",
        "description": ""
      },
      {
        "id": "Components/Logo--customheightonly",
        "name": "CustomHeightOnly",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "CustomHeightOnly",
        "description": ""
      },
      {
        "id": "Components/Logo--clickable",
        "name": "Clickable",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "Clickable",
        "description": ""
      },
      {
        "id": "Components/Logo--white",
        "name": "White",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "White",
        "description": ""
      },
      {
        "id": "Components/Logo--allsizes",
        "name": "AllSizes",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "AllSizes",
        "description": ""
      },
      {
        "id": "Components/Logo--colorvariants",
        "name": "ColorVariants",
        "title": "Components/Logo",
        "importPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Logo",
        "storyName": "ColorVariants",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Logo/Logo.stories.tsx",
    "mdxContent": "import { Meta, Canvas, Story, Controls } from '@storybook/blocks';\nimport * as LogoStories from './Logo.stories';\n\n<Meta of={LogoStories} />\n\n# Logo\n\nThe Logo component displays the Tagaddod brand logo with various size and color options. It supports both static display and clickable functionality.\n\n## Features\n\n- **Multiple sizes**: Small, medium, large, and custom variants\n- **Custom dimensions**: Specify exact width and/or height with automatic aspect ratio preservation\n- **Color variants**: Primary, white, and inherit options\n- **Clickable**: Can be rendered as a button with onClick handler\n- **Accessibility**: Proper ARIA labels and keyboard navigation\n- **RTL Support**: Works correctly in right-to-left layouts\n- **Responsive**: Scales appropriately across different screen sizes\n- **Aspect ratio preservation**: Automatically maintains logo proportions when using custom sizes\n\n## Usage\n\n```tsx\nimport { Logo } from '@tagaddod-design/react';\n\n// Basic usage\n<Logo />\n\n// With predefined size and color\n<Logo size=\"large\" color=\"white\" />\n\n// Custom size with both dimensions\n<Logo size=\"custom\" width={200} height={50} />\n\n// Custom size with only width (height auto-calculated)\n<Logo size=\"custom\" width={300} />\n\n// Custom size with only height (width auto-calculated)\n<Logo size=\"custom\" height={60} />\n\n// Custom size with string units\n<Logo size=\"custom\" width=\"15rem\" height=\"3rem\" />\n\n// Clickable logo\n<Logo clickable onClick={() => console.log('Logo clicked!')} />\n```\n\n## Examples\n\n### Default Logo\n\n<Canvas of={LogoStories.Default} />\n\n### Size Variants\n\n<Canvas of={LogoStories.AllSizes} />\n\n### Custom Size Examples\n\n#### Custom Size with Both Dimensions\n\n<Canvas of={LogoStories.CustomSize} />\n\n#### Custom Width Only (Auto Height)\n\n<Canvas of={LogoStories.CustomWidthOnly} />\n\n#### Custom Height Only (Auto Width)\n\n<Canvas of={LogoStories.CustomHeightOnly} />\n\n### Color Variants\n\n<Canvas of={LogoStories.ColorVariants} />\n\n### Clickable Logo\n\n<Canvas of={LogoStories.Clickable} />\n\n## Custom Size Feature\n\nThe custom size feature allows you to specify exact dimensions for the logo while maintaining its aspect ratio:\n\n### Both Width and Height\nWhen both `width` and `height` are specified, the logo uses the exact dimensions provided.\n\n### Single Dimension\nWhen only `width` or `height` is specified, the component automatically calculates the other dimension to maintain the logo's original aspect ratio (161:20 = 8.05) using the AspectRatio component.\n\n### Supported Units\n- **Numbers**: Treated as pixels (e.g., `width={200}` = 200px)\n- **Strings**: Any valid CSS unit (e.g., `width=\"15rem\"`, `height=\"3em\"`, `width=\"50%\"`)\n\n## Props\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>size</code></td>\n      <td><code>'small' | 'medium' | 'large' | 'custom'</code></td>\n      <td><code>'medium'</code></td>\n      <td>Size variant for the logo. Use 'custom' to specify exact dimensions.</td>\n    </tr>\n    <tr>\n      <td><code>width</code></td>\n      <td><code>number | string</code></td>\n      <td><code>undefined</code></td>\n      <td>Custom width for the logo. Only used when <code>size</code> is 'custom'. Numbers are treated as pixels, strings can use any CSS unit.</td>\n    </tr>\n    <tr>\n      <td><code>height</code></td>\n      <td><code>number | string</code></td>\n      <td><code>undefined</code></td>\n      <td>Custom height for the logo. Only used when <code>size</code> is 'custom'. Numbers are treated as pixels, strings can use any CSS unit.</td>\n    </tr>\n    <tr>\n      <td><code>color</code></td>\n      <td><code>'primary' | 'white' | 'inherit'</code></td>\n      <td><code>'primary'</code></td>\n      <td>Color variant for the logo.</td>\n    </tr>\n    <tr>\n      <td><code>clickable</code></td>\n      <td><code>boolean</code></td>\n      <td><code>false</code></td>\n      <td>Whether the logo should be clickable (renders as button).</td>\n    </tr>\n    <tr>\n      <td><code>onClick</code></td>\n      <td><code>() => void</code></td>\n      <td><code>undefined</code></td>\n      <td>Callback when the logo is clicked. Only used when <code>clickable</code> is true.</td>\n    </tr>\n    <tr>\n      <td><code>aria-label</code></td>\n      <td><code>string</code></td>\n      <td><code>'Tagaddod'</code></td>\n      <td>Accessible label for the logo.</td>\n    </tr>\n    <tr>\n      <td><code>className</code></td>\n      <td><code>string</code></td>\n      <td><code>undefined</code></td>\n      <td>Custom class name for the logo container.</td>\n    </tr>\n  </tbody>\n</table>\n\n### Interactive Controls\n\n<Controls of={LogoStories.Default} />\n\n## AspectRatio Component Integration\n\nThe Logo component internally uses the **AspectRatio component** to maintain proper proportions when using custom sizes with only one dimension specified:\n\n- **When both `width` and `height` are provided**: The logo uses exact dimensions without AspectRatio\n- **When only `width` is provided**: AspectRatio automatically calculates the height based on the logo's original ratio (8.05:1)\n- **When only `height` is provided**: AspectRatio automatically calculates the width based on the logo's original ratio (8.05:1)\n- **When neither is provided with custom size**: The logo falls back to auto sizing\n\nThis ensures the logo always maintains its visual integrity and proportions, regardless of how you specify the custom dimensions.\n\n## Accessibility\n\n- Uses proper ARIA labels for screen readers\n- Supports keyboard navigation when clickable\n- Maintains sufficient color contrast in all variants\n- Compatible with high contrast mode\n\n## Design Guidelines\n\n- Use the primary color variant for most applications\n- Use the white variant on dark backgrounds\n- The medium size is recommended for most use cases\n- For custom sizes, maintain reasonable proportions for readability\n- Ensure adequate spacing around the logo for visual clarity\n\n## Technical Notes\n\n- The logo is implemented as an inline SVG for optimal scalability\n- Uses CSS custom properties (design tokens) for theming\n- Supports RTL layouts with appropriate line-height adjustments\n- Optimized for both light and dark themes\n- Custom sizes leverage the AspectRatio component for automatic proportion maintenance\n- Original logo aspect ratio: 161:20 (8.05:1)",
    "componentInfo": {
      "props": {},
      "description": "Logo",
      "usage": [
        "import { Logo } from '@tagaddod-design/react';\n\n// Basic usage\n<Logo />\n\n// With predefined size and color\n<Logo size=\"large\" color=\"white\" />\n\n// Custom size with both dimensions\n<Logo size=\"custom\" width={200} height={50} />\n\n// Custom size with only width (height auto-calculated)\n<Logo size=\"custom\" width={300} />\n\n// Custom size with only height (width auto-calculated)\n<Logo size=\"custom\" height={60} />\n\n// Custom size with string units\n<Logo size=\"custom\" width=\"15rem\" height=\"3rem\" />\n\n// Clickable logo\n<Logo clickable onClick={() => console.log('Logo clicked!')} />"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Pagination",
    "stories": [
      {
        "id": "Components/Pagination--controlled",
        "name": "Controlled",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "Controlled",
        "description": ""
      },
      {
        "id": "Components/Pagination--longpagination",
        "name": "LongPagination",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "LongPagination",
        "description": ""
      },
      {
        "id": "Components/Pagination--shortpagination",
        "name": "ShortPagination",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "ShortPagination",
        "description": ""
      },
      {
        "id": "Components/Pagination--withoutcount",
        "name": "WithoutCount",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "WithoutCount",
        "description": ""
      },
      {
        "id": "Components/Pagination--withoutrowsselector",
        "name": "WithoutRowsSelector",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "WithoutRowsSelector",
        "description": ""
      },
      {
        "id": "Components/Pagination--rtlmode",
        "name": "RTLMode",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "RTLMode",
        "description": ""
      },
      {
        "id": "Components/Pagination--smalltotal",
        "name": "SmallTotal",
        "title": "Components/Pagination",
        "importPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Pagination",
        "storyName": "SmallTotal",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Pagination/Pagination.stories.tsx",
    "mdxContent": "",
    "componentInfo": {
      "props": {},
      "description": "",
      "usage": [],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Listbox",
    "stories": [
      {
        "id": "Components/Listbox--basic",
        "name": "Basic",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "Basic",
        "description": ""
      },
      {
        "id": "Components/Listbox--withicons",
        "name": "WithIcons",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "WithIcons",
        "description": ""
      },
      {
        "id": "Components/Listbox--withhelptext",
        "name": "WithHelpText",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "WithHelpText",
        "description": ""
      },
      {
        "id": "Components/Listbox--multiselect",
        "name": "MultiSelect",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "MultiSelect",
        "description": ""
      },
      {
        "id": "Components/Listbox--withcustompadding",
        "name": "WithCustomPadding",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "WithCustomPadding",
        "description": ""
      },
      {
        "id": "Components/Listbox--arabicrtl",
        "name": "ArabicRTL",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "ArabicRTL",
        "description": ""
      },
      {
        "id": "Components/Listbox--arabicrtlwithprefixes",
        "name": "ArabicRTLWithPrefixes",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "ArabicRTLWithPrefixes",
        "description": ""
      },
      {
        "id": "Components/Listbox--withdisabledoptions",
        "name": "WithDisabledOptions",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "WithDisabledOptions",
        "description": ""
      },
      {
        "id": "Components/Listbox--withdividers",
        "name": "WithDividers",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "WithDividers",
        "description": ""
      },
      {
        "id": "Components/Listbox--separatorspacingcomparison",
        "name": "SeparatorSpacingComparison",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "SeparatorSpacingComparison",
        "description": ""
      },
      {
        "id": "Components/Listbox--inpopover",
        "name": "InPopover",
        "title": "Components/Listbox",
        "importPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Listbox",
        "storyName": "InPopover",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Listbox/Listbox.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as ListboxStories from './Listbox.stories';\nimport { Listbox } from './Listbox';\nimport { IconSquareCheck, IconSquare } from '@tabler/icons-react';\n\n<Meta of={ListboxStories} />\n\n# Listbox Component\n\nThe Listbox component displays a list of selectable options, supporting both single and multiple selection modes.\n\n## Overview\n\nListboxes are used to present a list of options for users to select from. They're commonly used in dropdowns, menus, and selection contexts. The Listbox component supports rich features like icons, help text, dividers, and multi-select behavior.\n\n## Import\n\n```jsx\nimport { Listbox } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Listbox} />\n\n## Basic Usage\n\n<Canvas of={ListboxStories.Basic} />\n\n```jsx\n<Listbox\n  options={[\n    { label: 'Option 1', value: 'option1' },\n    { label: 'Option 2', value: 'option2' },\n    { label: 'Option 3', value: 'option3' },\n    { label: 'Option 4', value: 'option4' },\n  ]}\n  selectedValue=\"option1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## With Icons\n\nYou can add icons before options (prefix) and additional content after options (suffix).\n\n<Canvas of={ListboxStories.WithIcons} />\n\n```jsx\nimport { IconCheck, IconTag, IconStar } from '@tabler/icons-react';\n\n<Listbox\n  options={[\n    { \n      label: 'Selected Option', \n      value: 'selected',\n      prefix: <IconCheck size={16} />\n    },\n    { \n      label: 'Tagged Items', \n      value: 'tagged',\n      prefix: <IconTag size={16} />,\n      suffix: <span style={{fontSize: '12px', color: 'var(--t-color-text-subtle)'}}>12</span>\n    },\n    { \n      label: 'Favorites', \n      value: 'favorites',\n      prefix: <IconStar size={16} />,\n      suffix: <span style={{fontSize: '12px', color: 'var(--t-color-text-subtle)'}}>5</span>\n    },\n  ]}\n  selectedValue=\"selected\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## With Help Text\n\nThe Listbox supports adding descriptive help text to options.\n\n<Canvas of={ListboxStories.WithHelpText} />\n\n```jsx\n<Listbox\n  options={[\n    { \n      label: 'Product Settings', \n      value: 'product',\n      helpText: 'Manage product inventory and variations'\n    },\n    { \n      label: 'User Accounts', \n      value: 'users',\n      helpText: 'Modify user permissions and access'\n    },\n    { \n      label: 'Payment Options', \n      value: 'payment',\n      helpText: 'Configure available payment methods'\n    },\n  ]}\n  selectedValue=\"product\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## Multiple Selection\n\nThe Listbox can be configured to allow multiple selections. This example uses the Checkbox component for a more accessible and consistent experience.\n\n<Canvas of={ListboxStories.MultiSelect} />\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox } from '@tagaddod/react';\n\nfunction MultiSelectExample() {\n  const [selected, setSelected] = useState(['option1', 'option3']);\n  \n  return (\n    <Listbox\n      options={[\n        { \n          label: 'Option 1', \n          value: 'option1',\n          prefix: (\n            <Checkbox\n              checked={selected.includes('option1')}\n              onCheckedChange={(checked) => {\n                if (checked) {\n                  setSelected([...selected, 'option1']);\n                } else {\n                  setSelected(selected.filter(v => v !== 'option1'));\n                }\n              }}\n              hideLabel={true}\n            />\n          )\n        },\n        { \n          label: 'Option 2', \n          value: 'option2',\n          prefix: (\n            <Checkbox\n              checked={selected.includes('option2')}\n              onCheckedChange={(checked) => {\n                if (checked) {\n                  setSelected([...selected, 'option2']);\n                } else {\n                  setSelected(selected.filter(v => v !== 'option2'));\n                }\n              }}\n              hideLabel={true}\n            />\n          )\n        },\n        // ... other options\n      ]}\n      selectedValue={selected}\n      multiple={true}\n      onMultiSelect={setSelected}\n    />\n  );\n}\n```\n\n## Disabled Options\n\nIndividual options can be disabled.\n\n<Canvas of={ListboxStories.WithDisabledOptions} />\n\n```jsx\n<Listbox\n  options={[\n    { label: 'Available Option', value: 'available' },\n    { label: 'Disabled Option', value: 'disabled', disabled: true },\n    { label: 'Another Available', value: 'another' },\n    { label: 'Currently Unavailable', value: 'unavailable', disabled: true },\n  ]}\n  selectedValue=\"available\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## With Dividers\n\nAdd dividers to visually separate groups of options using the Separator component. Use `spacing=\"none\"` to prevent excessive vertical spacing in list contexts.\n\n<Canvas of={ListboxStories.WithDividers} />\n\n```jsx\nimport { Separator } from '@tagaddod/react';\n\n<Listbox\n  options={[\n    { label: 'Recent', value: 'recent' },\n    { \n      label: '', \n      value: 'separator1', \n      disabled: true,\n      customContent: <Separator decorative={true} spacing=\"none\" />\n    },\n    { label: 'Yesterday', value: 'yesterday' },\n    { label: 'Last Week', value: 'lastWeek' },\n    { \n      label: '', \n      value: 'separator2', \n      disabled: true,\n      customContent: <Separator decorative={true} spacing=\"none\" />\n    },\n    { label: 'Last Month', value: 'lastMonth' },\n    { label: 'Older', value: 'older' },\n  ]}\n  selectedValue=\"yesterday\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n### Separator Spacing Options\n\nThe Separator component supports different spacing options when used in lists:\n\n<Canvas of={ListboxStories.SeparatorSpacingComparison} />\n\n```jsx\n// No spacing - perfect for tight lists\n<Separator decorative={true} spacing=\"none\" />\n\n// Compact spacing - reduced margins\n<Separator decorative={true} spacing=\"compact\" />\n\n// Custom spacing - specify pixels\n<Separator decorative={true} spacing={8} />\n\n// Default spacing - standard margins (same as not providing spacing prop)\n<Separator decorative={true} spacing=\"default\" />\n```\n\n## Custom Padding\n\nThe Listbox supports custom padding for list items, allowing you to control vertical and horizontal spacing.\n\n<Canvas of={ListboxStories.WithCustomPadding} />\n\n```jsx\n<Listbox\n  options={[\n    { label: 'Compact Item 1', value: '1' },\n    { label: 'Compact Item 2', value: '2' },\n    { label: 'Compact Item 3', value: '3' },\n  ]}\n  itemPaddingVertical={8}\n  itemPaddingHorizontal={12}\n  selectedValue=\"1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\nThe padding props accept pixel values:\n- `itemPaddingVertical`: Controls top and bottom padding\n- `itemPaddingHorizontal`: Controls left and right padding\n\nThis is useful for creating compact lists, spacious interfaces, or custom layouts that match your design requirements.\n\n## In Popover\n\nThe Listbox component can be used inside a Popover for dropdown menus.\n\n<Canvas of={ListboxStories.InPopover} />\n\n```jsx\nimport { useState } from 'react';\nimport { \n  Popover, \n  PopoverContent, \n  PopoverTrigger, \n  PopoverRoot \n} from '@tagaddod/react';\nimport { IconChevronDown } from '@tabler/icons-react';\n\nfunction DropdownExample() {\n  const [selectedOption, setSelectedOption] = useState('filter1');\n  const [open, setOpen] = useState(false);\n  \n  const options = [\n    { label: 'Filter by Date', value: 'filter1' },\n    { label: 'Filter by Status', value: 'filter2' },\n    { label: 'Filter by Category', value: 'filter3' },\n    { label: 'Filter by Priority', value: 'filter4' },\n    { label: 'Filter by Assignee', value: 'filter5' },\n  ];\n  \n  const selectedLabel = options.find(opt => opt.value === selectedOption)?.label || 'Select...';\n  \n  return (\n    <PopoverRoot open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <button className=\"dropdown-button\">\n          {selectedLabel}\n          <IconChevronDown size={16} />\n        </button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <Listbox\n          options={options}\n          selectedValue={selectedOption}\n          onSelect={(value) => {\n            setSelectedOption(value.toString());\n            setOpen(false);\n          }}\n          inPopover={true}\n        />\n      </PopoverContent>\n    </PopoverRoot>\n  );\n}\n```\n\n## Internationalization\n\nThe Listbox component properly handles Right-to-Left (RTL) languages by:\n\n1. Adjusting layout direction for RTL text flow\n2. Applying appropriate line height for Arabic text\n3. Correctly aligning text and content in RTL contexts\n\n<Canvas of={ListboxStories.ArabicRTL} />\n\n```jsx\n<div dir=\"rtl\">\n  <Listbox\n    options={[\n      { label: 'الخيار الأول', value: 'option1' },\n      { label: 'الخيار الثاني', value: 'option2' },\n      { label: 'الخيار الثالث', value: 'option3', helpText: 'نص توضيحي للمساعدة' },\n    ]}\n    selectedValue=\"option1\"\n    onSelect={(value) => console.log('Selected:', value)}\n  />\n</div>\n```\n\n## Custom Content\n\nYou can use the `customContent` prop to provide completely custom content for list options:\n\n```jsx\n<Listbox\n  options={[\n    { \n      label: \"Custom Option\", // Required but not shown\n      value: \"custom1\", \n      customContent: (\n        <div style={{ \n          display: 'flex', \n          flexDirection: 'column',\n          padding: '4px 0'\n        }}>\n          <span style={{ fontWeight: 'bold' }}>Custom Option</span>\n          <div style={{ \n            display: 'flex', \n            gap: '8px', \n            alignItems: 'center',\n            marginTop: '4px' \n          }}>\n            <span style={{ \n              background: '#e8f6ff', \n              padding: '2px 6px', \n              borderRadius: '4px',\n              fontSize: '12px'\n            }}>\n              Tag 1\n            </span>\n            <span style={{ \n              background: '#fff0e8', \n              padding: '2px 6px', \n              borderRadius: '4px',\n              fontSize: '12px'\n            }}>\n              Tag 2\n            </span>\n          </div>\n        </div>\n      )\n    },\n    // More options...\n  ]}\n  selectedValue=\"custom1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## Max Visible Options\n\nYou can limit the number of visible options with the `maxVisibleOptions` prop:\n\n```jsx\n<Listbox\n  options={[\n    { label: 'Option 1', value: 'option1' },\n    { label: 'Option 2', value: 'option2' },\n    { label: 'Option 3', value: 'option3' },\n    { label: 'Option 4', value: 'option4' },\n    { label: 'Option 5', value: 'option5' },\n    { label: 'Option 6', value: 'option6' },\n    { label: 'Option 7', value: 'option7' },\n  ]}\n  selectedValue=\"option1\"\n  maxVisibleOptions={3}\n  onSelect={(value) => console.log('Selected:', value)}\n/>\n```\n\n## Use Cases\n\n### Dropdown Menus\n\n```jsx\n<PopoverRoot>\n  <PopoverTrigger>\n    <Button>Open Menu</Button>\n  </PopoverTrigger>\n  <PopoverContent>\n    <Listbox\n      options={[\n        { label: 'Edit', value: 'edit', prefix: <IconEdit size={16} /> },\n        { label: 'Duplicate', value: 'duplicate', prefix: <IconCopy size={16} /> },\n        { label: 'Archive', value: 'archive', prefix: <IconArchive size={16} /> },\n        { label: 'Delete', value: 'delete', prefix: <IconTrash size={16} /> },\n      ]}\n      onSelect={handleMenuAction}\n      inPopover={true}\n    />\n  </PopoverContent>\n</PopoverRoot>\n```\n\n### Filter Selections\n\n```jsx\n<Listbox\n  options={[\n    { \n      label: 'All Tasks', \n      value: 'all',\n      helpText: 'Show tasks from all projects'\n    },\n    { \n      label: 'My Tasks', \n      value: 'my',\n      helpText: 'Only show tasks assigned to me'\n    },\n    { \n      label: 'Completed', \n      value: 'completed',\n      helpText: 'Show only completed tasks'\n    },\n  ]}\n  selectedValue={filterValue}\n  onSelect={setFilterValue}\n/>\n```\n\n### Checkbox Lists\n\n```jsx\n<Listbox\n  options={permissions.map(perm => ({\n    label: perm.name,\n    value: perm.id,\n    helpText: perm.description,\n    prefix: selectedPermissions.includes(perm.id) ? <IconSquareCheck size={16} /> : <IconSquare size={16} />\n  }))}\n  selectedValue={selectedPermissions}\n  multiple={true}\n  onMultiSelect={setSelectedPermissions}\n/>\n```\n\n## Accessibility\n\n- The component follows WAI-ARIA listbox pattern with proper roles and attributes\n- Uses `role=\"listbox\"` and `aria-multiselectable` for multiple selection\n- Each option has `role=\"option\"` and appropriate `aria-selected` state\n- Supports keyboard navigation (arrow keys, Home/End, Enter)\n- Provides accessible focus management\n- Maintains a logical tab order\n- Uses proper ARIA attributes for selected state\n\n## Implementation Details\n\n### CSS Variables\n\nThe Listbox component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-text-*` | Text colors |\n| `--t-color-border-*` | Border colors |\n| `--t-font-family-body` | Text font |\n| `--t-font-size-body-*` | Font sizes |\n| `--t-font-weight-*` | Font weights |\n| `--t-border-radius-200` | Border radius |\n| `--t-color-border-focus` | Focus outline color |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Architecture\n\nThe Listbox component consists of two main parts:\n\n1. **Listbox**: The container component that manages the list options, selection state, and keyboard navigation\n2. **ListboxOption**: The individual option component that renders each selectable item\n\nThis architecture provides:\n\n- Clean separation of concerns\n- Flexible option configuration\n- Proper event handling\n- Accessibility compliance\n\n### Browser Support\n\nThe Listbox component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Listbox Component",
      "usage": [
        "import { Listbox } from '@tagaddod/react';",
        "<Listbox\n  options={[\n    { label: 'Option 1', value: 'option1' },\n    { label: 'Option 2', value: 'option2' },\n    { label: 'Option 3', value: 'option3' },\n    { label: 'Option 4', value: 'option4' },\n  ]}\n  selectedValue=\"option1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "import { IconCheck, IconTag, IconStar } from '@tabler/icons-react';\n\n<Listbox\n  options={[\n    { \n      label: 'Selected Option', \n      value: 'selected',\n      prefix: <IconCheck size={16} />\n    },\n    { \n      label: 'Tagged Items', \n      value: 'tagged',\n      prefix: <IconTag size={16} />,\n      suffix: <span style={{fontSize: '12px', color: 'var(--t-color-text-subtle)'}}>12</span>\n    },\n    { \n      label: 'Favorites', \n      value: 'favorites',\n      prefix: <IconStar size={16} />,\n      suffix: <span style={{fontSize: '12px', color: 'var(--t-color-text-subtle)'}}>5</span>\n    },\n  ]}\n  selectedValue=\"selected\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "<Listbox\n  options={[\n    { \n      label: 'Product Settings', \n      value: 'product',\n      helpText: 'Manage product inventory and variations'\n    },\n    { \n      label: 'User Accounts', \n      value: 'users',\n      helpText: 'Modify user permissions and access'\n    },\n    { \n      label: 'Payment Options', \n      value: 'payment',\n      helpText: 'Configure available payment methods'\n    },\n  ]}\n  selectedValue=\"product\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "import { useState } from 'react';\nimport { Checkbox } from '@tagaddod/react';\n\nfunction MultiSelectExample() {\n  const [selected, setSelected] = useState(['option1', 'option3']);\n  \n  return (\n    <Listbox\n      options={[\n        { \n          label: 'Option 1', \n          value: 'option1',\n          prefix: (\n            <Checkbox\n              checked={selected.includes('option1')}\n              onCheckedChange={(checked) => {\n                if (checked) {\n                  setSelected([...selected, 'option1']);\n                } else {\n                  setSelected(selected.filter(v => v !== 'option1'));\n                }\n              }}\n              hideLabel={true}\n            />\n          )\n        },\n        { \n          label: 'Option 2', \n          value: 'option2',\n          prefix: (\n            <Checkbox\n              checked={selected.includes('option2')}\n              onCheckedChange={(checked) => {\n                if (checked) {\n                  setSelected([...selected, 'option2']);\n                } else {\n                  setSelected(selected.filter(v => v !== 'option2'));\n                }\n              }}\n              hideLabel={true}\n            />\n          )\n        },\n        // ... other options\n      ]}\n      selectedValue={selected}\n      multiple={true}\n      onMultiSelect={setSelected}\n    />\n  );\n}",
        "<Listbox\n  options={[\n    { label: 'Available Option', value: 'available' },\n    { label: 'Disabled Option', value: 'disabled', disabled: true },\n    { label: 'Another Available', value: 'another' },\n    { label: 'Currently Unavailable', value: 'unavailable', disabled: true },\n  ]}\n  selectedValue=\"available\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "import { Separator } from '@tagaddod/react';\n\n<Listbox\n  options={[\n    { label: 'Recent', value: 'recent' },\n    { \n      label: '', \n      value: 'separator1', \n      disabled: true,\n      customContent: <Separator decorative={true} spacing=\"none\" />\n    },\n    { label: 'Yesterday', value: 'yesterday' },\n    { label: 'Last Week', value: 'lastWeek' },\n    { \n      label: '', \n      value: 'separator2', \n      disabled: true,\n      customContent: <Separator decorative={true} spacing=\"none\" />\n    },\n    { label: 'Last Month', value: 'lastMonth' },\n    { label: 'Older', value: 'older' },\n  ]}\n  selectedValue=\"yesterday\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "// No spacing - perfect for tight lists\n<Separator decorative={true} spacing=\"none\" />\n\n// Compact spacing - reduced margins\n<Separator decorative={true} spacing=\"compact\" />\n\n// Custom spacing - specify pixels\n<Separator decorative={true} spacing={8} />\n\n// Default spacing - standard margins (same as not providing spacing prop)\n<Separator decorative={true} spacing=\"default\" />",
        "<Listbox\n  options={[\n    { label: 'Compact Item 1', value: '1' },\n    { label: 'Compact Item 2', value: '2' },\n    { label: 'Compact Item 3', value: '3' },\n  ]}\n  itemPaddingVertical={8}\n  itemPaddingHorizontal={12}\n  selectedValue=\"1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "import { useState } from 'react';\nimport { \n  Popover, \n  PopoverContent, \n  PopoverTrigger, \n  PopoverRoot \n} from '@tagaddod/react';\nimport { IconChevronDown } from '@tabler/icons-react';\n\nfunction DropdownExample() {\n  const [selectedOption, setSelectedOption] = useState('filter1');\n  const [open, setOpen] = useState(false);\n  \n  const options = [\n    { label: 'Filter by Date', value: 'filter1' },\n    { label: 'Filter by Status', value: 'filter2' },\n    { label: 'Filter by Category', value: 'filter3' },\n    { label: 'Filter by Priority', value: 'filter4' },\n    { label: 'Filter by Assignee', value: 'filter5' },\n  ];\n  \n  const selectedLabel = options.find(opt => opt.value === selectedOption)?.label || 'Select...';\n  \n  return (\n    <PopoverRoot open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <button className=\"dropdown-button\">\n          {selectedLabel}\n          <IconChevronDown size={16} />\n        </button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <Listbox\n          options={options}\n          selectedValue={selectedOption}\n          onSelect={(value) => {\n            setSelectedOption(value.toString());\n            setOpen(false);\n          }}\n          inPopover={true}\n        />\n      </PopoverContent>\n    </PopoverRoot>\n  );\n}",
        "<div dir=\"rtl\">\n  <Listbox\n    options={[\n      { label: 'الخيار الأول', value: 'option1' },\n      { label: 'الخيار الثاني', value: 'option2' },\n      { label: 'الخيار الثالث', value: 'option3', helpText: 'نص توضيحي للمساعدة' },\n    ]}\n    selectedValue=\"option1\"\n    onSelect={(value) => console.log('Selected:', value)}\n  />\n</div>",
        "<Listbox\n  options={[\n    { \n      label: \"Custom Option\", // Required but not shown\n      value: \"custom1\", \n      customContent: (\n        <div style={{ \n          display: 'flex', \n          flexDirection: 'column',\n          padding: '4px 0'\n        }}>\n          <span style={{ fontWeight: 'bold' }}>Custom Option</span>\n          <div style={{ \n            display: 'flex', \n            gap: '8px', \n            alignItems: 'center',\n            marginTop: '4px' \n          }}>\n            <span style={{ \n              background: '#e8f6ff', \n              padding: '2px 6px', \n              borderRadius: '4px',\n              fontSize: '12px'\n            }}>\n              Tag 1\n            </span>\n            <span style={{ \n              background: '#fff0e8', \n              padding: '2px 6px', \n              borderRadius: '4px',\n              fontSize: '12px'\n            }}>\n              Tag 2\n            </span>\n          </div>\n        </div>\n      )\n    },\n    // More options...\n  ]}\n  selectedValue=\"custom1\"\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "<Listbox\n  options={[\n    { label: 'Option 1', value: 'option1' },\n    { label: 'Option 2', value: 'option2' },\n    { label: 'Option 3', value: 'option3' },\n    { label: 'Option 4', value: 'option4' },\n    { label: 'Option 5', value: 'option5' },\n    { label: 'Option 6', value: 'option6' },\n    { label: 'Option 7', value: 'option7' },\n  ]}\n  selectedValue=\"option1\"\n  maxVisibleOptions={3}\n  onSelect={(value) => console.log('Selected:', value)}\n/>",
        "<PopoverRoot>\n  <PopoverTrigger>\n    <Button>Open Menu</Button>\n  </PopoverTrigger>\n  <PopoverContent>\n    <Listbox\n      options={[\n        { label: 'Edit', value: 'edit', prefix: <IconEdit size={16} /> },\n        { label: 'Duplicate', value: 'duplicate', prefix: <IconCopy size={16} /> },\n        { label: 'Archive', value: 'archive', prefix: <IconArchive size={16} /> },\n        { label: 'Delete', value: 'delete', prefix: <IconTrash size={16} /> },\n      ]}\n      onSelect={handleMenuAction}\n      inPopover={true}\n    />\n  </PopoverContent>\n</PopoverRoot>",
        "<Listbox\n  options={[\n    { \n      label: 'All Tasks', \n      value: 'all',\n      helpText: 'Show tasks from all projects'\n    },\n    { \n      label: 'My Tasks', \n      value: 'my',\n      helpText: 'Only show tasks assigned to me'\n    },\n    { \n      label: 'Completed', \n      value: 'completed',\n      helpText: 'Show only completed tasks'\n    },\n  ]}\n  selectedValue={filterValue}\n  onSelect={setFilterValue}\n/>",
        "<Listbox\n  options={permissions.map(perm => ({\n    label: perm.name,\n    value: perm.id,\n    helpText: perm.description,\n    prefix: selectedPermissions.includes(perm.id) ? <IconSquareCheck size={16} /> : <IconSquare size={16} />\n  }))}\n  selectedValue={selectedPermissions}\n  multiple={true}\n  onMultiSelect={setSelectedPermissions}\n/>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Drawer",
    "stories": [
      {
        "id": "Components/Drawer--default",
        "name": "Default",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Drawer--withbackbutton",
        "name": "WithBackButton",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "WithBackButton",
        "description": ""
      },
      {
        "id": "Components/Drawer--withfooter",
        "name": "WithFooter",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "WithFooter",
        "description": ""
      },
      {
        "id": "Components/Drawer--rtldrawer",
        "name": "RTLDrawer",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "RTLDrawer",
        "description": ""
      },
      {
        "id": "Components/Drawer--fullheightdrawer",
        "name": "FullHeightDrawer",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FullHeightDrawer",
        "description": ""
      },
      {
        "id": "Components/Drawer--footercancelandactions",
        "name": "FooterCancelAndActions",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FooterCancelAndActions",
        "description": ""
      },
      {
        "id": "Components/Drawer--footerswapandactions",
        "name": "FooterSwapAndActions",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FooterSwapAndActions",
        "description": ""
      },
      {
        "id": "Components/Drawer--footeractionsonly",
        "name": "FooterActionsOnly",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FooterActionsOnly",
        "description": ""
      },
      {
        "id": "Components/Drawer--footerprimaryonly",
        "name": "FooterPrimaryOnly",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FooterPrimaryOnly",
        "description": ""
      },
      {
        "id": "Components/Drawer--footersecondaryonly",
        "name": "FooterSecondaryOnly",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "FooterSecondaryOnly",
        "description": ""
      },
      {
        "id": "Components/Drawer--customwidthtester",
        "name": "CustomWidthTester",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "CustomWidthTester",
        "description": ""
      },
      {
        "id": "Components/Drawer--swappableheaderareas",
        "name": "SwappableHeaderAreas",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "SwappableHeaderAreas",
        "description": ""
      },
      {
        "id": "Components/Drawer--defaultwidth",
        "name": "DefaultWidth",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "DefaultWidth",
        "description": ""
      },
      {
        "id": "Components/Drawer--custompadding",
        "name": "CustomPadding",
        "title": "Components/Drawer",
        "importPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Drawer",
        "storyName": "CustomPadding",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Drawer/Drawer.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as DrawerStories from './Drawer.stories';\nimport { Drawer, useDrawerContext } from './Drawer';\n\n<Meta of={DrawerStories} />\n\n# Drawer Component\n\nThe Drawer component is a side panel that slides in from the edge of the screen, providing additional content or actions without navigating away from the current page. It features proper z-index management to ensure it appears above all other content, including complex table layouts.\n\n## Overview\n\nDrawers are used to display supplementary content, forms, or detailed information while keeping the main context visible. They can appear from the right or left side of the screen and come in different sizes. The component automatically handles z-index stacking issues and provides context for nested modal components.\n\n## Import\n\n```jsx\nimport { Drawer, useDrawerContext } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Drawer} />\n\n### Header Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `headerPrefix` | `React.ReactNode` | - | Content displayed in Group 1 after the title (e.g., badges, status indicators) |\n| `headerSuffix` | `React.ReactNode` | - | Content displayed in Group 2 before the close button (e.g., action buttons, menus) |\n| `showBackButton` | `boolean` | `false` | Show back button in Group 1 |\n| `showTitle` | `boolean` | `true` | Show title in Group 1 |\n| `showClose` | `boolean` | `true` | Show close button in Group 2 |\n| `onBackClick` | `() => void` | - | Back button callback |\n\n### Header Layout CSS Classes\n\nThe header uses these CSS classes for layout control:\n\n```css\n.header {\n  display: flex;\n  justify-content: space-between; /* Separates Group 1 and Group 2 */\n}\n\n.headerLeft {\n  display: flex;\n  gap: var(--t-space-200); /* 8px gaps in Group 1 */\n  flex: 1; /* Takes available space */\n}\n\n.headerRight {\n  display: flex;\n  gap: var(--t-space-200); /* 8px gaps in Group 2 */\n  flex-shrink: 0; /* Fixed size */\n}\n```\n\n## Z-Index Management\n\nThe Drawer component uses a sophisticated z-index hierarchy to ensure proper layering:\n\n- **Drawer Overlay**: `z-index: 140` - Above all content but below drawer content\n- **Drawer Content**: `z-index: 150` - Above overlay and all page content (including tables)\n- **Modals from Drawer**: `z-index: 200` - For modal components opened from within the drawer\n\nThis hierarchy ensures the drawer always appears above table content, sticky headers, and other high z-index elements.\n\n## Basic Usage\n\n<Canvas of={DrawerStories.Default} />\n\n```jsx\nimport { useState } from 'react';\nimport { Drawer, Button } from '@tagaddod/react';\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <>\n      <Button onClick={() => setOpen(true)}>\n        Open Drawer\n      </Button>\n      \n      <Drawer\n        open={open}\n        onOpenChange={setOpen}\n        title=\"Drawer Title\"\n        contentPadding=\"var(--t-space-500)\" // Default 20px padding\n      >\n        <div style={{ padding: '16px 0' }}>\n          <p>This is a default drawer content.</p>\n          <p>You can place any content here.</p>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n```\n\n## Width Configuration\n\nThe Drawer component supports flexible width configuration with both default and custom options:\n\n### Default Width (Recommended)\n\nThe default width provides an optimal balance of content space and screen real estate at `28.125rem` (450px) with a minimum width of `25rem` (400px).\n\n<Canvas of={DrawerStories.DefaultWidth} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Default Width Drawer\"\n  width=\"default\" // This is the default value\n>\n  {/* Content */}\n</Drawer>\n```\n\n### Custom Width\n\nFor specific use cases, you can set a custom width with optional minimum and maximum constraints:\n\n<Canvas of={DrawerStories.CustomWidthTester} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Custom Width Drawer\"\n  width=\"custom\"\n  customWidth=\"35rem\"\n  minWidth=\"25rem\"  // Always enforced (400px minimum)\n  maxWidth=\"50rem\"  // Optional maximum constraint\n>\n  {/* Content */}\n</Drawer>\n```\n\n#### Custom Width Examples\n\n```jsx\n// Fixed rem-based width\n<Drawer width=\"custom\" customWidth=\"30rem\" />\n\n// Fixed pixel width  \n<Drawer width=\"custom\" customWidth=\"500px\" />\n\n// Viewport-based width\n<Drawer width=\"custom\" customWidth=\"40vw\" />\n\n// Responsive width with clamp\n<Drawer \n  width=\"custom\" \n  customWidth=\"clamp(25rem, 40vw, 50rem)\" \n/>\n\n// Custom width with constraints\n<Drawer\n  width=\"custom\"\n  customWidth=\"35rem\"\n  minWidth=\"25rem\"   // 400px minimum (always enforced)\n  maxWidth=\"60rem\"   // 960px maximum\n/>\n```\n\n### Width Constraints\n\n- **Minimum Width**: Always `25rem` (400px) to ensure usability\n- **Default Width**: `28.125rem` (450px) - optimal for most use cases\n- **Custom Width**: Any valid CSS width value\n- **Maximum Width**: Optional constraint for responsive designs\n\n### Legacy Size Props\n\nThe `size` prop is still supported for backward compatibility but is separate from the width system:\n\n```jsx\n<Drawer\n  size=\"medium\"     // Controls internal layout/styling\n  width=\"custom\"    // Controls drawer width\n  customWidth=\"40rem\"\n>\n  {/* Content */}\n</Drawer>\n```\n\n## Positions\n\nThe Drawer can appear from either side of the screen:\n\n### Right (Default)\n\n<Canvas of={DrawerStories.Default} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Right Drawer\"\n  position=\"right\"\n>\n  {/* Content */}\n</Drawer>\n```\n\n### Left\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Left Drawer\"\n  position=\"left\"\n>\n  {/* Content */}\n</Drawer>\n```\n\n## Header Options\n\n### With Back Button\n\n<Canvas of={DrawerStories.WithBackButton} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Step 1 of 3\"\n  showBackButton={true}\n  onBackClick={handleBack}\n>\n  {/* Content */}\n</Drawer>\n```\n\n### With Header Components\n\nThe Drawer header is organized into two distinct groups for better layout control:\n\n```jsx\nimport { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Drawer with Header Components\"\n  headerPrefix={<Badge tone=\"info\">Status</Badge>}\n  headerSuffix={<Button variant=\"plain\" size=\"micro\">Action</Button>}\n>\n  {/* Content */}\n</Drawer>\n```\n\n#### Header Layout Structure\n\nThe header is divided into two groups with `justify-content: space-between`:\n\n```\n┌─────────────────────────────────────────────────────────┐\n│ [Back] Title [Prefix]     [space]     [Suffix] [Close] │\n│ ←──── Group 1 ────→                   ←─ Group 2 ─→    │\n└─────────────────────────────────────────────────────────┘\n```\n\n**Group 1 (Left)**: Back button, Title, Prefix\n- All items have `var(--t-space-200)` (8px) gaps between them\n- Takes available space with `flex: 1`\n- Title can expand or ellipsis within available space\n\n**Group 2 (Right)**: Suffix, Close button  \n- `var(--t-space-200)` (8px) gap between items\n- Fixed size with `flex-shrink: 0`\n- Always aligned to the right\n\n### Interactive Header Areas\n\n<Canvas of={DrawerStories.SwappableHeaderAreas} />\n\nThis interactive story demonstrates the header groups with various Badge and Button combinations.\n\n### Without Title\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  showTitle={false}\n>\n  {/* Content */}\n</Drawer>\n```\n\n### Without Close Button\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Without Close Button\"\n  showClose={false}\n>\n  {/* Content */}\n</Drawer>\n```\n\n## Footer\n\nThe Drawer component supports multiple footer variants to accommodate different use cases and workflows.\n\n### Footer Variants\n\n#### Cancel and Actions (Default)\n\nShows a cancel button on the left and action buttons on the right. This is the most common pattern for forms and dialogs.\n\n<Canvas of={DrawerStories.FooterCancelAndActions} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Cancel and Actions Footer\"\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save Changes\"\n  secondaryLabel=\"Save Draft\"\n  onCancel={() => setOpen(false)}\n  onPrimary={() => {\n    // Save action\n    setOpen(false);\n  }}\n  onSecondary={() => {\n    // Secondary action\n  }}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>\n```\n\n#### Swap and Actions\n\nShows custom content on the left (like status or metadata) and action buttons on the right.\n\n<Canvas of={DrawerStories.FooterSwapAndActions} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Swap and Actions Footer\"\n  showFooter={true}\n  footerVariant=\"swapAndActions\"\n  primaryLabel=\"Publish\"\n  secondaryLabel=\"Save Draft\"\n  swapContent={\n    <span style={{ color: 'var(--t-color-text-secondary)' }}>\n      Status: Draft\n    </span>\n  }\n  onPrimary={() => setOpen(false)}\n  onSecondary={() => {}}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>\n```\n\n#### Actions Only\n\nShows only action buttons aligned to the right. Perfect for workflows where canceling is done via the close button.\n\n<Canvas of={DrawerStories.FooterActionsOnly} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Actions Only Footer\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Confirm\"\n  secondaryLabel=\"Review\"\n  onPrimary={() => setOpen(false)}\n  onSecondary={() => {}}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>\n```\n\n### Single Button Footers\n\n#### Primary Button Only\n\n<Canvas of={DrawerStories.FooterPrimaryOnly} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Primary Button Only\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Understand\"\n  onPrimary={() => setOpen(false)}\n  showPrimaryButton={true}\n  showSecondaryButton={false}\n>\n  {/* Content */}\n</Drawer>\n```\n\n#### Secondary Button Only\n\n<Canvas of={DrawerStories.FooterSecondaryOnly} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Secondary Button Only\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  secondaryLabel=\"Maybe Later\"\n  onSecondary={() => setOpen(false)}\n  showPrimaryButton={false}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>\n```\n\n### Footer Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `footerVariant` | `'cancelAndActions' \\| 'swapAndActions' \\| 'actionsOnly'` | `'cancelAndActions'` | The footer layout variant |\n| `cancelLabel` | `string` | `'Cancel'` | Label for the cancel button |\n| `primaryLabel` | `string` | `'Label'` | Label for the primary button |\n| `secondaryLabel` | `string` | `'Label'` | Label for the secondary button |\n| `showPrimaryButton` | `boolean` | `true` | Whether to show the primary button |\n| `showSecondaryButton` | `boolean` | `true` | Whether to show the secondary button |\n| `swapContent` | `React.ReactNode` | - | Custom content for the swap area |\n| `onCancel` | `() => void` | - | Cancel button callback |\n| `onPrimary` | `() => void` | - | Primary button callback |\n| `onSecondary` | `() => void` | - | Secondary button callback |\n\n## Modal Components Within Drawer\n\nWhen you need to open modal components (like dialogs, popovers, or dropdowns) from within a drawer, use the `useDrawerContext` hook to ensure proper z-index layering:\n\n```jsx\nimport { useState } from 'react';\nimport { Drawer, useDrawerContext, Modal, Button } from '@tagaddod/react';\n\nfunction DrawerWithModal() {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  \n  return (\n    <>\n      <Button onClick={() => setDrawerOpen(true)}>\n        Open Drawer\n      </Button>\n      \n      <Drawer\n        open={drawerOpen}\n        onOpenChange={setDrawerOpen}\n        title=\"Drawer with Modal\"\n      >\n        <div style={{ padding: '16px 0' }}>\n          <p>This drawer contains a modal that will appear above it.</p>\n          \n          <Button onClick={() => setModalOpen(true)}>\n            Open Modal\n          </Button>\n          \n          <ModalFromDrawer \n            open={modalOpen} \n            onOpenChange={setModalOpen} \n          />\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nfunction ModalFromDrawer({ open, onOpenChange }) {\n  const { isInsideDrawer, drawerZIndex } = useDrawerContext();\n  \n  return (\n    <Modal\n      open={open}\n      onOpenChange={onOpenChange}\n      title=\"Modal from Drawer\"\n      // Use drawerZIndex to ensure modal appears above drawer\n      style={{ zIndex: isInsideDrawer ? drawerZIndex : undefined }}\n    >\n      <p>This modal appears above the drawer!</p>\n    </Modal>\n  );\n}\n```\n\n### useDrawerContext Hook\n\nThe `useDrawerContext` hook provides information about the drawer context:\n\n```jsx\nimport { useDrawerContext } from '@tagaddod/react';\n\nfunction ComponentInDrawer() {\n  const { isInsideDrawer, drawerZIndex } = useDrawerContext();\n  \n  if (isInsideDrawer) {\n    // Component is inside a drawer\n    // Use drawerZIndex for proper z-index layering\n  }\n  \n  return <div>Component content</div>;\n}\n```\n\n**Returns:**\n- `isInsideDrawer: boolean` - Whether the component is rendered inside a drawer\n- `drawerZIndex: number` - The z-index value to use for modals opened from the drawer (200)\n\n## Visual Customization\n\n### Custom Padding\n\n<Canvas of={DrawerStories.CustomPadding} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Custom Padding Drawer\"\n  contentPadding=\"var(--t-space-600)\" // 24px padding instead of default 20px\n>\n  {/* Content */}\n</Drawer>\n```\n\nThe default content padding is `var(--t-space-500)` (20px). You can customize it using design tokens:\n\n- `var(--t-space-300)` = 12px (0.75rem)\n- `var(--t-space-400)` = 16px (1rem)\n- `var(--t-space-500)` = 20px (1.25rem) - default\n- `var(--t-space-600)` = 24px (1.5rem)\n- `var(--t-space-700)` = 32px (2rem)\n\nOr use custom values like `\"2rem 1rem\"` for different vertical and horizontal padding.\n\n### Width Testing\n\nUse the interactive **Custom Width Tester** story to experiment with different width configurations:\n\n<Canvas of={DrawerStories.CustomWidthTester} />\n\nThis story provides:\n- Live input fields for testing custom width values\n- Real-time preview of width changes\n- Examples of different CSS units (rem, px, vw, clamp)\n- Validation of minimum width constraints\n\n\n### Full Height\n\n<Canvas of={DrawerStories.FullHeightDrawer} />\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Full Height Drawer\"\n  fullHeight={true}\n>\n  {/* Content */}\n</Drawer>\n```\n\n## Internationalization\n\nThe Drawer component properly handles Right-to-Left (RTL) languages automatically by:\n\n1. Switching the position (right becomes left and vice versa)\n2. Flipping the direction of the back button icon\n3. Applying appropriate line height for Arabic text\n4. Ensuring correct alignment of text and buttons\n\n<Canvas of={DrawerStories.RTLDrawer} />\n\n```jsx\n<div dir=\"rtl\">\n  <Drawer\n    open={open}\n    onOpenChange={setOpen}\n    title=\"عنوان الدرج\"\n    showBackButton={true}\n    showFooter={true}\n    primaryAction={{\n      label: 'حفظ',\n      onClick: () => setOpen(false),\n    }}\n    secondaryAction={{\n      label: 'إلغاء',\n      onClick: () => setOpen(false),\n    }}\n  >\n    <div style={{ textAlign: 'right' }}>\n      <p>هذا محتوى الدرج باللغة العربية.</p>\n    </div>\n  </Drawer>\n</div>\n```\n\n## Use Cases\n\n### Form Entry\n\n```jsx\nimport { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Add New User\"\n  headerPrefix={<Badge tone=\"info\">Draft</Badge>}\n  headerSuffix={<Button variant=\"plain\" size=\"micro\">Save Draft</Button>}\n  contentPadding=\"var(--t-space-600)\" // Larger padding for forms\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save User\"\n  onCancel={() => setOpen(false)}\n  onPrimary={handleSave}\n>\n  <form onSubmit={handleSubmit}>\n    {/* Form fields */}\n  </form>\n</Drawer>\n```\n\n### Content with Different Padding Needs\n\n```jsx\n// Compact content\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Quick Actions\"\n  contentPadding=\"var(--t-space-400)\" // Smaller 16px padding\n>\n  {/* Compact action buttons */}\n</Drawer>\n\n// Detailed content\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Article Editor\"\n  contentPadding=\"var(--t-space-700)\" // Larger 32px padding\n>\n  {/* Rich text editor */}\n</Drawer>\n\n// Custom asymmetric padding\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Layout Preview\"\n  contentPadding=\"3rem 1rem\" // 48px vertical, 16px horizontal\n>\n  {/* Design preview content */}\n</Drawer>\n```\n\n### Object Details with Table Data\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title={`Order #${order.id}`}\n  showFooter={true}\n  primaryAction={{\n    label: 'Process Order',\n    onClick: handleProcessOrder,\n  }}\n  secondaryAction={{\n    label: 'Close',\n    onClick: () => setOpen(false),\n  }}\n>\n  <div>\n    {/* Order details */}\n    <Table \n      data={orderItems} \n      columns={columns}\n      // Table content will appear below the drawer\n    />\n  </div>\n</Drawer>\n```\n\n### Multi-step Flows\n\n```jsx\nimport { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title={`Step ${currentStep} of ${totalSteps}`}\n  headerPrefix={<Badge tone=\"warning\">In Progress</Badge>}\n  showBackButton={currentStep > 1}\n  onBackClick={() => setCurrentStep(currentStep - 1)}\n  step={currentStep} // Controls back button visibility\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel={currentStep === totalSteps ? 'Finish' : 'Next'}\n  onCancel={() => setOpen(false)}\n  onPrimary={handleNextStep}\n>\n  <div>\n    {/* Step content */}\n  </div>\n</Drawer>\n```\n\n### Settings Panel\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Settings\"\n  width=\"default\"  // Use default 450px width\n  position=\"right\"\n>\n  <div>\n    {/* Settings options */}\n  </div>\n</Drawer>\n```\n\n### Wide Content Drawer\n\n```jsx\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Data Visualization\"\n  width=\"custom\"\n  customWidth=\"60rem\"    // 960px for wide content\n  maxWidth=\"80vw\"        // Responsive maximum\n>\n  <div>\n    {/* Charts, graphs, or wide data tables */}\n  </div>\n</Drawer>\n```\n\n## Accessibility\n\nThe Drawer component follows accessibility best practices:\n\n- Uses a modal dialog pattern for proper focus management\n- Traps focus within the drawer when open\n- Closes on ESC key press\n- Uses proper headings for drawer title\n- Provides sufficient color contrast\n- Handles keyboard navigation properly\n- Maintains a logical tab order\n- Properly labeled buttons (back, close)\n- Uses `aria-label` for buttons without visible text\n- Prevents background scrolling when drawer is open\n\n## Implementation Details\n\n### Z-Index Architecture\n\nThe Drawer component implements a sophisticated z-index management system:\n\n```css\n/* Z-Index Hierarchy */\n:root {\n  --t-z-drawer-overlay: calc(var(--t-z-modal) + 40);  /* 140 */\n  --t-z-drawer-content: calc(var(--t-z-modal) + 50);  /* 150 */\n  --t-z-drawer-modal: calc(var(--t-z-modal) + 100);   /* 200 */\n}\n```\n\nThis ensures the drawer always appears above:\n- Normal content (`z-index: 0`)\n- Dropdowns and selects (`z-index: 10`)\n- Standard modals (`z-index: 100`)\n- Table sticky headers and content (`z-index: 101`)\n\n### CSS Variables\n\nThe Drawer component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-*` | Padding and spacing |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-fill-*` | Button and background colors |\n| `--t-color-border-*` | Border colors |\n| `--t-color-text-*` | Text colors |\n| `--t-color-icon-*` | Icon colors |\n| `--t-font-size-*` | Font sizes |\n| `--t-font-weight-*` | Font weights |\n| `--t-border-radius-*` | Border radius values |\n| `--t-shadow-200` | Shadow for the drawer |\n| `--t-z-modal` | Base z-index for modal components |\n| `--t-z-drawer-*` | Custom z-index hierarchy for drawers |\n| `--t-duration-base` | Animation duration |\n| `--t-easing-in-out` | Animation timing function |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Architecture\n\nThe component is built on Vaul's Drawer component which provides:\n\n1. Animation and transitions for smooth entrance/exit\n2. Focus management for accessibility\n3. Supporting primitives for overlay and content\n\nThe Tagaddod implementation extends this with:\n\n1. Design system integration with tokens\n2. Multiple sizes and positions\n3. Header and footer configurations\n4. RTL language support\n5. Responsive behavior for mobile devices\n6. **Z-index management for complex layouts**\n7. **Context provider for nested components**\n\n### Browser Support\n\nThe Drawer component is compatible with all modern browsers and includes RTL language support.\n\n### Mobile Behavior\n\nOn smaller screens (below 640px):\n- The drawer takes the full width of the screen\n- It slides up from the bottom instead of from the side\n- It has a maximum height of 80% of the viewport\n- It uses rounded corners at the top\n\n## Troubleshooting\n\n### Drawer Appears Behind Other Content\n\nIf the drawer appears behind other content (like tables or sticky elements):\n\n1. **Check z-index conflicts**: The drawer uses `z-index: 150` by default\n2. **Verify CSS custom properties**: Ensure `--t-z-modal` is properly defined\n3. **Use utility classes**: Apply `.drawer-modal` class to elements that should appear above the drawer\n\n### Modal Components Not Appearing Above Drawer\n\nWhen opening modals from within a drawer:\n\n1. **Use useDrawerContext**: Apply the hook to get the correct z-index\n2. **Apply drawerZIndex**: Use the returned `drawerZIndex` value for your modal\n3. **Check CSS specificity**: Ensure your modal's z-index style has sufficient specificity\n\n### Performance Issues\n\nFor large content within drawers:\n\n1. **Use lazy loading**: Load drawer content only when needed\n2. **Optimize animations**: Use `prefers-reduced-motion` media query\n3. **Limit DOM depth**: Keep drawer content structure simple\n\n## Breaking Changes from Previous Versions\n\n### Z-Index Management\n- **Before**: Used undefined `--t-z-index-overlay` token\n- **After**: Uses proper token hierarchy with `--t-z-modal` base\n- **Migration**: No code changes needed - automatically resolved\n\n### Context Provider\n- **Before**: No context provided\n- **After**: Provides `DrawerContext` for nested components\n- **Migration**: Optional - use `useDrawerContext` for enhanced modal handling\n\n## Best Practices\n\n1. **Use appropriate sizes**: Choose drawer size based on content complexity\n2. **Handle modal z-index**: Use `useDrawerContext` when opening modals from drawers\n3. **Provide clear actions**: Use footer buttons for primary/secondary actions\n4. **Support RTL**: Test drawer behavior in both LTR and RTL languages\n5. **Consider mobile**: Design drawer content for smaller screens\n6. **Accessibility first**: Ensure keyboard navigation and screen reader compatibility\n",
    "componentInfo": {
      "props": {},
      "description": "Drawer Component",
      "usage": [
        "import { Drawer, useDrawerContext } from '@tagaddod/react';",
        "import { useState } from 'react';\nimport { Drawer, Button } from '@tagaddod/react';\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <>\n      <Button onClick={() => setOpen(true)}>\n        Open Drawer\n      </Button>\n      \n      <Drawer\n        open={open}\n        onOpenChange={setOpen}\n        title=\"Drawer Title\"\n        contentPadding=\"var(--t-space-500)\" // Default 20px padding\n      >\n        <div style={{ padding: '16px 0' }}>\n          <p>This is a default drawer content.</p>\n          <p>You can place any content here.</p>\n        </div>\n      </Drawer>\n    </>\n  );\n}",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Default Width Drawer\"\n  width=\"default\" // This is the default value\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Custom Width Drawer\"\n  width=\"custom\"\n  customWidth=\"35rem\"\n  minWidth=\"25rem\"  // Always enforced (400px minimum)\n  maxWidth=\"50rem\"  // Optional maximum constraint\n>\n  {/* Content */}\n</Drawer>",
        "// Fixed rem-based width\n<Drawer width=\"custom\" customWidth=\"30rem\" />\n\n// Fixed pixel width  \n<Drawer width=\"custom\" customWidth=\"500px\" />\n\n// Viewport-based width\n<Drawer width=\"custom\" customWidth=\"40vw\" />\n\n// Responsive width with clamp\n<Drawer \n  width=\"custom\" \n  customWidth=\"clamp(25rem, 40vw, 50rem)\" \n/>\n\n// Custom width with constraints\n<Drawer\n  width=\"custom\"\n  customWidth=\"35rem\"\n  minWidth=\"25rem\"   // 400px minimum (always enforced)\n  maxWidth=\"60rem\"   // 960px maximum\n/>",
        "<Drawer\n  size=\"medium\"     // Controls internal layout/styling\n  width=\"custom\"    // Controls drawer width\n  customWidth=\"40rem\"\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Right Drawer\"\n  position=\"right\"\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Left Drawer\"\n  position=\"left\"\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Step 1 of 3\"\n  showBackButton={true}\n  onBackClick={handleBack}\n>\n  {/* Content */}\n</Drawer>",
        "import { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Drawer with Header Components\"\n  headerPrefix={<Badge tone=\"info\">Status</Badge>}\n  headerSuffix={<Button variant=\"plain\" size=\"micro\">Action</Button>}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  showTitle={false}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Without Close Button\"\n  showClose={false}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Cancel and Actions Footer\"\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save Changes\"\n  secondaryLabel=\"Save Draft\"\n  onCancel={() => setOpen(false)}\n  onPrimary={() => {\n    // Save action\n    setOpen(false);\n  }}\n  onSecondary={() => {\n    // Secondary action\n  }}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Swap and Actions Footer\"\n  showFooter={true}\n  footerVariant=\"swapAndActions\"\n  primaryLabel=\"Publish\"\n  secondaryLabel=\"Save Draft\"\n  swapContent={\n    <span style={{ color: 'var(--t-color-text-secondary)' }}>\n      Status: Draft\n    </span>\n  }\n  onPrimary={() => setOpen(false)}\n  onSecondary={() => {}}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Actions Only Footer\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Confirm\"\n  secondaryLabel=\"Review\"\n  onPrimary={() => setOpen(false)}\n  onSecondary={() => {}}\n  showPrimaryButton={true}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Primary Button Only\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  primaryLabel=\"Understand\"\n  onPrimary={() => setOpen(false)}\n  showPrimaryButton={true}\n  showSecondaryButton={false}\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Secondary Button Only\"\n  showFooter={true}\n  footerVariant=\"actionsOnly\"\n  secondaryLabel=\"Maybe Later\"\n  onSecondary={() => setOpen(false)}\n  showPrimaryButton={false}\n  showSecondaryButton={true}\n>\n  {/* Content */}\n</Drawer>",
        "import { useState } from 'react';\nimport { Drawer, useDrawerContext, Modal, Button } from '@tagaddod/react';\n\nfunction DrawerWithModal() {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  \n  return (\n    <>\n      <Button onClick={() => setDrawerOpen(true)}>\n        Open Drawer\n      </Button>\n      \n      <Drawer\n        open={drawerOpen}\n        onOpenChange={setDrawerOpen}\n        title=\"Drawer with Modal\"\n      >\n        <div style={{ padding: '16px 0' }}>\n          <p>This drawer contains a modal that will appear above it.</p>\n          \n          <Button onClick={() => setModalOpen(true)}>\n            Open Modal\n          </Button>\n          \n          <ModalFromDrawer \n            open={modalOpen} \n            onOpenChange={setModalOpen} \n          />\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nfunction ModalFromDrawer({ open, onOpenChange }) {\n  const { isInsideDrawer, drawerZIndex } = useDrawerContext();\n  \n  return (\n    <Modal\n      open={open}\n      onOpenChange={onOpenChange}\n      title=\"Modal from Drawer\"\n      // Use drawerZIndex to ensure modal appears above drawer\n      style={{ zIndex: isInsideDrawer ? drawerZIndex : undefined }}\n    >\n      <p>This modal appears above the drawer!</p>\n    </Modal>\n  );\n}",
        "import { useDrawerContext } from '@tagaddod/react';\n\nfunction ComponentInDrawer() {\n  const { isInsideDrawer, drawerZIndex } = useDrawerContext();\n  \n  if (isInsideDrawer) {\n    // Component is inside a drawer\n    // Use drawerZIndex for proper z-index layering\n  }\n  \n  return <div>Component content</div>;\n}",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Custom Padding Drawer\"\n  contentPadding=\"var(--t-space-600)\" // 24px padding instead of default 20px\n>\n  {/* Content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Full Height Drawer\"\n  fullHeight={true}\n>\n  {/* Content */}\n</Drawer>",
        "<div dir=\"rtl\">\n  <Drawer\n    open={open}\n    onOpenChange={setOpen}\n    title=\"عنوان الدرج\"\n    showBackButton={true}\n    showFooter={true}\n    primaryAction={{\n      label: 'حفظ',\n      onClick: () => setOpen(false),\n    }}\n    secondaryAction={{\n      label: 'إلغاء',\n      onClick: () => setOpen(false),\n    }}\n  >\n    <div style={{ textAlign: 'right' }}>\n      <p>هذا محتوى الدرج باللغة العربية.</p>\n    </div>\n  </Drawer>\n</div>",
        "import { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Add New User\"\n  headerPrefix={<Badge tone=\"info\">Draft</Badge>}\n  headerSuffix={<Button variant=\"plain\" size=\"micro\">Save Draft</Button>}\n  contentPadding=\"var(--t-space-600)\" // Larger padding for forms\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel=\"Save User\"\n  onCancel={() => setOpen(false)}\n  onPrimary={handleSave}\n>\n  <form onSubmit={handleSubmit}>\n    {/* Form fields */}\n  </form>\n</Drawer>",
        "// Compact content\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Quick Actions\"\n  contentPadding=\"var(--t-space-400)\" // Smaller 16px padding\n>\n  {/* Compact action buttons */}\n</Drawer>\n\n// Detailed content\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Article Editor\"\n  contentPadding=\"var(--t-space-700)\" // Larger 32px padding\n>\n  {/* Rich text editor */}\n</Drawer>\n\n// Custom asymmetric padding\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Layout Preview\"\n  contentPadding=\"3rem 1rem\" // 48px vertical, 16px horizontal\n>\n  {/* Design preview content */}\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title={`Order #${order.id}`}\n  showFooter={true}\n  primaryAction={{\n    label: 'Process Order',\n    onClick: handleProcessOrder,\n  }}\n  secondaryAction={{\n    label: 'Close',\n    onClick: () => setOpen(false),\n  }}\n>\n  <div>\n    {/* Order details */}\n    <Table \n      data={orderItems} \n      columns={columns}\n      // Table content will appear below the drawer\n    />\n  </div>\n</Drawer>",
        "import { Badge } from '@tagaddod-design/react';\n\n<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title={`Step ${currentStep} of ${totalSteps}`}\n  headerPrefix={<Badge tone=\"warning\">In Progress</Badge>}\n  showBackButton={currentStep > 1}\n  onBackClick={() => setCurrentStep(currentStep - 1)}\n  step={currentStep} // Controls back button visibility\n  showFooter={true}\n  footerVariant=\"cancelAndActions\"\n  cancelLabel=\"Cancel\"\n  primaryLabel={currentStep === totalSteps ? 'Finish' : 'Next'}\n  onCancel={() => setOpen(false)}\n  onPrimary={handleNextStep}\n>\n  <div>\n    {/* Step content */}\n  </div>\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Settings\"\n  width=\"default\"  // Use default 450px width\n  position=\"right\"\n>\n  <div>\n    {/* Settings options */}\n  </div>\n</Drawer>",
        "<Drawer\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Data Visualization\"\n  width=\"custom\"\n  customWidth=\"60rem\"    // 960px for wide content\n  maxWidth=\"80vw\"        // Responsive maximum\n>\n  <div>\n    {/* Charts, graphs, or wide data tables */}\n  </div>\n</Drawer>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Checkbox",
    "stories": [
      {
        "id": "Components/Checkbox--default",
        "name": "Default",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Checkbox--checked",
        "name": "Checked",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "Checked",
        "description": ""
      },
      {
        "id": "Components/Checkbox--indeterminate",
        "name": "Indeterminate",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "Indeterminate",
        "description": ""
      },
      {
        "id": "Components/Checkbox--withhelptext",
        "name": "WithHelpText",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "WithHelpText",
        "description": ""
      },
      {
        "id": "Components/Checkbox--witherror",
        "name": "WithError",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "WithError",
        "description": ""
      },
      {
        "id": "Components/Checkbox--disabled",
        "name": "Disabled",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/Checkbox--disabledchecked",
        "name": "DisabledChecked",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "DisabledChecked",
        "description": ""
      },
      {
        "id": "Components/Checkbox--withoutlabel",
        "name": "WithoutLabel",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "WithoutLabel",
        "description": ""
      },
      {
        "id": "Components/Checkbox--hiddenlabel",
        "name": "HiddenLabel",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "HiddenLabel",
        "description": ""
      },
      {
        "id": "Components/Checkbox--required",
        "name": "Required",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "Required",
        "description": ""
      },
      {
        "id": "Components/Checkbox--rtl",
        "name": "RTL",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "RTL",
        "description": ""
      },
      {
        "id": "Components/Checkbox--rtlerror",
        "name": "RTLError",
        "title": "Components/Checkbox",
        "importPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Checkbox",
        "storyName": "RTLError",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Checkbox/Checkbox.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as CheckboxStories from './Checkbox.stories';\nimport { Checkbox } from './Checkbox';\n\n<Meta of={CheckboxStories} />\n\n# Checkbox Component\n\nThe Checkbox component allows users to select one or multiple items from a set or toggle a single option on or off.\n\n## Overview\n\nCheckboxes are form controls that let users make binary choices (checked or unchecked) and can also represent an indeterminate state. They're commonly used in forms, settings, and lists where multiple selections are allowed.\n\n## Import\n\n```jsx\nimport { Checkbox } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Checkbox} />\n\n## Basic Usage\n\n<Canvas of={CheckboxStories.Default} />\n\n```jsx\n<Checkbox label=\"Label\" />\n```\n\n## States\n\n### Checked\n\n<Canvas of={CheckboxStories.Checked} />\n\n```jsx\n<Checkbox label=\"Label\" checked={true} />\n```\n\n### Indeterminate\n\nThe indeterminate state is useful for representing partially checked states, often used in hierarchical selections.\n\n<Canvas of={CheckboxStories.Indeterminate} />\n\n```jsx\n<Checkbox label=\"Label\" checked=\"indeterminate\" />\n```\n\n### Disabled\n\n<Canvas of={CheckboxStories.Disabled} />\n\n```jsx\n<Checkbox label=\"Label\" disabled={true} />\n```\n\n### Disabled and Checked\n\n<Canvas of={CheckboxStories.DisabledChecked} />\n\n```jsx\n<Checkbox \n  label=\"Label\" \n  disabled={true} \n  checked={true} \n/>\n```\n\n## Validation and Information\n\n### With Help Text\n\nAdd supplementary information below the checkbox with the `helpText` prop.\n\n<Canvas of={CheckboxStories.WithHelpText} />\n\n```jsx\n<Checkbox \n  label=\"Label\" \n  helpText=\"Help text\" \n/>\n```\n\n### With Error\n\nDisplay error messages when validation fails.\n\n<Canvas of={CheckboxStories.WithError} />\n\n```jsx\n<Checkbox \n  label=\"Label\" \n  error=\"Error message\" \n/>\n```\n\n### Required\n\nRequired checkboxes display a red asterisk (*) next to the label.\n\n<Canvas of={CheckboxStories.Required} />\n\n```jsx\n<Checkbox \n  label=\"Label\" \n  required={true} \n/>\n```\n\n## Label Variations\n\n### Default Label\n\nLabels describe the purpose of the checkbox.\n\n<Canvas of={CheckboxStories.Default} />\n\n### No Label\n\nCheckboxes can be displayed without a label.\n\n<Canvas of={CheckboxStories.WithoutLabel} />\n\n```jsx\n<Checkbox />\n```\n\n### Hidden Label\n\nFor visual layout purposes, you may want to hide the label visually while keeping it accessible to screen readers.\n\n<Canvas of={CheckboxStories.HiddenLabel} />\n\n```jsx\n<Checkbox \n  label=\"Hidden Label\" \n  hideLabel={true} \n/>\n```\n\n## Internationalization\n\nThe Checkbox component properly handles Right-to-Left (RTL) languages automatically by:\n\n1. Adjusting the alignment and spacing for RTL text flow\n2. Applying appropriate line height for Arabic text\n3. Correctly positioning the help text and error messages\n\n<Canvas of={CheckboxStories.RTL} />\n\n```jsx\n<div dir=\"rtl\">\n  <Checkbox \n    label=\"تسمية\" \n    helpText=\"نص المساعدة\" \n  />\n</div>\n```\n\n### RTL with Error\n\n<Canvas of={CheckboxStories.RTLError} />\n\n```jsx\n<div dir=\"rtl\">\n  <Checkbox \n    label=\"تسمية\" \n    error=\"رسالة خطأ\" \n  />\n</div>\n```\n\n## Controlled Usage\n\nYou can control the checkbox state and handle changes:\n\n```jsx\nimport { useState } from 'react';\n\nfunction MyForm() {\n  const [isChecked, setIsChecked] = useState(false);\n  \n  return (\n    <Checkbox \n      label=\"I agree to the terms\" \n      checked={isChecked}\n      onCheckedChange={setIsChecked}\n    />\n  );\n}\n```\n\n## Form Integration\n\nCheckbox is built on Radix UI's Checkbox component, making it compatible with forms:\n\n```jsx\n<form onSubmit={handleSubmit}>\n  <Checkbox \n    name=\"terms\" \n    required={true} \n    label=\"I agree to the terms and conditions\"\n  />\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n## Accessibility\n\n- Each checkbox has a unique ID that connects it to its label\n- Required checkboxes use both the `required` attribute and visual indication\n- Error states are clearly communicated visually and to assistive technologies\n- Focus states are clearly visible for keyboard navigation\n- Supports keyboard navigation (space to toggle)\n- The `hideLabel` prop maintains accessibility even when labels are visually hidden\n- Help text and error messages are properly associated with the checkbox\n\n## Common Use Cases\n\n### Terms Acceptance\n\n```jsx\n<Checkbox \n  label=\"I accept the Terms of Service and Privacy Policy\" \n  required={true} \n/>\n```\n\n### Preference Toggles\n\n```jsx\n<div>\n  <Checkbox label=\"Email notifications\" />\n  <Checkbox label=\"SMS notifications\" />\n  <Checkbox label=\"Push notifications\" />\n</div>\n```\n\n### Multi-select Lists\n\n```jsx\n<div>\n  <Checkbox label=\"Apple\" />\n  <Checkbox label=\"Orange\" />\n  <Checkbox label=\"Banana\" />\n  <Checkbox label=\"Strawberry\" />\n</div>\n```\n\n### Tristate for Hierarchical Selection\n\n```jsx\nconst [parentChecked, setParentChecked] = useState('indeterminate');\nconst [child1Checked, setChild1Checked] = useState(true);\nconst [child2Checked, setChild2Checked] = useState(false);\n\n// Update parent state based on children\nuseEffect(() => {\n  if (child1Checked && child2Checked) {\n    setParentChecked(true);\n  } else if (!child1Checked && !child2Checked) {\n    setParentChecked(false);\n  } else {\n    setParentChecked('indeterminate');\n  }\n}, [child1Checked, child2Checked]);\n\n// Update children based on parent\nconst handleParentChange = (newState) => {\n  setParentChecked(newState);\n  if (newState !== 'indeterminate') {\n    setChild1Checked(newState);\n    setChild2Checked(newState);\n  }\n};\n\nreturn (\n  <div>\n    <Checkbox \n      label=\"Select All\" \n      checked={parentChecked}\n      onCheckedChange={handleParentChange}\n    />\n    <div style={{ marginLeft: '24px' }}>\n      <Checkbox \n        label=\"Option 1\" \n        checked={child1Checked}\n        onCheckedChange={setChild1Checked}\n      />\n      <Checkbox \n        label=\"Option 2\" \n        checked={child2Checked}\n        onCheckedChange={setChild2Checked}\n      />\n    </div>\n  </div>\n);\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe Checkbox uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-size-*` | Checkbox dimensions |\n| `--t-space-*` | Padding and spacing |\n| `--t-typography-*` | Typography tokens |\n| `--t-color-fill-*` | Background colors |\n| `--t-color-text-*` | Text colors |\n| `--t-color-border-*` | Border colors |\n| `--t-color-surface-*` | Background colors |\n| `--t-color-icon-*` | Icon colors |\n| `--t-border-radius-*` | Border radius |\n| `--t-border-width-*` | Border width |\n| `--t-duration-*` | Animation duration |\n| `--t-easing-*` | Animation timing |\n| `--t-line-height-*` | Line height for different languages |\n\n### Architecture\n\nThe component is built on Radix UI's Checkbox component, which provides accessibility and state management. The custom implementation adds:\n\n1. Label, help text, and error message handling\n2. Visual styling through CSS modules\n3. RTL support with appropriate text and layout adjustments\n4. Indeterminate state visualization\n5. Required field indication\n\n### Browser Support\n\nThe Checkbox component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Checkbox Component",
      "usage": [
        "import { Checkbox } from '@tagaddod/react';",
        "<Checkbox label=\"Label\" />",
        "<Checkbox label=\"Label\" checked={true} />",
        "<Checkbox label=\"Label\" checked=\"indeterminate\" />",
        "<Checkbox label=\"Label\" disabled={true} />",
        "<Checkbox \n  label=\"Label\" \n  disabled={true} \n  checked={true} \n/>",
        "<Checkbox \n  label=\"Label\" \n  helpText=\"Help text\" \n/>",
        "<Checkbox \n  label=\"Label\" \n  error=\"Error message\" \n/>",
        "<Checkbox \n  label=\"Label\" \n  required={true} \n/>",
        "<Checkbox />",
        "<Checkbox \n  label=\"Hidden Label\" \n  hideLabel={true} \n/>",
        "<div dir=\"rtl\">\n  <Checkbox \n    label=\"تسمية\" \n    helpText=\"نص المساعدة\" \n  />\n</div>",
        "<div dir=\"rtl\">\n  <Checkbox \n    label=\"تسمية\" \n    error=\"رسالة خطأ\" \n  />\n</div>",
        "import { useState } from 'react';\n\nfunction MyForm() {\n  const [isChecked, setIsChecked] = useState(false);\n  \n  return (\n    <Checkbox \n      label=\"I agree to the terms\" \n      checked={isChecked}\n      onCheckedChange={setIsChecked}\n    />\n  );\n}",
        "<form onSubmit={handleSubmit}>\n  <Checkbox \n    name=\"terms\" \n    required={true} \n    label=\"I agree to the terms and conditions\"\n  />\n  <button type=\"submit\">Submit</button>\n</form>",
        "<Checkbox \n  label=\"I accept the Terms of Service and Privacy Policy\" \n  required={true} \n/>",
        "<div>\n  <Checkbox label=\"Email notifications\" />\n  <Checkbox label=\"SMS notifications\" />\n  <Checkbox label=\"Push notifications\" />\n</div>",
        "<div>\n  <Checkbox label=\"Apple\" />\n  <Checkbox label=\"Orange\" />\n  <Checkbox label=\"Banana\" />\n  <Checkbox label=\"Strawberry\" />\n</div>",
        "const [parentChecked, setParentChecked] = useState('indeterminate');\nconst [child1Checked, setChild1Checked] = useState(true);\nconst [child2Checked, setChild2Checked] = useState(false);\n\n// Update parent state based on children\nuseEffect(() => {\n  if (child1Checked && child2Checked) {\n    setParentChecked(true);\n  } else if (!child1Checked && !child2Checked) {\n    setParentChecked(false);\n  } else {\n    setParentChecked('indeterminate');\n  }\n}, [child1Checked, child2Checked]);\n\n// Update children based on parent\nconst handleParentChange = (newState) => {\n  setParentChecked(newState);\n  if (newState !== 'indeterminate') {\n    setChild1Checked(newState);\n    setChild2Checked(newState);\n  }\n};\n\nreturn (\n  <div>\n    <Checkbox \n      label=\"Select All\" \n      checked={parentChecked}\n      onCheckedChange={handleParentChange}\n    />\n    <div style={{ marginLeft: '24px' }}>\n      <Checkbox \n        label=\"Option 1\" \n        checked={child1Checked}\n        onCheckedChange={setChild1Checked}\n      />\n      <Checkbox \n        label=\"Option 2\" \n        checked={child2Checked}\n        onCheckedChange={setChild2Checked}\n      />\n    </div>\n  </div>\n);"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Badge",
    "stories": [
      {
        "id": "Components/Badge--default",
        "name": "Default",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Badge--alltones",
        "name": "AllTones",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "AllTones",
        "description": ""
      },
      {
        "id": "Components/Badge--allsizes",
        "name": "AllSizes",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "AllSizes",
        "description": ""
      },
      {
        "id": "Components/Badge--withicon",
        "name": "WithIcon",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "WithIcon",
        "description": ""
      },
      {
        "id": "Components/Badge--strong",
        "name": "Strong",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "Strong",
        "description": ""
      },
      {
        "id": "Components/Badge--rtl",
        "name": "RTL",
        "title": "Components/Badge",
        "importPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Badge",
        "storyName": "RTL",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Badge/Badge.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as BadgeStories from './Badge.stories';\nimport { Badge } from './Badge';\n\n<Meta of={BadgeStories} />\n\n# Badge Component\n\nThe Badge component is a visual indicator used to highlight status, count, or categorize content with short text labels. Badges can appear in different tones, sizes, and can include icons.\n\n## Overview\n\nBadges help users quickly identify status, category, or other metadata about items. They're compact, high-contrast elements that stand out visually from surrounding content.\n\n## Import\n\n```jsx\nimport { Badge } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Badge} />\n\n## Basic Usage\n\n<Canvas of={BadgeStories.Default} />\n\n```jsx\n<Badge>Badge</Badge>\n```\n\n## Tones\n\nBadges come in different tones to represent different states or categories.\n\n<Canvas of={BadgeStories.AllTones} />\n\n```jsx\n// Regular badges\n<Badge tone=\"default\">Default</Badge>\n<Badge tone=\"info\">Info</Badge>\n<Badge tone=\"success\">Success</Badge>\n<Badge tone=\"warning\">Warning</Badge>\n<Badge tone=\"critical\">Critical</Badge>\n<Badge tone=\"magic\">Magic</Badge>\n\n// Strong badges (higher contrast)\n<Badge tone=\"default\" strong>Default</Badge>\n<Badge tone=\"info\" strong>Info</Badge>\n<Badge tone=\"success\" strong>Success</Badge>\n<Badge tone=\"warning\" strong>Warning</Badge>\n<Badge tone=\"critical\" strong>Critical</Badge>\n<Badge tone=\"magic\" strong>Magic</Badge>\n```\n\n### Default\n\nUsed for neutral or general-purpose labels.\n\n### Info\n\nFor informational or helpful content.\n\n### Success\n\nIndicates successful status or positive completion.\n\n### Warning\n\nAlerts users to potential issues.\n\n### Critical\n\nHighlights errors or critical information.\n\n### Magic\n\nFor special, featured, or premium items.\n\n## Strong Variant\n\nThe strong variant provides higher contrast with a bold colored background, making badges more prominent.\n\n<Canvas of={BadgeStories.Strong} />\n\n```jsx\n<Badge tone=\"success\" strong>Success</Badge>\n```\n\n## Sizes\n\nBadges come in three sizes to fit different UI contexts.\n\n<Canvas of={BadgeStories.AllSizes} />\n\n```jsx\n<Badge size=\"medium\">Medium</Badge>\n<Badge size=\"large\">Large</Badge>\n<Badge size=\"xlarge\">X-Large</Badge>\n```\n\n### Medium (Default)\n\nCompact size suitable for most UI contexts.\n\n### Large\n\nSlightly larger for more prominence.\n\n### X-Large\n\nThe largest size, for high-emphasis indicators or when a badge contains more text.\n\n## With Icon\n\nBadges can include an icon before the label text.\n\n<Canvas of={BadgeStories.WithIcon} />\n\n```jsx\n<Badge \n  icon={<InfoIcon />}\n>\n  Badge with icon\n</Badge>\n```\n\n## Internationalization\n\nThe Badge component properly handles Right-to-Left (RTL) languages automatically by:\n\n1. Adjusting icon positioning for RTL text flow\n2. Applying appropriate line height for Arabic text\n\n<Canvas of={BadgeStories.RTL} />\n\n```jsx\n// The badge will automatically adjust in RTL contexts\n<div dir=\"rtl\">\n  <Badge tone=\"info\">جداب</Badge>\n  <Badge tone=\"success\">نجاح</Badge>\n  <Badge tone=\"warning\">تحذير</Badge>\n</div>\n```\n\n## Accessibility\n\n- Badges are non-interactive elements used to convey information\n- Use appropriate color combinations to maintain sufficient contrast\n- For interactive badges, consider using a Button component instead\n- Screen readers will read badge content, so keep text concise and meaningful\n\n## Common Use Cases\n\n### Status Indicators\n\n```jsx\n<div>\n  <Badge tone=\"success\">Completed</Badge>\n  <Badge tone=\"warning\">Pending</Badge>\n  <Badge tone=\"critical\">Failed</Badge>\n</div>\n```\n\n### Categorization\n\n```jsx\n<div>\n  <Badge>Design</Badge>\n  <Badge>Development</Badge>\n  <Badge>Marketing</Badge>\n</div>\n```\n\n### Notification Counts\n\n```jsx\n<Badge tone=\"critical\" strong>5</Badge>\n```\n\n### Information with Icons\n\n```jsx\nimport { InfoIcon, AlertIcon } from '@your-icon-library';\n\n<div>\n  <Badge icon={<InfoIcon />} tone=\"info\">Information</Badge>\n  <Badge icon={<AlertIcon />} tone=\"warning\">Notice</Badge>\n</div>\n```\n\n## Customizing\n\nThe Badge component accepts additional class names and all standard HTML span attributes.\n\n```jsx\n<Badge \n  className=\"custom-badge-class\"\n  data-testid=\"status-badge\"\n>\n  Custom Badge\n</Badge>\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe Badge uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-100/200/300` | Padding and icon spacing |\n| `--t-typography-caption-lg-medium` | Typography for medium/large sizes |\n| `--t-typography-body-sm-medium` | Typography for xlarge size |\n| `--t-color-*-500/1200` | Background colors |\n| `--t-color-text-*` | Text colors |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Rendering Logic\n\n1. The component applies classes based on tone, size, and strong props\n2. Detects RTL mode from the document direction\n3. Applies line height adjustments based on text direction\n4. Renders the icon (if provided) and label text\n\n### Browser Support\n\nThe Badge component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Badge Component",
      "usage": [
        "import { Badge } from '@tagaddod/react';",
        "<Badge>Badge</Badge>",
        "// Regular badges\n<Badge tone=\"default\">Default</Badge>\n<Badge tone=\"info\">Info</Badge>\n<Badge tone=\"success\">Success</Badge>\n<Badge tone=\"warning\">Warning</Badge>\n<Badge tone=\"critical\">Critical</Badge>\n<Badge tone=\"magic\">Magic</Badge>\n\n// Strong badges (higher contrast)\n<Badge tone=\"default\" strong>Default</Badge>\n<Badge tone=\"info\" strong>Info</Badge>\n<Badge tone=\"success\" strong>Success</Badge>\n<Badge tone=\"warning\" strong>Warning</Badge>\n<Badge tone=\"critical\" strong>Critical</Badge>\n<Badge tone=\"magic\" strong>Magic</Badge>",
        "<Badge tone=\"success\" strong>Success</Badge>",
        "<Badge size=\"medium\">Medium</Badge>\n<Badge size=\"large\">Large</Badge>\n<Badge size=\"xlarge\">X-Large</Badge>",
        "<Badge \n  icon={<InfoIcon />}\n>\n  Badge with icon\n</Badge>",
        "// The badge will automatically adjust in RTL contexts\n<div dir=\"rtl\">\n  <Badge tone=\"info\">جداب</Badge>\n  <Badge tone=\"success\">نجاح</Badge>\n  <Badge tone=\"warning\">تحذير</Badge>\n</div>",
        "<div>\n  <Badge tone=\"success\">Completed</Badge>\n  <Badge tone=\"warning\">Pending</Badge>\n  <Badge tone=\"critical\">Failed</Badge>\n</div>",
        "<div>\n  <Badge>Design</Badge>\n  <Badge>Development</Badge>\n  <Badge>Marketing</Badge>\n</div>",
        "<Badge tone=\"critical\" strong>5</Badge>",
        "import { InfoIcon, AlertIcon } from '@your-icon-library';\n\n<div>\n  <Badge icon={<InfoIcon />} tone=\"info\">Information</Badge>\n  <Badge icon={<AlertIcon />} tone=\"warning\">Notice</Badge>\n</div>",
        "<Badge \n  className=\"custom-badge-class\"\n  data-testid=\"status-badge\"\n>\n  Custom Badge\n</Badge>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Avatar",
    "stories": [
      {
        "id": "Components/Avatar--withimage",
        "name": "WithImage",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "WithImage",
        "description": ""
      },
      {
        "id": "Components/Avatar--withinitial",
        "name": "WithInitial",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "WithInitial",
        "description": ""
      },
      {
        "id": "Components/Avatar--witharabicinitial",
        "name": "WithArabicInitial",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "WithArabicInitial",
        "description": ""
      },
      {
        "id": "Components/Avatar--withicon",
        "name": "WithIcon",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "WithIcon",
        "description": ""
      },
      {
        "id": "Components/Avatar--sizevariants",
        "name": "SizeVariants",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "SizeVariants",
        "description": ""
      },
      {
        "id": "Components/Avatar--typevariants",
        "name": "TypeVariants",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "TypeVariants",
        "description": ""
      },
      {
        "id": "Components/Avatar--withfallback",
        "name": "WithFallback",
        "title": "Components/Avatar",
        "importPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Avatar",
        "storyName": "WithFallback",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Avatar/Avatar.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as AvatarStories from './Avatar.stories';\nimport { Avatar } from './Avatar';\n\n<Meta of={AvatarStories} />\n\n# Avatar Component\n\nThe Avatar component displays a user's profile picture, initials, or a fallback icon when no image or initial is available.\n\n## Overview\n\nThe Avatar component is used to represent people in the interface, displaying either a profile image, the user's initial, or a generic user icon as a fallback. It supports multiple sizes and handles image loading states.\n\n## Import\n\n```jsx\nimport { Avatar } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Avatar} />\n\n## Basic Usage\n\n### With Image\n\n<Canvas of={AvatarStories.WithImage} />\n\n```jsx\n<Avatar \n  type=\"image\"\n  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n  alt=\"User profile picture\"\n/>\n```\n\n### With Initial\n\n<Canvas of={AvatarStories.WithInitial} />\n\n```jsx\n<Avatar \n  type=\"initial\"\n  initial=\"U\"\n/>\n```\n\n### With Fallback Icon\n\n<Canvas of={AvatarStories.WithIcon} />\n\n```jsx\n<Avatar type=\"icon\" />\n```\n\n## Types\n\nThe Avatar component supports three types:\n\n### Image Avatar\n\nDisplays a user's profile picture.\n\n<Canvas of={AvatarStories.WithImage} />\n\n```jsx\n<Avatar \n  type=\"image\"\n  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n  alt=\"User profile picture\"\n/>\n```\n\n### Initial Avatar\n\nDisplays the first letter of a user's name.\n\n<Canvas of={AvatarStories.WithInitial} />\n\n```jsx\n<Avatar \n  type=\"initial\"\n  initial=\"U\"\n/>\n```\n\n### Icon Avatar\n\nDisplays a default user icon when no image or initial is available.\n\n<Canvas of={AvatarStories.WithIcon} />\n\n```jsx\n<Avatar type=\"icon\" />\n```\n\n## Sizes\n\nThe Avatar component comes in four sizes:\n\n<Canvas of={AvatarStories.SizeVariants} />\n\n```jsx\n<Avatar size=\"sm\" type=\"initial\" initial=\"S\" />\n<Avatar size=\"md\" type=\"initial\" initial=\"M\" />\n<Avatar size=\"lg\" type=\"initial\" initial=\"L\" />\n<Avatar size=\"xl\" type=\"initial\" initial=\"X\" />\n```\n\n| Size | Dimensions | Use Case |\n|------|------------|----------|\n| `sm` | 24px | Dense UI elements, compact lists |\n| `md` | 32px | Default size, most UI contexts |\n| `lg` | 40px | Featured content, headers |\n| `xl` | 64px | Profile pages, detailed views |\n\n## Handling Image Loading and Errors\n\nThe Avatar component automatically handles image loading states and errors:\n\n<Canvas of={AvatarStories.WithFallback} />\n\n```jsx\n<Avatar \n  type=\"image\"\n  src=\"https://invalid-image-url.com/not-found.jpg\"\n  alt=\"User profile with fallback\"\n  // Will show fallback icon after 600ms\n/>\n```\n\nYou can customize the delay before showing the fallback with the `delayMs` prop:\n\n```jsx\n<Avatar \n  type=\"image\"\n  src=\"https://example.com/profile.jpg\"\n  alt=\"User profile\"\n  delayMs={1000} // Wait 1 second before showing fallback\n/>\n```\n\n## Internationalization\n\nThe Avatar component properly handles Right-to-Left (RTL) languages automatically for initial-type avatars by:\n\n1. Applying appropriate line height for Arabic text\n2. Ensuring correct vertical alignment of initials\n\n<Canvas of={AvatarStories.WithArabicInitial} />\n\n```jsx\n<div dir=\"rtl\">\n  <Avatar \n    type=\"initial\"\n    initial=\"أ\"\n  />\n</div>\n```\n\n## Use Cases\n\n### User Profiles\n\n```jsx\n<div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n  <Avatar \n    type=\"image\"\n    src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n    alt=\"User profile\"\n    size=\"lg\"\n  />\n  <div>\n    <h3>John Doe</h3>\n    <p>Product Manager</p>\n  </div>\n</div>\n```\n\n### Comment Sections\n\n```jsx\n<div style={{ display: 'flex', gap: '12px', alignItems: 'flex-start' }}>\n  <Avatar \n    type=\"initial\"\n    initial=\"J\"\n    size=\"md\"\n  />\n  <div>\n    <p><strong>John Doe</strong> • 2 hours ago</p>\n    <p>This looks great! I'm excited to try it out.</p>\n  </div>\n</div>\n```\n\n### User Lists\n\n```jsx\n<ul style={{ listStyle: 'none', padding: 0 }}>\n  {users.map(user => (\n    <li key={user.id} style={{ display: 'flex', gap: '8px', alignItems: 'center', marginBottom: '8px' }}>\n      <Avatar \n        type={user.avatar ? \"image\" : \"initial\"}\n        src={user.avatar}\n        initial={user.name.charAt(0)}\n        size=\"sm\"\n      />\n      <span>{user.name}</span>\n    </li>\n  ))}\n</ul>\n```\n\n### Avatar Groups\n\n```jsx\n<div style={{ display: 'flex' }}>\n  {users.slice(0, 3).map((user, index) => (\n    <div\n      key={user.id}\n      style={{ marginLeft: index === 0 ? 0 : '-8px' }}\n    >\n      <Avatar \n        type={user.avatar ? \"image\" : \"initial\"}\n        src={user.avatar}\n        initial={user.name.charAt(0)}\n        size=\"md\"\n      />\n    </div>\n  ))}\n  {users.length > 3 && (\n    <div style={{ marginLeft: '-8px' }}>\n      <Avatar \n        type=\"initial\"\n        initial={`+${users.length - 3}`}\n        size=\"md\"\n      />\n    </div>\n  )}\n</div>\n```\n\n## Accessibility\n\n- Include meaningful `alt` text for image avatars to describe the user\n- The component uses Radix UI's Avatar primitive, which provides accessible fallbacks\n- Initial avatars are properly labeled for screen readers through the Avatar implementation\n- Focus states are properly managed for keyboard navigation\n- Color contrast meets WCAG standards for readability of initials\n\n## Implementation Details\n\n### CSS Variables\n\nThe Avatar component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-size-*` | Dimensions for different avatar sizes |\n| `--t-border-radius-full` | Circular border radius |\n| `--t-color-fill-brand-secondary` | Background color for non-image avatars |\n| `--t-color-text-primary` | Text color for initials |\n| `--t-font-family-primary` | Font family for initial text |\n| `--t-font-weight-medium` | Font weight for initial text |\n| `--t-font-size-*` | Font sizes for different avatar sizes |\n| `--t-line-height-arabic` | Line height for Arabic text |\n| `--t-line-height-english` | Line height for English text |\n\n### Architecture\n\nThe component is built on Radix UI's Avatar component which provides:\n\n1. Proper handling of image loading states\n2. Automatic fallback rendering when images fail to load\n3. Accessible implementation with proper ARIA attributes\n\nThe Tagaddod implementation extends this with:\n\n1. Design system integration with tokens\n2. Support for multiple sizes\n3. Initial avatar option with proper text rendering\n4. RTL language support\n5. Consistent styling across all variants\n\n### Browser Support\n\nThe Avatar component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Avatar Component",
      "usage": [
        "import { Avatar } from '@tagaddod/react';",
        "<Avatar \n  type=\"image\"\n  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n  alt=\"User profile picture\"\n/>",
        "<Avatar \n  type=\"initial\"\n  initial=\"U\"\n/>",
        "<Avatar type=\"icon\" />",
        "<Avatar \n  type=\"image\"\n  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n  alt=\"User profile picture\"\n/>",
        "<Avatar \n  type=\"initial\"\n  initial=\"U\"\n/>",
        "<Avatar type=\"icon\" />",
        "<Avatar size=\"sm\" type=\"initial\" initial=\"S\" />\n<Avatar size=\"md\" type=\"initial\" initial=\"M\" />\n<Avatar size=\"lg\" type=\"initial\" initial=\"L\" />\n<Avatar size=\"xl\" type=\"initial\" initial=\"X\" />",
        "<Avatar \n  type=\"image\"\n  src=\"https://invalid-image-url.com/not-found.jpg\"\n  alt=\"User profile with fallback\"\n  // Will show fallback icon after 600ms\n/>",
        "<Avatar \n  type=\"image\"\n  src=\"https://example.com/profile.jpg\"\n  alt=\"User profile\"\n  delayMs={1000} // Wait 1 second before showing fallback\n/>",
        "<div dir=\"rtl\">\n  <Avatar \n    type=\"initial\"\n    initial=\"أ\"\n  />\n</div>",
        "<div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n  <Avatar \n    type=\"image\"\n    src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e\"\n    alt=\"User profile\"\n    size=\"lg\"\n  />\n  <div>\n    <h3>John Doe</h3>\n    <p>Product Manager</p>\n  </div>\n</div>",
        "<div style={{ display: 'flex', gap: '12px', alignItems: 'flex-start' }}>\n  <Avatar \n    type=\"initial\"\n    initial=\"J\"\n    size=\"md\"\n  />\n  <div>\n    <p><strong>John Doe</strong> • 2 hours ago</p>\n    <p>This looks great! I'm excited to try it out.</p>\n  </div>\n</div>",
        "<ul style={{ listStyle: 'none', padding: 0 }}>\n  {users.map(user => (\n    <li key={user.id} style={{ display: 'flex', gap: '8px', alignItems: 'center', marginBottom: '8px' }}>\n      <Avatar \n        type={user.avatar ? \"image\" : \"initial\"}\n        src={user.avatar}\n        initial={user.name.charAt(0)}\n        size=\"sm\"\n      />\n      <span>{user.name}</span>\n    </li>\n  ))}\n</ul>",
        "<div style={{ display: 'flex' }}>\n  {users.slice(0, 3).map((user, index) => (\n    <div\n      key={user.id}\n      style={{ marginLeft: index === 0 ? 0 : '-8px' }}\n    >\n      <Avatar \n        type={user.avatar ? \"image\" : \"initial\"}\n        src={user.avatar}\n        initial={user.name.charAt(0)}\n        size=\"md\"\n      />\n    </div>\n  ))}\n  {users.length > 3 && (\n    <div style={{ marginLeft: '-8px' }}>\n      <Avatar \n        type=\"initial\"\n        initial={`+${users.length - 3}`}\n        size=\"md\"\n      />\n    </div>\n  )}\n</div>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/Button",
    "stories": [
      {
        "id": "Components/Button--default",
        "name": "Default",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/Button--primary",
        "name": "Primary",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Primary",
        "description": ""
      },
      {
        "id": "Components/Button--secondary",
        "name": "Secondary",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Secondary",
        "description": ""
      },
      {
        "id": "Components/Button--tertiary",
        "name": "Tertiary",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Tertiary",
        "description": ""
      },
      {
        "id": "Components/Button--plain",
        "name": "Plain",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Plain",
        "description": ""
      },
      {
        "id": "Components/Button--critical",
        "name": "Critical",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Critical",
        "description": ""
      },
      {
        "id": "Components/Button--success",
        "name": "Success",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Success",
        "description": ""
      },
      {
        "id": "Components/Button--neutral",
        "name": "Neutral",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Neutral",
        "description": ""
      },
      {
        "id": "Components/Button--magic",
        "name": "Magic",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Magic",
        "description": ""
      },
      {
        "id": "Components/Button--large",
        "name": "Large",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Large",
        "description": ""
      },
      {
        "id": "Components/Button--medium",
        "name": "Medium",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Medium",
        "description": ""
      },
      {
        "id": "Components/Button--micro",
        "name": "Micro",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Micro",
        "description": ""
      },
      {
        "id": "Components/Button--loading",
        "name": "Loading",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Loading",
        "description": ""
      },
      {
        "id": "Components/Button--loadingvariants",
        "name": "LoadingVariants",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "LoadingVariants",
        "description": ""
      },
      {
        "id": "Components/Button--loadingsizes",
        "name": "LoadingSizes",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "LoadingSizes",
        "description": ""
      },
      {
        "id": "Components/Button--loadingwithicons",
        "name": "LoadingWithIcons",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "LoadingWithIcons",
        "description": ""
      },
      {
        "id": "Components/Button--disabled",
        "name": "Disabled",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "Disabled",
        "description": ""
      },
      {
        "id": "Components/Button--disabledvariants",
        "name": "DisabledVariants",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "DisabledVariants",
        "description": ""
      },
      {
        "id": "Components/Button--fullwidth",
        "name": "FullWidth",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "FullWidth",
        "description": ""
      },
      {
        "id": "Components/Button--withprefixicon",
        "name": "WithPrefixIcon",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "WithPrefixIcon",
        "description": ""
      },
      {
        "id": "Components/Button--withsuffixicon",
        "name": "WithSuffixIcon",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "WithSuffixIcon",
        "description": ""
      },
      {
        "id": "Components/Button--withbothicons",
        "name": "WithBothIcons",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "WithBothIcons",
        "description": ""
      },
      {
        "id": "Components/Button--icononly",
        "name": "IconOnly",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "IconOnly",
        "description": ""
      },
      {
        "id": "Components/Button--rtltext",
        "name": "RtlText",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "RtlText",
        "description": ""
      },
      {
        "id": "Components/Button--allvariantsandtones",
        "name": "AllVariantsAndTones",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "AllVariantsAndTones",
        "description": ""
      },
      {
        "id": "Components/Button--allsizes",
        "name": "AllSizes",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "AllSizes",
        "description": ""
      },
      {
        "id": "Components/Button--iconbuttonallsizes",
        "name": "IconButtonAllSizes",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "IconButtonAllSizes",
        "description": ""
      },
      {
        "id": "Components/Button--icononlyvariants",
        "name": "IconOnlyVariants",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "IconOnlyVariants",
        "description": ""
      },
      {
        "id": "Components/Button--icononlybothtypes",
        "name": "IconOnlyBothTypes",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "IconOnlyBothTypes",
        "description": ""
      },
      {
        "id": "Components/Button--commonusecases",
        "name": "CommonUseCases",
        "title": "Components/Button",
        "importPath": "../packages/react/src/components/Button/Button.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "Button",
        "storyName": "CommonUseCases",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/Button/Button.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\nimport { Button } from './Button';\nimport { IconPlus, IconSearch, IconArrowRight } from '@tabler/icons-react';\n\n<Meta of={ButtonStories} />\n\n# Button Component\n\nThe Button component is a versatile UI element that triggers actions or events when clicked by users. It supports various visual styles through variants and tones, accommodates different sizes, and can include loading states, icons, and full-width layouts.\n\n## Overview\n\nButtons are primary interactive elements in user interfaces, allowing users to trigger actions, submit forms, navigate, or make selections. The Tagaddod Design System provides a comprehensive Button component with consistent styling and behavior.\n\n## Import\n\n```jsx\nimport { Button } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={Button} />\n\n## Basic Usage\n\n<Canvas of={ButtonStories.Default} />\n\n```jsx\n// Default button (primary variant)\n<Button>Button</Button>\n\n// With callback\n<Button onClick={() => console.log('Button clicked')}>\n  Click Me\n</Button>\n```\n\n## Variants\n\nButtons come in four visual variants that represent different levels of emphasis.\n\n<Canvas of={ButtonStories.AllVariantsAndTones} />\n\n### Primary\n\nUse Primary buttons for the main action in a section or form.\n\n<Canvas of={ButtonStories.Primary} />\n\n```jsx\n<Button variant=\"primary\">Primary Button</Button>\n```\n\n### Secondary\n\nSecondary buttons for alternative or secondary actions.\n\n<Canvas of={ButtonStories.Secondary} />\n\n```jsx\n<Button variant=\"secondary\">Secondary Button</Button>\n```\n\n### Tertiary\n\nTertiary buttons have a subtle appearance for less prominent actions.\n\n<Canvas of={ButtonStories.Tertiary} />\n\n```jsx\n<Button variant=\"tertiary\">Tertiary Button</Button>\n```\n\n### Plain\n\nPlain buttons are minimalist with no background or border until hovered.\n\n<Canvas of={ButtonStories.Plain} />\n\n```jsx\n<Button variant=\"plain\">Plain Button</Button>\n```\n\n## Tones\n\nTones provide different color treatments that convey semantic meaning.\n\n### Default (Brand)\n\nThe default tone uses brand colors.\n\n<Canvas of={ButtonStories.Default} />\n\n### Critical\n\nUse for destructive or high-risk actions (delete, remove).\n\n<Canvas of={ButtonStories.Critical} />\n\n```jsx\n<Button tone=\"critical\">Critical Button</Button>\n```\n\n### Success\n\nIndicates positive or successful actions.\n\n<Canvas of={ButtonStories.Success} />\n\n```jsx\n<Button tone=\"success\">Success Button</Button>\n```\n\n### Neutral\n\nFor standard, non-branded actions.\n\n<Canvas of={ButtonStories.Neutral} />\n\n```jsx\n<Button tone=\"neutral\">Neutral Button</Button>\n```\n\n### Magic\n\nFor special or premium actions.\n\n<Canvas of={ButtonStories.Magic} />\n\n```jsx\n<Button tone=\"magic\">Magic Button</Button>\n```\n\n## Sizes\n\n<Canvas of={ButtonStories.AllSizes} />\n\n```jsx\n<Button size=\"large\">Large</Button>\n<Button size=\"medium\">Medium</Button>\n<Button size=\"micro\">Micro</Button>\n```\n\n## States\n\n### Loading\n\nShows a centered spinner and disables interaction. The button maintains its original width and full opacity during loading state.\n\n<Canvas of={ButtonStories.Loading} />\n\n```jsx\n<Button loading>Loading Button</Button>\n```\n\n#### Loading Variations\n\n<Canvas of={ButtonStories.LoadingVariants} />\n\n#### Loading with Different Sizes\n\n<Canvas of={ButtonStories.LoadingSizes} />\n\n#### Loading with Icons\n\n<Canvas of={ButtonStories.LoadingWithIcons} />\n\n### Disabled\n\nIndicates that a button action is unavailable. Each variant has a specific disabled appearance matching the design system.\n\n<Canvas of={ButtonStories.Disabled} />\n\n```jsx\n<Button disabled>Disabled Button</Button>\n```\n\n#### Disabled Variants\n\n<Canvas of={ButtonStories.DisabledVariants} />\n\nAll button variants have specific disabled styles:\n- **Primary/Secondary**: Light gray background with disabled text color\n- **Tertiary**: Transparent background with disabled border and text\n- **Plain**: Transparent background with disabled text color\n\n### Full Width\n\nStretches the button to 100% of its container's width.\n\n<Canvas of={ButtonStories.FullWidth} />\n\n```jsx\n<Button fullWidth>Full Width Button</Button>\n```\n\n## Icon Usage\n\nButtons can include icons before (prefix) or after (suffix) the text, or display only an icon.\n\n### With Prefix Icon\n\n<Canvas of={ButtonStories.WithPrefixIcon} />\n\n```jsx\nimport { IconPlus } from '@tabler/icons-react';\n\n<Button prefixIcon={<IconPlus size={18} />}>\n  Add Item\n</Button>\n```\n\n### With Suffix Icon\n\n<Canvas of={ButtonStories.WithSuffixIcon} />\n\n```jsx\nimport { IconArrowRight } from '@tabler/icons-react';\n\n<Button suffixIcon={<IconArrowRight size={18} />}>\n  Next Step\n</Button>\n```\n\n### With Both Icons\n\n<Canvas of={ButtonStories.WithBothIcons} />\n\n```jsx\nimport { IconSearch, IconArrowRight } from '@tabler/icons-react';\n\n<Button \n  prefixIcon={<IconSearch size={18} />}\n  suffixIcon={<IconArrowRight size={18} />}\n>\n  Search Results\n</Button>\n```\n\n### Icon-Only Button\n\nWhen creating icon-only buttons, always provide an accessible name using `aria-label`.\n\n<Canvas of={ButtonStories.IconOnly} />\n\n```jsx\nimport { IconPlus } from '@tabler/icons-react';\n\n<Button \n  prefixIcon={<IconPlus size={18} />}\n  aria-label=\"Add item\"\n/>\n```\n\n## Internationalization\n\nThe Button component properly handles Right-to-Left (RTL) languages automatically by:\n\n1. Adjusting icon positioning for RTL text flow\n2. Applying appropriate line height for Arabic text\n3. Maintaining proper spinner positioning in RTL mode\n\n<Canvas of={ButtonStories.RtlText} />\n\n```jsx\n// The button will automatically adjust in RTL contexts\n<Button \n  prefixIcon={<IconPlus size={18} />}\n  suffixIcon={<IconArrowRight size={18} />}\n>\n  زر عربي\n</Button>\n```\n\n## Accessibility\n\n- Use semantic HTML button elements with appropriate type attributes (`button`, `submit`, or `reset`)\n- Maintain sufficient color contrast for all states and variants\n- Provide descriptive text or `aria-label` for icon-only buttons\n- Clearly indicate loading and disabled states\n- Support keyboard focus styles and navigation\n\n## Common Use Cases\n\n<Canvas of={ButtonStories.CommonUseCases} />\n\n### Form Actions\n\n```jsx\n<div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end' }}>\n  <Button variant=\"tertiary\">Cancel</Button>\n  <Button variant=\"primary\">Submit</Button>\n</div>\n```\n\n### Data Operations\n\n```jsx\nimport { IconPlus, IconEdit, IconTrash } from '@tabler/icons-react';\n\n<div>\n  <Button \n    variant=\"primary\" \n    prefixIcon={<IconPlus size={18} />}\n  >\n    Add Item\n  </Button>\n  \n  <Button \n    variant=\"secondary\" \n    prefixIcon={<IconEdit size={18} />}\n  >\n    Edit\n  </Button>\n  \n  <Button \n    variant=\"primary\" \n    tone=\"critical\" \n    prefixIcon={<IconTrash size={18} />}\n  >\n    Delete\n  </Button>\n</div>\n```\n\n## Customizing\n\nThe Button component accepts additional class names and all standard HTML button attributes.\n\n```jsx\n<Button \n  className=\"custom-button-class\"\n  data-testid=\"submit-button\"\n  onClick={handleSubmit}\n>\n  Custom Button\n</Button>\n```\n\n## Implementation Details\n\n### CSS Variables\n\nThe Button uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-space-100/200/300/400` | Padding and spacing |\n| `--t-font-family-primary` | Button text font |\n| `--t-typography-body-*` | Typography tokens |\n| `--t-color-fill-*` | Background colors |\n| `--t-color-text-*` | Text colors |\n| `--t-color-border-*` | Border colors |\n| `--t-border-radius-200` | Corner radius |\n| `--t-size-*` | Height/width dimensions |\n| `--t-duration-base` | Animation duration |\n| `--t-easing-in-out` | Animation timing |\n\n### Rendering Logic\n\n1. The component determines if it's icon-only by checking if there are no children but icon props exist\n2. Detects RTL mode from the document direction\n3. Applies appropriate classes based on props\n4. Renders content based on loading state:\n   - **Normal state**: Shows text and icons as provided\n   - **Loading state**: Renders hidden content to maintain width and displays centered spinner with full opacity\n\n### Browser Support\n\nThe Button component is compatible with all modern browsers and includes RTL language support.\n",
    "componentInfo": {
      "props": {},
      "description": "Button Component",
      "usage": [
        "import { Button } from '@tagaddod/react';",
        "// Default button (primary variant)\n<Button>Button</Button>\n\n// With callback\n<Button onClick={() => console.log('Button clicked')}>\n  Click Me\n</Button>",
        "<Button variant=\"primary\">Primary Button</Button>",
        "<Button variant=\"secondary\">Secondary Button</Button>",
        "<Button variant=\"tertiary\">Tertiary Button</Button>",
        "<Button variant=\"plain\">Plain Button</Button>",
        "<Button tone=\"critical\">Critical Button</Button>",
        "<Button tone=\"success\">Success Button</Button>",
        "<Button tone=\"neutral\">Neutral Button</Button>",
        "<Button tone=\"magic\">Magic Button</Button>",
        "<Button size=\"large\">Large</Button>\n<Button size=\"medium\">Medium</Button>\n<Button size=\"micro\">Micro</Button>",
        "<Button loading>Loading Button</Button>",
        "<Button disabled>Disabled Button</Button>",
        "<Button fullWidth>Full Width Button</Button>",
        "import { IconPlus } from '@tabler/icons-react';\n\n<Button prefixIcon={<IconPlus size={18} />}>\n  Add Item\n</Button>",
        "import { IconArrowRight } from '@tabler/icons-react';\n\n<Button suffixIcon={<IconArrowRight size={18} />}>\n  Next Step\n</Button>",
        "import { IconSearch, IconArrowRight } from '@tabler/icons-react';\n\n<Button \n  prefixIcon={<IconSearch size={18} />}\n  suffixIcon={<IconArrowRight size={18} />}\n>\n  Search Results\n</Button>",
        "import { IconPlus } from '@tabler/icons-react';\n\n<Button \n  prefixIcon={<IconPlus size={18} />}\n  aria-label=\"Add item\"\n/>",
        "// The button will automatically adjust in RTL contexts\n<Button \n  prefixIcon={<IconPlus size={18} />}\n  suffixIcon={<IconArrowRight size={18} />}\n>\n  زر عربي\n</Button>",
        "<div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end' }}>\n  <Button variant=\"tertiary\">Cancel</Button>\n  <Button variant=\"primary\">Submit</Button>\n</div>",
        "import { IconPlus, IconEdit, IconTrash } from '@tabler/icons-react';\n\n<div>\n  <Button \n    variant=\"primary\" \n    prefixIcon={<IconPlus size={18} />}\n  >\n    Add Item\n  </Button>\n  \n  <Button \n    variant=\"secondary\" \n    prefixIcon={<IconEdit size={18} />}\n  >\n    Edit\n  </Button>\n  \n  <Button \n    variant=\"primary\" \n    tone=\"critical\" \n    prefixIcon={<IconTrash size={18} />}\n  >\n    Delete\n  </Button>\n</div>",
        "<Button \n  className=\"custom-button-class\"\n  data-testid=\"submit-button\"\n  onClick={handleSubmit}\n>\n  Custom Button\n</Button>"
      ],
      "variants": {}
    }
  },
  {
    "componentName": "Components/AspectRatio",
    "stories": [
      {
        "id": "Components/AspectRatio--default",
        "name": "Default",
        "title": "Components/AspectRatio",
        "importPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "AspectRatio",
        "storyName": "Default",
        "description": ""
      },
      {
        "id": "Components/AspectRatio--widescreen",
        "name": "Widescreen",
        "title": "Components/AspectRatio",
        "importPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "AspectRatio",
        "storyName": "Widescreen",
        "description": ""
      },
      {
        "id": "Components/AspectRatio--withimage",
        "name": "WithImage",
        "title": "Components/AspectRatio",
        "importPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "AspectRatio",
        "storyName": "WithImage",
        "description": ""
      },
      {
        "id": "Components/AspectRatio--portrait",
        "name": "Portrait",
        "title": "Components/AspectRatio",
        "importPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "AspectRatio",
        "storyName": "Portrait",
        "description": ""
      },
      {
        "id": "Components/AspectRatio--cardexample",
        "name": "CardExample",
        "title": "Components/AspectRatio",
        "importPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
        "tags": [
          "dev",
          "test"
        ],
        "args": {},
        "parameters": {},
        "argTypes": {},
        "component": "AspectRatio",
        "storyName": "CardExample",
        "description": ""
      }
    ],
    "componentPath": "../packages/react/src/components/AspectRatio/AspectRatio.stories.tsx",
    "mdxContent": "import { Meta, Story, Controls, Canvas, ArgTypes } from '@storybook/blocks';\nimport * as AspectRatioStories from './AspectRatio.stories';\nimport { AspectRatio } from './AspectRatio';\n\n<Meta of={AspectRatioStories} />\n\n# AspectRatio Component\n\nThe AspectRatio component maintains a consistent width-to-height ratio for its children, regardless of the container's dimensions.\n\n## Overview\n\nThe AspectRatio component is useful for maintaining consistent proportions for content like images, videos, maps, or embedded content. It ensures that content maintains its shape as its container resizes.\n\n## Import\n\n```jsx\nimport { AspectRatio } from '@tagaddod/react';\n```\n\n## Props\n\n<ArgTypes of={AspectRatio} />\n\n## Basic Usage\n\n<Canvas of={AspectRatioStories.Default} />\n\n```jsx\n<AspectRatio ratio={1}>\n  <div style={{\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'var(--t-color-fill-brand)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'var(--t-color-text-on-fill)',\n  }}>\n    1:1\n  </div>\n</AspectRatio>\n```\n\n## Common Ratios\n\n### 1:1 (Square)\n\n<Canvas of={AspectRatioStories.Default} />\n\n```jsx\n<AspectRatio ratio={1}>\n  {/* Content */}\n</AspectRatio>\n```\n\n### 16:9 (Widescreen)\n\n<Canvas of={AspectRatioStories.Widescreen} />\n\n```jsx\n<AspectRatio ratio={16/9}>\n  {/* Content */}\n</AspectRatio>\n```\n\n### 4:3 (Standard)\n\n<Canvas of={AspectRatioStories.WithImage} />\n\n```jsx\n<AspectRatio ratio={4/3}>\n  {/* Content */}\n</AspectRatio>\n```\n\n### 2:3 (Portrait)\n\n<Canvas of={AspectRatioStories.Portrait} />\n\n```jsx\n<AspectRatio ratio={2/3}>\n  {/* Content */}\n</AspectRatio>\n```\n\n## Use Cases\n\n### Images with Consistent Ratios\n\n<Canvas of={AspectRatioStories.WithImage} />\n\n```jsx\n<AspectRatio ratio={4/3}>\n  <img \n    src=\"https://placekitten.com/800/600\" \n    alt=\"A kitten\" \n    style={{ \n      width: '100%', \n      height: '100%', \n      objectFit: 'cover' \n    }} \n  />\n</AspectRatio>\n```\n\n### Cards with Media\n\n<Canvas of={AspectRatioStories.CardExample} />\n\n```jsx\n<div style={{\n  maxWidth: '400px',\n  border: '1px solid var(--t-color-border-primary)',\n  borderRadius: 'var(--t-border-radius-300)',\n  overflow: 'hidden'\n}}>\n  <AspectRatio ratio={16/9}>\n    <img \n      src=\"https://placekitten.com/1600/900\" \n      alt=\"A cute kitten\" \n      style={{ \n        width: '100%', \n        height: '100%', \n        objectFit: 'cover' \n      }} \n    />\n  </AspectRatio>\n  <div style={{ padding: 'var(--t-space-300)' }}>\n    <h3>Card with AspectRatio</h3>\n    <p>This card uses the AspectRatio component to maintain a consistent 16:9 ratio for the image.</p>\n  </div>\n</div>\n```\n\n### Videos and Embeds\n\n```jsx\n<AspectRatio ratio={16/9}>\n  <iframe \n    src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n    title=\"Video\"\n    allowFullScreen\n    style={{ \n      width: '100%', \n      height: '100%', \n      border: 'none' \n    }}\n  />\n</AspectRatio>\n```\n\n### Maps\n\n```jsx\n<AspectRatio ratio={4/3}>\n  <iframe \n    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d6998.575412963273!2d31.233882!3d30.044409!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1458409d7064e783%3A0x5eeb83030d45206!2sCairo%2C%20Egypt!5e0!3m2!1sen!2sus!4v1652813095591!5m2!1sen!2sus\" \n    title=\"Map\"\n    style={{ \n      width: '100%', \n      height: '100%', \n      border: 'none' \n    }}\n  />\n</AspectRatio>\n```\n\n## Customization\n\nThe AspectRatio component accepts standard HTML div attributes such as `className` and `style` for customization.\n\n```jsx\n<AspectRatio \n  ratio={16/9}\n  className=\"custom-container\"\n  style={{ \n    maxWidth: '600px',\n    boxShadow: 'var(--t-shadow-200)',\n    borderRadius: 'var(--t-border-radius-200)'\n  }}\n>\n  {/* Content */}\n</AspectRatio>\n```\n\n## Accessibility\n\n- The AspectRatio component is a presentational wrapper that doesn't affect the accessibility of its children\n- Ensure that content placed inside AspectRatio (especially images) has appropriate alt text and ARIA attributes\n- For iframe content, always provide a descriptive title attribute\n\n## Implementation Details\n\n### CSS Variables\n\nThe AspectRatio component uses the following token CSS variables:\n\n| Variable | Purpose |\n|----------|---------|\n| `--t-border-radius-200` | Border radius for the container |\n| `--t-duration-base` | Duration for transitions |\n| `--t-easing-in-out` | Easing function for transitions |\n\n### Browser Compatibility\n\nThe AspectRatio component has been designed with browser compatibility in mind:\n\n1. Modern browsers: Uses the CSS `aspect-ratio` property for simple, efficient aspect ratio control\n2. Legacy browsers: Falls back to the \"padding-top hack\" technique where the modern property isn't supported\n   \nThe fallback is applied automatically through feature detection, providing consistent behavior across all supported browsers.\n\n### Technical Implementation\n\nThe AspectRatio component:\n\n1. Checks for `aspect-ratio` CSS support at runtime\n2. For modern browsers, applies the `aspect-ratio` CSS property directly\n3. For legacy browsers, calculates a percentage-based padding-top value based on the ratio (e.g., a 16:9 ratio becomes padding-top: 56.25%)\n4. Ensures children are positioned correctly within the ratio container\n\nThis dual approach ensures the most efficient implementation is used when available, while maintaining support for older browsers.\n",
    "componentInfo": {
      "props": {},
      "description": "AspectRatio Component",
      "usage": [
        "import { AspectRatio } from '@tagaddod/react';",
        "<AspectRatio ratio={1}>\n  <div style={{\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'var(--t-color-fill-brand)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'var(--t-color-text-on-fill)',\n  }}>\n    1:1\n  </div>\n</AspectRatio>",
        "<AspectRatio ratio={1}>\n  {/* Content */}\n</AspectRatio>",
        "<AspectRatio ratio={16/9}>\n  {/* Content */}\n</AspectRatio>",
        "<AspectRatio ratio={4/3}>\n  {/* Content */}\n</AspectRatio>",
        "<AspectRatio ratio={2/3}>\n  {/* Content */}\n</AspectRatio>",
        "<AspectRatio ratio={4/3}>\n  <img \n    src=\"https://placekitten.com/800/600\" \n    alt=\"A kitten\" \n    style={{ \n      width: '100%', \n      height: '100%', \n      objectFit: 'cover' \n    }} \n  />\n</AspectRatio>",
        "<div style={{\n  maxWidth: '400px',\n  border: '1px solid var(--t-color-border-primary)',\n  borderRadius: 'var(--t-border-radius-300)',\n  overflow: 'hidden'\n}}>\n  <AspectRatio ratio={16/9}>\n    <img \n      src=\"https://placekitten.com/1600/900\" \n      alt=\"A cute kitten\" \n      style={{ \n        width: '100%', \n        height: '100%', \n        objectFit: 'cover' \n      }} \n    />\n  </AspectRatio>\n  <div style={{ padding: 'var(--t-space-300)' }}>\n    <h3>Card with AspectRatio</h3>\n    <p>This card uses the AspectRatio component to maintain a consistent 16:9 ratio for the image.</p>\n  </div>\n</div>",
        "<AspectRatio ratio={16/9}>\n  <iframe \n    src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n    title=\"Video\"\n    allowFullScreen\n    style={{ \n      width: '100%', \n      height: '100%', \n      border: 'none' \n    }}\n  />\n</AspectRatio>",
        "<AspectRatio ratio={4/3}>\n  <iframe \n    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d6998.575412963273!2d31.233882!3d30.044409!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1458409d7064e783%3A0x5eeb83030d45206!2sCairo%2C%20Egypt!5e0!3m2!1sen!2sus!4v1652813095591!5m2!1sen!2sus\" \n    title=\"Map\"\n    style={{ \n      width: '100%', \n      height: '100%', \n      border: 'none' \n    }}\n  />\n</AspectRatio>",
        "<AspectRatio \n  ratio={16/9}\n  className=\"custom-container\"\n  style={{ \n    maxWidth: '600px',\n    boxShadow: 'var(--t-shadow-200)',\n    borderRadius: 'var(--t-border-radius-200)'\n  }}\n>\n  {/* Content */}\n</AspectRatio>"
      ],
      "variants": {}
    }
  }
]